{"_id":"formik","_rev":"244-825555adfc8a16612f3afbdcc4705d5b","name":"formik","description":"Build forms in React, without the tears","dist-tags":{"latest":"2.4.5","next":"3.0.0-next.8","canary":"2.1.6-canary.0"},"versions":{"0.0.1":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.0.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"index.d.ts","files":["es6","lib","umd","index.d.ts"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5","yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.25","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"peerDependencies":{"react":"^15.5.4","react-dom":"^15.5.4"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"5c01d6153585eafdab13f8e7f2e6b827a58d8dc4","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.0.1","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-LVP6X5sgZEHfP2ShPZ3v+2LPYj9HyUhK0qgW2LqfJ0M2RgYiv1iykMwmICr9FiaqkjQe2xJCkwpy663TIt97eA==","shasum":"444ce9430b5fc081cf2350c24a9d3e17db6f77d0","tarball":"https://registry.npmjs.org/formik/-/formik-0.0.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCaN0VplQfZCM55ix6zTYHttDa0b8DdrJhfLcg5qSvt3QIhAOeKCjBwXDGc0Or0CNAaRl5V7Ui4WxpgrbP5s0QgE6V0"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.0.1.tgz_1497469988914_0.48781781690195203"},"directories":{}},"0.0.2":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.0.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"index.d.ts","files":["es6","lib","umd","index.d.ts"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.6.0","react-dom":"^15.6.0","recompose":"^0.23.5","yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.25","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"peerDependencies":{"react":"^15.6.0","react-dom":"^15.6.0","yup":"^0.21.3"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"b1f2f2dbfa818d4251198444992457b0e6ed4ab1","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.0.2","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-ihRirMDre2oz0acG29OM0XFjiWoT2zIiAqxNt4IGIOf3dT2M1yik6CXHdVfuUCavJBuV4x6cf3jj7b9QAHByYQ==","shasum":"6b2a3b5e7c7f2b1fb7d81493ac504015987d5dc4","tarball":"https://registry.npmjs.org/formik/-/formik-0.0.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDDxeCSX26455wvtWA2lkt+t5PB5LXs+slNExboFMcWlQIhAPAIZ7lR4t6xX/9UWEYRZbLR1BmDcHOno6WGqeKOgy3u"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.0.2.tgz_1497470170253_0.08483827277086675"},"directories":{}},"0.1.0":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.1.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.6.0","react-dom":"^15.6.0","recompose":"^0.23.5","yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.25","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"peerDependencies":{"react":"^15.6.0","react-dom":"^15.6.0","yup":"^0.21.3"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"72d8030d1a4dd1de2bbaec3b7215ec2cbfb7018e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.1.0","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-GWOZA8J/7sCc6+NFTXLVTcm9ko3wvUJsD0Q4SxlNZUqIgH3oUKe1TIj8WVIMl69KbICN59Bs/96gR5ktCu8lSA==","shasum":"7975821bf0cb9041e51da16bd5381d7a1a477df7","tarball":"https://registry.npmjs.org/formik/-/formik-0.1.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIErMf5WvCMgsVjM+cBrxPBYBhOY2hMIolN3Ltv6GDdP/AiB3lQcqIw3X/de6skAlPLHi+oAoty4bbAIPl/zu6R0r3Q=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.1.0.tgz_1497470813049_0.16447415435686707"},"directories":{}},"0.1.1":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.1.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"2c1fa5b3941a92ef4502326112e89ffc0e6a44aa","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.1.1","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-2gD4cX1VjrlMC1omtJht/dnNw1xX2/OM2Xe6lKCiEBaCwVyubSS4zZVKfoy7dAKIJuhbh1JUSqjG6O8H/Rmn9g==","shasum":"b2825221ce74d8b47e260ba047dc8cbce5a0a57c","tarball":"https://registry.npmjs.org/formik/-/formik-0.1.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDT+gnMM5+PWh5eESC5N59/KMEAX3Aby6ny45TaPiG/1wIgLzkrklEy2SX5ry91ZXv+snvnOv7w2MMoHJ5tU+RmJZU="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.1.1.tgz_1497473441265_0.2026128175202757"},"directories":{}},"0.2.0":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.2.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"88b4dc31e855b870ceb7d03e20560d9b01a3e795","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.2.0","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-66uKnJ1Cdb17RbbAWp8rQOvzYOMrRDPuXPQuT8DkOguD+W1h4RiVZdTSKhNGSMhpzum9yea5CEEJ0AYFv5EjKA==","shasum":"8375392cb391ce36de4b3fa0204acfc3b8a069a4","tarball":"https://registry.npmjs.org/formik/-/formik-0.2.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC8aRNT1GbBkf23MEfaH4ZQdY8UjDL7N47QgvWiSuVnWwIhAJ4zpNCONJyJAN2WFnijjMaTSXMLj45GaQrCg8jv2qJ6"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.2.0.tgz_1497477360283_0.7188183891121298"},"directories":{}},"0.3.0":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.3.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"33c1e112ede3425b057806cca6fa1db51710c334","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.3.0","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-iEXD2QbMIQaOvH4oCcHVsuV2p3Om69xMcfd8BUJQ+TWjALJ13ty8TivDKL/C0JG3wA56lvGULais0FbyhJaMog==","shasum":"706158c8909d17b567fc1b2bedeb4f76fba94a05","tarball":"https://registry.npmjs.org/formik/-/formik-0.3.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDMpOc0xCOys6p2Naz6jUy0VOwLMenn4l5mYWW5L+EcowIhALmfgAe2eWNqSHclsW1TBeNGAynVnr09OPwyMFOV+I6n"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.3.0.tgz_1497551599674_0.7714060998987406"},"directories":{}},"0.3.1":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.3.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"c46aa7af8655a5ab461bc2c6aa9fe6d3be400a71","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.3.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-3Mrv/6UmPMwcN2Mcj/ka9GdBlp+qgJUFgCMRLPySDPr7HfZ85DaXoDado3VnraNl6RkWfcahDdM0KGlgDl6KyQ==","shasum":"161923e3ef47cdca85e96bd48785c74f994c562a","tarball":"https://registry.npmjs.org/formik/-/formik-0.3.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIG32y/dVf0D+F43rpbXyZw8Pjlxzsc8bX1gE84lON2e0AiB6V5EDFo/wBEzzkzjoLIaHouNeTu9Amqonxt2CPqBY3g=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.3.1.tgz_1497562203116_0.6631475444883108"},"directories":{}},"0.4.0":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.4.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"^2.3.4","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"09db6e0b5e0f53fca7b94e8b1c13bf0fbb53fb28","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.4.0","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-pDwz33YjVCnSOFV2eiI85P8zyXH/bLLK5BbH/kDyzMBV5jcpA+p6Q/54yMu74wK1gR8Zq+o4ArOH59oixvz9+A==","shasum":"c9d8b6c77b43033fdffc4ac115b917d05ad81c14","tarball":"https://registry.npmjs.org/formik/-/formik-0.4.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDCxuycW02Ka0y5MbNPtVu+LotvKheip4DE/mJzy/dC+AiEA4BeE3L2esLjMe1Nto7qGdtkv4ANJcuVJBs3CJvGPRIw="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.4.0.tgz_1497568200037_0.758876966079697"},"directories":{}},"0.5.0":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.5.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"d5a030301cafb7054257ae4a7b66d5db2f6ccbed","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.5.0","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-im73l2NW96+AokogthZrgJRfpLyiphNA3aaQw/lr2y5IR1U3BlRCUdFsN/8IddfRSyrdCgKuwfm8PnV/1SU4vQ==","shasum":"e0bdd51ca2c671bc7fd6f5d0b9680510c718c322","tarball":"https://registry.npmjs.org/formik/-/formik-0.5.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCeLQOyGQnRswHLyjo5BfI4+w8uVXPPwXOub0KaZ/Q7kAIgHIxh1UXWMHwBVj0BQ3UcUMxND1pXvBu+e7rg/oqdGM8="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.5.0.tgz_1497641009029_0.17611630004830658"},"directories":{}},"0.5.1":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.5.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.5","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"ec3721212cb14ad24c6630dd4fe61a018fe97fc0","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.5.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-Bxz5MVVR6f9kuFTYP2l+7QGovkm+k5UDP5sLjVZnt2lLOYymMJbpy5HENDvTWYbzgax4hDShxrJZpGkV8QhFXg==","shasum":"2210ae426000cd87b91c2046338a2f6e7dd52572","tarball":"https://registry.npmjs.org/formik/-/formik-0.5.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD/+iD19tQPkWeO9rV61rkmx6NfAeWNCog2G7bnmak9oAIhANPKK5eQJgmv9CcTu0EDZbrl/3XgioibhWJGRBYApvFE"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.5.1.tgz_1497645289054_0.5598678663372993"},"directories":{}},"0.5.2":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.5.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5","yup":"^0.21.3"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"2f16ec85bf92b71a2cf9d54b32e93fe541eaa38a","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.5.2","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-PThPDPIv+3KZMAEao1Ddlfh3mlXHgtVTOz+S3Ib6mQM9MamsZ7yC/QYVmlp40HW6Z2oSLcdWvZE7aWUdl309NQ==","shasum":"c3c615dbe46668e1796b193162b2a17b083d593b","tarball":"https://registry.npmjs.org/formik/-/formik-0.5.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCiqaC31qoJrYlKSNNF/WlUe0rCXNyqwqnPWLmtT+uWAgIhAImjR3aDfwQji0uDgdHhdIgJw/ivsaxzbO3PZUGsqWKC"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.5.2.tgz_1497729178695_0.2957546138204634"},"directories":{}},"0.5.3":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.5.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"react":"^15.5.4","react-dom":"^15.5.4","recompose":"^0.23.5","yup":"^0.21.3"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"b7a2cbe234c873fe303a72c10f60729144e05acb","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.5.3","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-wjXSGdj/Sz3Y34dWCPRjFmbju+ylDiz+/WuOJpYJlEVtm10gruBr5aQTMdfh6a6ZUtqzoYE82b6DPVCw82vHjw==","shasum":"a32f34a206452ffd02d60da60802a565e368a42a","tarball":"https://registry.npmjs.org/formik/-/formik-0.5.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCPPTQ6yw3J396Op8Clv2lwJiNUXr/ExFA1iKByh9s1sAIhAOWxBy0HjFatOY/B6Ek0m1t66gEmZ4VMUCGC4bGSXC8e"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.5.3.tgz_1497808194863_0.8962747112382203"},"directories":{}},"0.6.0":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.6.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"hoist-non-react-statics":"^1.2.0","react":"^15.5.4","react-dom":"^15.5.4","yup":"^0.21.3"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"fb8a624772c74f71d99853564e07bc0960ed743d","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.6.0","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-JjBjZVOhWJyeevpJwKVTThdlL/sV35GjTeCOnbgWPRK14qDRyq9SUbxh7QJ2DUC9VPYGsKe7Af2ouLQ7LaNKxQ==","shasum":"652187a327fa49807b5cba85d9c61e17f32d8b14","tarball":"https://registry.npmjs.org/formik/-/formik-0.6.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEr7rFohgR0OdvUZ67vnAJuT8drcmGGB4jiR4kv6USaHAiBVm36dN645gRoN/0WHpy4WqvHfmXCvByiQmK1cedADuQ=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.6.0.tgz_1497883454945_0.05269507900811732"},"directories":{}},"0.6.1":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.6.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"hoist-non-react-statics":"^1.2.0","react":"^15.5.4","react-dom":"^15.5.4","yup":"^0.21.3"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"949106bbd59c24e3ad3b6d42cc1dd002b1f3b41f","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.6.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-9FMpECqqcSjk4cd3A+N1vtWgqHcMY8/kpPZVU4la15xiQXEN+6zx3xG3/lmRZ4yCEqsd/VrMYW7XN+UvFAb96A==","shasum":"af6db9101d04f278c5992a4f57fac36603c51fda","tarball":"https://registry.npmjs.org/formik/-/formik-0.6.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICArVTRWZpB/JaDyMw7x9OhA/TuBS1wcfwb45M3s13P+AiBiE2+/z7XxlR3ukTokBjLzqVtYJ0j8+ESiwb8NmpBzDg=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.6.1.tgz_1497885131994_0.7248505817260593"},"directories":{}},"0.6.2":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.6.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"hoist-non-react-statics":"^1.2.0","react":"^15.5.4","react-dom":"^15.5.4","yup":"^0.21.3"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"4435230870a3470157dcc200a598d2ce005ebf35","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.6.2","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-ezzrJTPnMQVfUH8+NRbfzT3yBrzTkvZZ8crALlYIx6B8x7+cZZs3ArUESAsM1vhMSOkTw5G7si+HPS7Vt41HAg==","shasum":"088c42da01752cfd17f1278f4873cd3a9b128789","tarball":"https://registry.npmjs.org/formik/-/formik-0.6.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGtCS9nkMHIIiIGjjZOSrtuOE0ReApthCOTHMbwX8sK6AiA7AmDdqqqxRbDTDqa9rHDqzO4Xg1UvnlVTbLkBfl5teQ=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.6.2.tgz_1497911061815_0.526429247809574"},"directories":{}},"0.6.3":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.6.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"hoist-non-react-statics":"^1.2.0","react":"^15.5.4","react-dom":"^15.5.4","yup":"^0.21.3"},"peerDependencies":{"yup":"^0.21.3"},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"6d08afb3c5297fb8041732dced4b838b954f1dcb","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.6.3","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-+fJdYvQwO6eKHjV3JiPeAgDM1uHSIan2i1b5jFUrdodJzQv7ibWJshs9IF7qBIJT9vaL3ktXeLE9xLp/9sB05A==","shasum":"62cfa27c3f26f3774f51d81dee3e0a3f30864ea8","tarball":"https://registry.npmjs.org/formik/-/formik-0.6.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEV5ks01+2iDVJ63AVv+4zUgpwKdT/o9p9Crr4SGlicDAiBXRhcUQ5FBTFit/IEfoWNYg/Z8eTkYwyCFQqI4h6SKwA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.6.3.tgz_1498504438998_0.1288744113408029"},"directories":{}},"0.7.0":{"name":"formik","description":"An elegant way to handle forms in React","version":"0.7.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["react","forms","recompose","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build"},"dependencies":{"hoist-non-react-statics":"^1.2.0","react":"^15.5.4","react-dom":"^15.5.4"},"peerDependencies":{},"devDependencies":{"@types/jest":"^19.2.3","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/recompose":"^0.23.0","@types/webpack":"^2.2.15","@types/webpack-env":"^1.13.0","jest":"^20.0.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^2.6.1","yup":"^0.21.3"},"jest":{"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testRegex":"(/src/__tests__/.*|\\.(test|spec))\\.(ts|tsx|js)$","moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"4892241078c97daba42c1e23b6770a0613f5b953","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.7.0","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-qjDZA/AfPHXIgMwVxXGCgxXRgBveqz8uivLLOlVcN4quyPpqYpwDmvcs04jzsfszBkOnaifNQH1hIVt8xrjMWQ==","shasum":"d684db4d80bd4a939960909d3ffa500f88cc16f7","tarball":"https://registry.npmjs.org/formik/-/formik-0.7.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDe8GET07Tp7jbnOBLforqsgR4iRUU5meYWhBs49nW3VQIgAKKNaMdE/55IZmERW/hzHR38y0V/F+9WStL6YMATBxA="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.7.0.tgz_1499028324866_0.16668664710596204"},"directories":{}},"0.7.1":{"name":"formik","description":"Forms in React, without tears","version":"0.7.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","forms","higher order component","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/*/*.tsx'","precommit":"lint-staged"},"dependencies":{"hoist-non-react-statics":"^1.2.0"},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/jest":"^19.2.3","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/webpack-env":"^1.13.0","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.4.0","webpack":"^3.0.0","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/src/**/__tests__/**/*.ts?(x)","<rootDir>/src/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"6bc94b4d346254b54112f42551cb22f12d3c3951","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.7.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-g2E9CSt3olYOE7flVJzgOeAKR3V53hATixBq170ri8YteUar/OuBG2422RjNUrVm9+aHkG4fch/qiucQr5EnWA==","shasum":"44389147a721b37c9f9b4998a2d5f53ba6866eeb","tarball":"https://registry.npmjs.org/formik/-/formik-0.7.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE42PBmwBx+V4hN2IQYVQJji8bH947AxcsYvmBnlji8TAiEA3C7jmeCTCjTBRT2eKQ645VoRWXeARIiF4UaK+oQYZO8="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.7.1.tgz_1499115492054_0.03567904722876847"},"directories":{}},"0.7.2":{"name":"formik","description":"Forms in React, without tears","version":"0.7.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","forms","higher order component","hoc"],"main":"lib/index.js","typings":"lib/index.d.ts","files":["es6","lib","umd"],"scripts":{"test":"jest","clean":"rimraf lib umd es6","size":"cat umd/index.min.js | gzip | wc -c","build":"npm run clean && tsc --project tsconfig.json -m es6 --outDir es6 && webpack -p --config ./webpack.lib && webpack -p --config webpack.umd.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/*/*.tsx'","precommit":"lint-staged"},"dependencies":{"hoist-non-react-statics":"^1.2.0"},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/jest":"^19.2.3","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","@types/webpack-env":"^1.13.0","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","ts-jest":"^20.0.6","ts-loader":"^2.1.0","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","webpack":"^3.0.0","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/src/**/__tests__/**/*.ts?(x)","<rootDir>/src/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"9ec5793ab4eb9992cfa1160a002db9332c3d3cf6","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.7.2","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-1dMpIjqs/gIPvGrkLtbAbnVDN6BCGRd2P6jhvyOTUHhSVMuwcbGNtqh2gYgCDYy/0oPr89Jf9wuxWCxrJp1+9A==","shasum":"7756f69a9588feea5c4ccec3f48f0f95c68cc4dc","tarball":"https://registry.npmjs.org/formik/-/formik-0.7.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAkHUvnutLlf5YmJ5pEnNXp1wG8btzWjfJ3rM3p8VSGMAiEAg/jLlb8cJkqhDwKOFF4qGQQOM+l1NgcmXt5PzBsTodc="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.7.2.tgz_1499793186218_0.3140613096766174"},"directories":{}},"0.7.3-rc1":{"name":"formik","description":"Forms in React, without tears","version":"0.7.3-rc1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest","test:watch":"jest --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/*/*.tsx'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.0","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.5.4","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"c2d07c15eb765f3e73bb5839de4798fb5411ccf6","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.7.3-rc1","_npmVersion":"5.0.3","_nodeVersion":"8.1.2","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-JL2uf3ZAKEovmm5PO4feaFU4sNwbucI0syLN0gj9qxARzWIQX2Z4nI7yvaYb5muKcA5popL9WJkuAh+jiC9E/A==","shasum":"c536d612f5b8fc4d245f50a312f0960450cd42fa","tarball":"https://registry.npmjs.org/formik/-/formik-0.7.3-rc1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCeLhiT2liOByFGU3+2Dd3CRPvsOOI024NEr9MBIffEhAIhAILY/jC//SQ3Yz7D9Ip8ep1/tj2Dh3H8hV74g9dPJtPw"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.7.3-rc1.tgz_1499819427294_0.39921203069388866"},"directories":{}},"0.8.0":{"name":"formik","description":"Forms in React, without tears","version":"0.8.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"cb08711f48b0e51d943980ca0fb4ab2b454102d3","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.0","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-eP5DDUo0Q40+tzkbJJ81yFdb0zYjbhW6CNw2QUfOmJhg/IdkWu9Fx759EE8gPJKg1L2sGN0Ze2NTHkR+CJ4T1Q==","shasum":"b2f5037fa708030372878029617ef60ebb88bd62","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDg+Pb57qd3YJSw/Exy/Dmn/xPS1DUEBkRdu5HFpYZhOAiEAhsALKOapPLTRXAzHSkgbq1gcMZ4FGW9ia0g3Mcr/w18="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.0.tgz_1500679170427_0.13912162953056395"},"directories":{}},"0.8.1":{"name":"formik","description":"Forms in React, without tears","version":"0.8.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"b233a16a4148cccd3b58dac0feb45413d2701905","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.1","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-UnjrYIZ/eL2LJBeSGGH+w41/JaFchSXi01DZ3+XqtYLYnX1qlHHFXAkKc5VNolEwTlaPyiEl0KOdcq1ad084RA==","shasum":"b0644ff9cb9093e97857ce320fa1e8c9a138a21b","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCsQ3eV03e/RsDnFblGUSEccekNsoSLXHFDZdAU+q4DwAIgKAxPHliM8tJZGP1J8s/zWV7Ha9DCIjna7Xp54o8N6YE="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.1.tgz_1500686809933_0.060855972580611706"},"directories":{}},"0.8.2":{"name":"formik","description":"Forms in React, without tears","version":"0.8.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"4155cd11f7f6b4698323ddb8b7f6c1826a9a184b","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.2","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-/G9CL5rh+iiXemGLWlLO/NgaSeJmkOi+0C5X0wKI/jl2qRDozDd2bkWiFhhPwthyON5NJpU9Ss9L0en7TnMnnQ==","shasum":"bf5c22709548026510fc757baff002ad4fff2b7e","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBsqGudac0L7utol7JXzV6vjjO4XpTZSNQv6Cbn+albgAiAcVhpqrZ3ZRVdJP5OkvpMdEZgDyf0IVM9YvUmSC6sFsA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.2.tgz_1500752705446_0.9489854362327605"},"directories":{}},"0.8.3":{"name":"formik","description":"Forms in React, without tears","version":"0.8.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"fd82123ea6fc2233ce54fa313ff9fc99d5b1fdf2","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.3","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-x5kDxMtKEI6WSZpioIhMY+T74DDnO48zNf+du+0nzGnlyCs5n5vUqITsG5bNyCUbZ/P8pNFQq0/ZM7BXPB71WA==","shasum":"23e0c42d634a570394972561695d3e3b1a74c575","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDjZI447LBMUBMkhas+HbIPLtBVl0P8zqSunsJcEXhatgIhAOV8WM+6pqHUPdTILsAjqIls0IKqkcRTCL17cc6Z9stz"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.3.tgz_1500914132194_0.4130705143325031"},"directories":{}},"0.8.4":{"name":"formik","description":"Forms in React, without tears","version":"0.8.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"7e2fe534cfd2217912bbc5a642c460a3381be0ec","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.4","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-S6cyObefR4Tbw9Sgtcq/4FOQu11XKvDBK+A5yBRNJdhEMtMIkFdhlwkC9jCmLEcR66f1sO2JddaHzuuDUjjo1Q==","shasum":"1d9c249e15a23013e076e6b97201e08b07423877","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBxzjEvm+a9xWILYZdLCzCkmLhqj5qyyOwGsKNi6bp6eAiAgzZ/etkXwFWrr8U7oAONbPZLBluso3OuKC9KNsNV7lg=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.4.tgz_1500993591338_0.6692712598014623"},"directories":{}},"0.8.5":{"name":"formik","description":"Forms in React, without tears","version":"0.8.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"ad790c7b3ac2b377ba7b241fa0cc339c32afc689","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.5","_npmVersion":"5.0.3","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-6H6yTH12ZxM/Ntn5PP6EWZAIZ/eIAokpfpVhDApCbxn9vLKWPW0b4J/KONPKcIQFTJCR89FeZAxmKlI12HP6gA==","shasum":"65d5e0dd60be64d617bdce1f2c9f6fada5129056","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.5.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHd75tl463KJviRVgPWdZVcc0RU+012Cm1JL8VNUQFUyAiEAoS5MKcq5oPEy1lGNWECVgVALeYvzHXtm2kk8zzKBfv4="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.5.tgz_1501104526684_0.6259972592815757"},"directories":{}},"0.8.6":{"name":"formik","description":"Forms in React, without tears","version":"0.8.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"afb6363b4eb53aecbcd3a8a0321cd6d2957264ad","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.6","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-F1y6XxtRFEakTALkC2VRAHFcC700spbUcnQ1tJm7w8YLAbXZVmuKtOEXEImaRfYRQqU3yePbBVvKmIUIQs+ygA==","shasum":"b002ae3501440ee2bdc6b48b67f771b27d185aa9","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.6.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFPwMC7gm0i0LHdACd2/Zd0gKBelRXnZGk0X1oiYSsg/AiEAiD4pbGFk5tWu0gL9MIYRaQcnawt4FJQ1919eaYHjg1o="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.6.tgz_1501509454424_0.38739417609758675"},"directories":{}},"0.8.7":{"name":"formik","description":"Forms in React, without tears","version":"0.8.7","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"0bc052fc4f55ca11b192d69c41309d1098a0219a","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.7","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-3DxMQCYvNJzCklKFkSqEi7DZGK7rPW6cqo+AYJ5IFGyR2atfTkXpa0o8YLVKOhTraATKw+1HgPIiKBtk5i9iig==","shasum":"538c7c700cbcc7d36d4a9c38df1978487fe6729c","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.7.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDqmO3PNnM0tZS6hUihGaJ2ELhxr/jjl4BapOZCPlPdugIhAPXklgLthEaC8qp7gCvFSybVYtCap7pY2O5tP2Gr72DS"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.7.tgz_1501515651907_0.9260506643913686"},"directories":{}},"0.8.8":{"name":"formik","description":"Forms in React, without tears","version":"0.8.8","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"7f60d371b9c069d1df7d062bb16ee1d13dec144b","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.8","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-GaN2MSrw8afs8IOYdka7wdWNXo77mu1gCMQjkKEhCv1XbO8VmclMALPMZ4oAEnJH6R3mEAkt8e5mmwCGo7kClw==","shasum":"0515422da2e1f564adab3e18fc9cc6d4d404bd64","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.8.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzU8ulkJOCm3lcPgOYBqHgxQpYNLA7oiCmv1ZT/BchBgIgP/YYGcmreY/J+gjg7jFdNnM/dcUpIqLKp3F6MtBnGes="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.8.tgz_1501530842096_0.08625266188755631"},"directories":{}},"0.8.9":{"name":"formik","description":"Forms in React, without tears","version":"0.8.9","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"^2.8.2","@types/jest":"^20.0.2","@types/node":"^8.0.7","@types/react":"^15.0.28","@types/react-dom":"^15.5.0","@types/react-test-renderer":"^15.5.1","enzyme":"^2.9.1","husky":"^0.14.2","jest":"^20.0.4","lint-staged":"^4.0.0","lodash.camelcase":"^4.3.0","prettier":"^1.5.2","react":"^15.5.4","react-dom":"^15.5.4","react-test-renderer":"^15.6.1","rimraf":"^2.6.1","rollup":"^0.45.1","rollup-plugin-commonjs":"^8.0.2","rollup-plugin-filesize":"^1.4.2","rollup-plugin-node-resolve":"^3.0.0","rollup-plugin-replace":"^1.1.1","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^2.0.1","ts-jest":"^20.0.6","tsc-watch":"^1.0.7","tslint":"^5.3.2","tslint-react":"^3.0.0","typescript":"2.3.4","yup":"^0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"523177c4d50313101e7d9d2ee5b59389f0e8a170","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.8.9","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-KqcL4ITpdzq3vTVygOgUEtrZzb6Z5Pec5o/hc5yJxtbyGpbi1CHNuVlpwflz3C60U4wBYKpxHDDc3iV067GGVA==","shasum":"a536f09c8cf2141b8a65e656803d38b055d9e8f9","tarball":"https://registry.npmjs.org/formik/-/formik-0.8.9.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFmFdLABnazSUnMAewJHrjkf6xfYc6I3RaBnPzSs2VZnAiEAibZRBbMkdC1GJBCWH3K/XseJ1xtk6vemw3z4Nfk6vMM="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.8.9.tgz_1501599258925_0.863040056778118"},"directories":{}},"0.9.0-alpha.1":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","lodash.camelcase":"4.3.0","prettier":"1.5.3","prop-types":"15.5.10","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"a311a120168442bb09417fd64936a698cb0bb7a5","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.1","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-PWMYh1nHbqPe3DgJRGtM6/HgZdGDaiIsZzLjZxm94cj3WUwe0MEkH6yaATyNhXy9qn2zozOBVCkP/E41p8mQ0w==","shasum":"d4270d323aab54befa4a8ca917b76bb5364ed99c","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIC9NU8dj8zBfU6+F8tVcOwrIHNNAnfhvnyr6w4ZvYugdAiEA6CbUjLfaN2zHEUhbWdJrDVS9LM5glogotNA8XrA3HT0="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.1.tgz_1501882460783_0.49156971578486264"},"directories":{}},"0.9.0-alpha.2":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist","next.js"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","lodash.camelcase":"4.3.0","prettier":"1.5.3","prop-types":"15.5.10","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"ab833565348187ec7a1aabf5b6a20308899aa141","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.2","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-6XJn8VjXZmRcNcvRn8tD9TuYuCOiKxASVvIdRQKrU3KNfGVM4nTX4iE3qNCqzkbq/Lub0wzq6rEDiRa5MYZk8g==","shasum":"c53f321f18268213a5fa2ac05ea4277b4169d86d","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCCSlBb7E1RXZDVVQzw9H8FWvHvTNXIWvGn0Wk/ygbKSAIhAJ6Kf+TrblgByc0QsAd3OAuhMymrq19bkzXhX+adBvGr"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.2.tgz_1501883470284_0.789754607481882"},"directories":{}},"0.9.0-alpha.3":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist","next.js"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","lodash.camelcase":"4.3.0","prettier":"1.5.3","prop-types":"15.5.10","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"1c87d0251fa87c49cfcd365fd22efc503d90b792","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.3","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-lsj1LcP9Z1xgLPbQ997J/X2Xq9vyhtlL99L/KCoaX7qNnOYTr5kKOrzqKeMYn04RSEPPEr5w5ouo8wGHxwndyA==","shasum":"e062cd4fcd6154e71ee839eb54734e33cf2b282c","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDBpdN2tRrVW68K+/IpgpYxtay0o0DiRwC+AqUISJkTaQIhAIBz/uVFmcpFwVF+NaZ8uYPtHj8TfgxMVUF5SrgLCCeI"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.3.tgz_1501884038504_0.6472082622349262"},"directories":{}},"0.9.0-alpha.4":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/types/formik.d.ts","files":["dist","next.js"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c && NODE_ENV=production rollup -c rollup.config.umd.js && NODE_ENV=development rollup -c rollup.config.umd.js && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":"0.14.x || 15.* || ^15.0.0 || ^16.0.0-alpha"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","lodash.camelcase":"4.3.0","prettier":"1.5.3","prop-types":"15.5.10","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"cae233606e0f520518acf9db89b0cd4c0160bef6","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.4","_npmVersion":"5.3.0","_nodeVersion":"8.1.4","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-hKldRELQLhEZ6XvqArxBb2vAM27FEjgLOkJhtFX6avUGA0j5YxmLyBbDgGvKYbD4KMGt9m3aQKDsi3weYidukQ==","shasum":"3c68391cd1b027c0150067f14ff105fd2a827c31","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD0QEma410b5gWNKE8BUSdkzM53Ym0cPzmsehPeYfXewwIgMdhKen0lmG0D0jGTRjCQFXkuGSoTtpbGvUjhmg89VaE="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.4.tgz_1501886848398_0.9368444634601474"},"directories":{}},"0.9.0-alpha.5":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","next.js"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && NODE_ENV=production rollup -c &&  NODE_ENV=development rollup -c && rimraf compiled && cp dist/next.d.ts next.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","prop-types":"^15.5.10","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"1be11c6ef0e67167324bf100ea659b289b995f6a","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.5","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-Liw/ToGSMTJQCdkG4yEGXumg3vE6qELpj/+mrRDh01zNTy43VIKe5sNY5h7GJSOm72diDJhXJd4CPNWcYftoyQ==","shasum":"b9bca6b2ba16761213c0d59635ab51ab8eac6789","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.5.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCyktBh0bYItDhTh5WG8f9oXdbF+lHhSgrzMXZV5BWA6QIgCBs+ihL4kZU835ZpEx7GLYmfSbbEfSZf7sN1QQV6MqQ="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.5.tgz_1502401215987_0.555999998236075"},"directories":{}},"0.9.0-alpha.6":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","next.js","next.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/next.d.ts next.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","prop-types":"15.5.10","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"b80237417ef4dbda1addf88c0153ea563df8e531","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.6","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-PDWjRMmX0VTtITw+rKEIDftAxhX1f9bf3TYRBJGku2kwlWIaHAs7ZILXLingVZyxBGqMb1tfhmkWw+fyvtUtkQ==","shasum":"50a287e8aba095ffdb3373a5f4bf9c22e08aecbe","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.6.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDejkAhWL6NeoSabgMYmyxoNm4jEuI/wyoGUZqJif7RrQIhANSjdEV+muUFmorLhMT3JLhHF+S2ukEc58k0EYdlsQUY"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.6.tgz_1502982738702_0.5278171852696687"},"directories":{}},"0.9.0-alpha.7":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.7","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","legacy.js","legacy.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/legacy.d.ts legacy.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"0a3ed05520edb09df6323b311c030569dc090392","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.7","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-O2D1vm/8Jby+kbWXOKVPMahVWhS7rHzLmElxEkuhjh0bnkbCeHij3k8/9NblREqUxijOKMSfeaLRVjEMPr5Nuw==","shasum":"20f0f3c670dfa70cd1c270083457bdbada9f99ce","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.7.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCe+23+wSVIJjHpn93gN7pLV8I/YCTdgFCaHrZKTAc9/AIhALhjp2O5WID1T8sjn+do+Nn9f4smNDyV25YP7t3TOk3R"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.7.tgz_1504048850429_0.9536078409291804"},"directories":{}},"0.9.0-alpha.8":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.8","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","legacy.js","legacy.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/legacy.d.ts legacy.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"d276ce92dbd4220e6dda808f3778c8adb35af916","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.8","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-kHQzDQz58KUDIZifzRH7YZmpRnIhTbZ16p8r5sxBdryPvWNVEwhYrEx9RqvltYnxDJTsScl/nWtwgNqHtzdTyw==","shasum":"3a1a04cdb7ee9f58d0416b24445632061a2e105a","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.8.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAoVK9ryTE/HwDceDOXPL+W2K0qRV3Sbim43IHv7cknjAiEAx4IVephu15FmxsphTkbywd5xrK3CYigNzaxonGaekO8="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.8.tgz_1504049148826_0.15097804157994688"},"directories":{}},"0.9.0-alpha.9":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.9","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","legacy.js","legacy.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/legacy.d.ts legacy.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"1b3da275e6ab5a768ff7df1e5716494bf3701e22","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.9","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-iCflU19O9DC+6uWEpuhbb/i0AzgX+xyjDfiqGMlwzOp+2ciiladkcjOgdCuz7ilbhZpRQ3qDmP8Zoq1BkC3s/A==","shasum":"6c296227ad13cb18b0346255aba1b4041454e414","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.9.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDtJ4PpE6XES8NMssE5UD7Yvm+v6z1NZ6Tv2O2nYB2QDAiBJKIFwoejxuau9TDS5HXCOoHJQ1EI9FUhMCfBOtTMsCA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.9.tgz_1504051537937_0.5449321437627077"},"directories":{}},"0.9.0-alpha.10":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-alpha.10","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","legacy.js","legacy.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/legacy.d.ts legacy.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"24b5b49a9c3bf4219d9a9c3696398887044078d5","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-alpha.10","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-3o5S13bXuuS9U5tAOYl/Rk0N7dd1YTPEyZkGU+z3KspLjFC4gkfVAAz1bA6/5tcpWtSNGrD8qri3jnn5/uSulw==","shasum":"b509431030ba38d8ae3f5545b6a7a06b3d834055","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-alpha.10.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEiY4OQgNJR1dYUY8cD2eaYgvgieFvwl/6LY+3BJgEONAiBOUaOYLx7l1yParxyluVlre0idcj2LGKL5Mig4K/vybA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-alpha.10.tgz_1504214709717_0.940606260439381"},"directories":{}},"0.9.0-beta.1":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-beta.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","legacy.js","legacy.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/legacy.d.ts legacy.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"49c8471c8cf79674955851d5be2c2e0415d6ba42","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-beta.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-0Fh8yLThbwwyUmeYXHGH0HzMOScCvdldOaxDMSoIEdhh9ujpieZqGVSLSqzjs2Ay6gFJceLkg4yPWt42579u1Q==","shasum":"4e9273ad024c02cbe5ce98c7f912131103197848","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-beta.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEdUkO2WKs5qIiCpVVF3S7Z9zlweBzUeHF+1DVsDdLSjAiEAi5zQHSMyP5YdEc3BTO01gGt2CNMr+/0AInXNljIpBV0="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-beta.1.tgz_1504298448006_0.9535110224969685"},"directories":{}},"0.9.0-beta.2":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-beta.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","legacy.js","legacy.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/legacy.d.ts legacy.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"be4e1165134fbd57fe5e65b63a01a97d4e284dfd","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-beta.2","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-ygpdg+0vjRsRdijKkOG5I8zu5DMC+r7JZz5iyybDcvcBUrHYIdWmmPRedE/8jrgvAcKRND6hONnV1K1LQaoKqw==","shasum":"6a2618edd1c7fe9770c2e00b68aa6c9d3ef8642b","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-beta.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDIPVGGjf6dbttzaKnsBYI2jVieNNyLlOuq9c8Gopu51gIhAIf0h5uehc3rm8Nu2SAs5ab6eBafMXGtSqPgoJFTAnPc"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-beta.2.tgz_1504450764498_0.2607389541808516"},"directories":{}},"0.9.0-beta.3":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0-beta.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist","legacy.js","legacy.d.ts"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled && cp dist/legacy.d.ts legacy.d.ts","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","cross-env":"5.0.5","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"673f0e5bc631cf5b6baf6c283a5e43088ecf3a8e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0-beta.3","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-aO6mGjFMjNaHncauLdy8ZxPnN35SUYrUIi698/utbw4DkIIHIXdQwvJjYPoXgjxYBRx2N1JilJmoMweNqUYLwA==","shasum":"f7b337d780ba38ecc9ba19c3df8f7e621b697e1c","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0-beta.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIH9vAX8V40k8b+p3NhHm5ehXeEIGKQ3d0hkE41A7FrLpAiBt0CpHgqfLOBqKz8Be3u19HZ15w+P9bAAu1FDngmmmmw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0-beta.3.tgz_1504624861026_0.8949108521919698"},"directories":{}},"0.9.0":{"name":"formik","description":"Forms in React, without tears","version":"0.9.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"bcc2c38fdbaac247c5e56e9fa3967b58e00dfd3a","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.0","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-pDCaLttVPGmwgHXrsEloHvMdB9B6/oNJrvF9jL8ZPsvdgg1CaxBb36yuCWz69c4Pgpcyg7qYbkAmFcN3l5qlfQ==","shasum":"7552237a9606c31cb7814fe7b88840d149d15fb2","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDMNLkrwktYMcus7MtNb6WZfsWNHMiu/lqjAe+OSURQUQIhANFCvXshM422D9D7/K9SxSY7JrpPNIYU812UABi0OMkw"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.0.tgz_1505829910142_0.6718084847088903"},"directories":{}},"0.9.1":{"name":"formik","description":"Forms in React, without tears","version":"0.9.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"358af3bc579caeff30d7691a3ce9e74c652305bb","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.1","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-SKI3vn8pFphvUF7oVzFW0OocZBSWdEV5lwBGewwhuR2+EWfLDam4QP7k/Ys8Y3AJbpjBmWUG+rHVk8K6i0cq0Q==","shasum":"6bbc7e3f596aa6efba8ae5bb1437153d4a9c22f2","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDJfkH/edDb+mVWmDgidlUfWkRU8dfmRInRN1JghyDVLAiAs8Fh9NHQy7KOsF3t9UqngB6Qk3+K8vgdE8zs/PbY07Q=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.1.tgz_1505945640274_0.6870877342298627"},"directories":{}},"0.9.2":{"name":"formik","description":"Forms in React, without tears","version":"0.9.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"*.(ts|tsx)":["prettier --trailing-comma es5 --single-quote --write","git add"]},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"1705d789441cbf29099d76b8e37aebaeb25f6d0e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.2","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-lESMrrSm1yeNi3bLbHyBwnpYTIFFIDMpKXM5yBqXCQ5X7deteGE6rulHddW6NOohcDeXZGwMm9GnNvZkZvt/bw==","shasum":"5358b9578fd52548c9016f6b9294822edb46b05c","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFNmoC1FfsZX2OHXJMrN2mUf/E5ENlrjyFwMgW8UbzdzAiBQDi3ONHWoz+658TUmLl20EC119MVWpK3xPur3DTOUCA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.2.tgz_1506470059515_0.8871848655398935"},"directories":{}},"0.9.3":{"name":"formik","description":"Forms in React, without tears","version":"0.9.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"f4003b5a40f6128e8bfb72660d31de1323010a70","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.3","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-s/q0OaHH6C15xuJuPYm8i8Si+Ab+RsZ7znliFW9ZX+GTcXCeQkpOBkIcpINXjgHlA3PInPK/wOz3wzn1+zZOeA==","shasum":"9626e8fe4217211a6d406c7371b30de275e8d831","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGjwW2gOKqrBwBdwgJlZxJZQH+Sz5Fum7JwPuoQYwOaDAiAczyUloyyAaGnUR54aUOnL0MRzBNyawGtscuOZs8HlMw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.3.tgz_1506965712066_0.7323514029849321"},"directories":{}},"0.9.4":{"name":"formik","description":"Forms in React, without tears","version":"0.9.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"1ee8d66553c2d8d95b3cb542e5d636c6c3163760","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.9.4","_npmVersion":"5.3.0","_nodeVersion":"8.2.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-36X4LdwFKeICqxG0LK/iRvlzwjOogplWoWCenjDy/L3Wju2iBrtHQMSUrB/qLYCdgYQiXmNwKYRXXDwQqtdK9w==","shasum":"e284620539c54d7d052c1950230b1e44c5acc6a4","tarball":"https://registry.npmjs.org/formik/-/formik-0.9.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIATYOqEsM6zColYD6TQ+vsje7jcThG0cqh8nLwaulCADAiBIuoO9JH2ruklVSMWiZIx00vis3AcwcAIRAdV1fcTXkQ=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.9.4.tgz_1507244177546_0.5882210184354335"},"directories":{}},"0.10.0":{"name":"formik","description":"Forms in React, without tears","version":"0.10.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"4c2431cbe2609a67b0d4fdb86b61756087a5ca2e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.10.0","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-DgTd0PF6E9avt0RTeMQxLQLZHbWhXsCkW7F2J4NGSQVVFUw+18WqiZAz0I8wvJ1TDr6yeJxjlD/5gBccUvnN3g==","shasum":"80ee8d976d2a842950fc78481beb5aebc17a5ecd","tarball":"https://registry.npmjs.org/formik/-/formik-0.10.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDX/mJLAfZXaPzYg25CmxrocB9m6znz3UKnhl9VbRmQ1wIhANztJSNymQvDXakPVKrm1l1QLDi49mGCdyMKEPrBLnPo"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.10.0.tgz_1509663756455_0.3984551962930709"},"directories":{}},"0.10.1":{"name":"formik","description":"Forms in React, without tears","version":"0.10.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"b3cca333126ff174d68b35af9f4e6e268e86ed86","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.10.1","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-rpBGwSevAPBOC9rTrPnP9HFMgkBRCGv8N6G1mThcdJXEP2DHJEMxCzwDhaRKLYCO0YHlqATrpi0dPH/zVD3qTw==","shasum":"5b437c0efaf3f2b4930803fd6e169fe732023563","tarball":"https://registry.npmjs.org/formik/-/formik-0.10.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC1wX6xW+pPfWh1LMSSGXycHhd4Z9yJgCoDIP/kzTj+5wIhAIF0dgEVjd+BUVFFccbEBG77e5FdUx8uA1OwBx4lRF9d"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.10.1.tgz_1509980102819_0.2561196719761938"},"directories":{}},"0.10.2":{"name":"formik","description":"Forms in React, without tears","version":"0.10.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"d9d3e3efb9244e7f4239fa3bbf042a8e4072c79e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.10.2","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-YnJtzPDwHtveQN+PXsU0OJWtHYMdTso3lFJsr7zguLdLyb+YZRAxLzPm7cSeAXE30h5ToSAFQ3ag6VA/dpoOug==","shasum":"e746c512cfaa32f617fb9be1bbf7e8be54d49ab7","tarball":"https://registry.npmjs.org/formik/-/formik-0.10.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGv62B8qj/HTSi3zKUhf5VNqly+t3tu4XOpH4VloAD+IAiEA4ZCo8fmXpjZMo9mnUEFkJMRrd0P7+OoQ794QJrM+2xI="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.10.2.tgz_1509988334875_0.5319973407313228"},"directories":{}},"0.10.3":{"name":"formik","description":"Forms in React, without tears","version":"0.10.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"1.5.3","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"b50e2ce19dcbe38bffcd12bfe8d5407be98e3022","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.10.3","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-fUOTQQ3kGa1ttNNa1GK51ieN1MLsX7D/5MNOXCs5oolQchRwadbBz1NgoOjFPg2uJiRlwioGnlCSUeEwDr+BjQ==","shasum":"ec71de2e29c026a65384e6d6b441718968cf90ac","tarball":"https://registry.npmjs.org/formik/-/formik-0.10.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDG5nJUCsdemv+lD+ltazlMCyhMY9bpIEtck2zGFWhEOQIhAJqtVbu5XLR2gAd881jkL4ymFhVZk6t1KWoQq8NH+2cJ"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.10.3.tgz_1510001332443_0.1574102931190282"},"directories":{}},"0.10.4":{"name":"formik","description":"Forms in React, without tears","version":"0.10.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"^1.8.2","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"d33db577ad0edf363cb95a9ed4980eef5e07516f","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.10.4","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-Zl33F6O7kqWC/NtZ/BeroceD2UzWksJerQ6BMcnG58TnXGx75Mt8hr5pUKzF32WtLBl/FUHSsVbMVc02gET1Bw==","shasum":"39747caa57b0f72f127b44b87e8a36f75f19926f","tarball":"https://registry.npmjs.org/formik/-/formik-0.10.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFDpiiF65woq3sVb98saqfnKcwZJfFTxYhYcP/xZSZxxAiBTMlfRS7Q919ZplZAavNyMUTZaGdZ93GpZxIyyVPfRow=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.10.4.tgz_1510537440107_0.4158939339686185"},"directories":{}},"0.10.5":{"name":"formik","description":"Forms in React, without tears","version":"0.10.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"^1.8.2","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"e40dd9e9c16a8a29ac59cd5cebbea4201ee9a674","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.10.5","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-Mtzqmu8svQrqlnfuszHqso4SCSLw/huT7fhbJ3kWniYO6eaQSEOoiMVhOYXvuZQFBYNRiTV0287II3NFx/nzWg==","shasum":"6984d2f22e918c6d2264a3cb86b8582f7277faca","tarball":"https://registry.npmjs.org/formik/-/formik-0.10.5.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDYzcDGQs5frCnvKEoHZCzY+0J9aQaTQ/vHlYLpuqNOXAIhAISLkNMxR/MJfE1aKHms+jLQW/uYiMdKUxXLZrCHCfHV"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.10.5.tgz_1511807626132_0.24404920637607574"},"directories":{}},"0.11.0-alpha.1":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0-alpha.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"^1.8.2","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"77a777daa7a585e537759247eb3d59ec6b2579f1","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0-alpha.1","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-fTx9vgx9l4eCQPo7wbtDKVz+4BUccvKQpJQbzycn6A8Lq3b9CcRgQwuVo421xpi2Jfv1lFzZjTMaRP/LAucgJg==","shasum":"c016c4bfdfaee3609241f5dd05f4ead179520b08","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0-alpha.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCotg2ZAaC40M+wZg0FyzccFl/UMDNBpJlkn2vr3goFhQIhAP+vFY62qrcGg+eeeIDr/h3HIWt31tMKAY5bf1l+iETU"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0-alpha.1.tgz_1511884585582_0.41932211606763303"},"directories":{}},"0.11.0-alpha.2":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0-alpha.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"^1.8.2","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"725d6bd747794af75356c48ddfae2ae22614e67d","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0-alpha.2","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-LEqXGunsRpj4aDRoHmgRuu743HFiDupvwYUbGWvn4V942g3EtmBOT3hYljQpIyLyS6Z36RJRhVWIJq51lVURYw==","shasum":"dee713172d5ee4d0ea694512147e1a907369c3f9","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0-alpha.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCKJ2oo1USBenGDB+eUXV7+fnbZZPqBtt3BwKQcCMPPogIhAKAv7aBInSp3QDpr2NqphAh5gqW93tdcIHpL74OVDZwS"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0-alpha.2.tgz_1512502844829_0.07060705567710102"},"directories":{}},"0.11.0-alpha.3":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0-alpha.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"^1.8.2","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"5387fdb48963901fe930d9042b0deb24250de696","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0-alpha.3","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-hhbLEaTmH6f3awCjKFD5Aj+4qxlKspIbYxXSFINrQtqDZM6QQjgLO8f76mSQ2lQv60+7AjdG//8Mb5HwZtEynw==","shasum":"7f352bd2443b51282c35ab215596d8868b086d86","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0-alpha.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBuPEKw9q5OuBtWrK1N6NZSA4delq0vKWvZp2L87mNjuAiEAqTkvTfzej7wFHIdoAl0SW7QcTltczAo5B6tKEi8Imww="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0-alpha.3.tgz_1512865488277_0.5760800973512232"},"directories":{}},"0.11.0-alpha.4":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0-alpha.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"2.8.4","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.0","@types/react-dom":"15.5.1","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"2.9.1","husky":"0.14.3","jest":"20.0.4","lint-staged":"4.0.2","prettier":"^1.8.2","react":"15.6.1","react-dom":"15.6.1","react-test-renderer":"15.6.1","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"20.0.9","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.4.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/*.ts?(x)","<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"eaed294ddb734e7d50d43cedd64b3bb8040fe880","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0-alpha.4","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-nXhYQCar5L0X37Deh6vkC1uoIabdxz3nMUQodHLlcksbmYcI3tTsw6Ig7PR/YLXThgQyuugk032tihpVsFHWKQ==","shasum":"f7d95a9890c406044cdd1f151ff6e87544720fec","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0-alpha.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDxlmBm9ias7MQyNwzGIBRwRm1ueT4dLeqiPm+XO4dEVwIhAKRCGwlkoaEnRdn8X3tjw6nM/+Fczqx9B/0Y/xl0H9nA"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0-alpha.4.tgz_1512865817620_0.36625434132292867"},"directories":{}},"0.11.0-beta.1":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0-beta.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.isequal":"4.5.0","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.isequal":"4.5.2","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"37a185fbd233e1101cd70014015934571c37f101","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0-beta.1","_npmVersion":"5.4.2","_nodeVersion":"8.8.1","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-Sr1OpvjerEMDZHtFcRSVMAefYUXXMQppWAj8/M5zeP1rBEVOaN6wisbUsNMLr3pHgooZms9iJzEZK7zXng7F2A==","shasum":"f84010d57abdedefac44a03fb59f5855ffe8da80","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0-beta.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB9VeXzS1d14n27EmOpQqU/e8VQwUAGU2TcCb5SC9UFCAiAUOH6iRiWk+Jcz26zYhlRcBRFLPafigzVStLdBvyEEZg=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0-beta.1.tgz_1513260227727_0.40519111859612167"},"directories":{}},"0.11.0-rc.1":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0-rc.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"f3492a656bd7d4ae0ea36ad24522875014c4a5ea","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0-rc.1","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-M17OyT3ku866cCOsuLrq2lNyRL+qlBPr0yY/nE0isTydmKS5XTXcQHWu5bF24Qg93wq5uQcj4OIzeroTyrU8XA==","shasum":"d207fd7daf7dbc7254c627d54b2e43da4c3bb06c","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0-rc.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQClaKTLZ2ljrIiQQOi7I56zFx0+IG4ssI7s55rI/kEbkQIgDnOWprz15qQdb+AfmWFcFjGNYPyKGw68Fk/8AesdhLk="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0-rc.1.tgz_1517255441566_0.027961947955191135"},"directories":{}},"0.11.0-rc.2":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0-rc.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"66cf22a70ed4d4370fc3bc8a6c8a03461803bd4e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0-rc.2","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-P1+UxI3p0b0RwB8myzEVTs3WuBWy/sQ6al7JTIWfCTWLXME4cEXMIzFOvXl+WtDGIIgV1stOrTT5alzqwc+O8A==","shasum":"313d7800a0b3795eba0dd07450a9f52da3d31e2f","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0-rc.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDtTY3pLjt7XncKPAzcJcbls0qNioDy5OJX5U4t1c0t9gIgVgE35iQuhbsotC8pS8mjmMHv2BUKcTTHwabb5eEHmf4="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0-rc.2.tgz_1517263185173_0.2655236392747611"},"directories":{}},"0.11.0":{"name":"formik","description":"Forms in React, without tears","version":"0.11.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"e69656f10406022beb7856717bbe6d19caf1eceb","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.0","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-PJL1vc2y70pqz8C3bVX9vFz/zQv3cf0VTee7IHzydfqLZTzqikqdckoqQfyF62YggfqCX1yd6Sfsom2+5jy40w==","shasum":"360ed861bda5925fb9eef0597204c62a204d39b7","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.0.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEhS/2lKUPfcgUD37brl+P47r5Id/Uzcs3nmjhHC9wKAAiBzaqtMhQ0VtkbPRZBHjsPUEox6Z0k0Y2C+OTcSCWWvUA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.0.tgz_1517508777180_0.4377667000517249"},"directories":{}},"0.11.1":{"name":"formik","description":"Forms in React, without tears","version":"0.11.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"67894fcd6664d06f7b9c4757290e2c3c1b2431fe","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.1","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-chn9X1Zhc9JkcsUE8qLZgwBERYU0u9L4uVIIDzhT+0eeMTyIGCa0w4PPfWOQAJIRzoMjvnDbLjIHO3LA2lcTBg==","shasum":"7bccd91abe4850b62716b36a84a9cf4b89d50baf","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.1.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICqpXWvjT8SfCyJmKkvoa9wH1VHjrpjVWL8uLGTLdpu0AiBqiRWdJUlE3uNTNUrdFnJVqpkyYZUiyd/hMmgr/giEXw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.1.tgz_1517510137572_0.8179818498902023"},"directories":{}},"0.11.2":{"name":"formik","description":"Forms in React, without tears","version":"0.11.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"8c7f61abbe8bb5a25fd8ef33b5b05097c89394d5","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.2","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-TpezS8z+jmhslQyFIrPGGBOakKk/XbsYzOY9q6echN3ug492jQdwiXu5VLa/3lQALaWcLIab8mDu6e+QkOBGQw==","shasum":"720c6506d41928badf07fe8cccdcbff828d93fdf","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.2.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDL3HBrZY0qiLplSUxwJ+a8hup2eUCTif7C9ZdALZC1WAiB43YwH5LelU6H1qNhBLRoY8HTkwsh1GKUPEqb+zUEK6A=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.2.tgz_1517515566893_0.9631185848265886"},"directories":{}},"0.11.3":{"name":"formik","description":"Forms in React, without tears","version":"0.11.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"36b4d3073cbea628ff08da6851c7e723eb74c1f8","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.3","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-bP/LtB9VeVnl37QOoe9L5ogH++NuRRv5cBbXLei1H28gdMkzcYrbHeXd2QaanbUE7IHT8/T0keHoS93OoVZoFg==","shasum":"f30855af93d1267e9e02702cb361436c68df358f","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.3.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFqjrL6Az8sl8RRRFDg44hxDBq36lA6OuajodMQaWDE6AiBqKtqHMOMN4Fiui8zdujArhTrRbPDJ2mLHSN3/OfRd0A=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.3.tgz_1517524385901_0.18981187674216926"},"directories":{}},"0.11.4":{"name":"formik","description":"Forms in React, without tears","version":"0.11.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"4c781e3a67b95a5a9d7f027ccf45053ea836d522","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.4","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-VnMAScFaw7j3QmixP9kgNfGoblcUyUUC61a5NrAs6d99ivGZFjGZpQ1GbJgBs2gpc6dQ+dlkwrZlfCCQlyY9ig==","shasum":"76b3d80a8e578ecab2849ae76299067aa4a5124e","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.4.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDW8LU5SvYBzAzHDHzkghymxOLs6V81QI29ffHsQSEudQIgAuGeDRRiC6O21/GMkwTSQ4xC9HGzEpARX5M+h1cH6ig="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.4.tgz_1517605615420_0.7574900651816279"},"directories":{}},"0.11.5":{"name":"formik","description":"Forms in React, without tears","version":"0.11.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"8.0.19","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"2.6.1","rollup":"0.45.2","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"2.0.1","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"7a98030bab19d60e627f6e8e5311e1004febe5e7","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.5","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-3hJtWBMvkcbv6HTBFhi/dD5k9y/j6KkoQiHpdm5uL4Es0RE6sIBDCxp9jP0JuMfQica6xvnnV9nXnFMEtPUt+A==","shasum":"6b555f659b92f94a15d8ae6f4dde75c34c201e98","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.5.tgz","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBUyd9kc4X2jy/WPTOJPJt3YDwpk/o/3TPJ6auYbsJTVAiEA68zPdnGuFsjm13Rj/1jRePYEvBL9WPNxtlhmTCK/0f0="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik-0.11.5.tgz_1517866821439_0.44497763528488576"},"directories":{}},"0.11.6":{"name":"formik","description":"Forms in React, without tears","version":"0.11.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"postinstall":"rimraf ./node_modules/@types/node","test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"16.0.3","@types/react-native":"^0.52.8","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"b7ba4dbf4bc53997b7d732d9d4780b619feaf3d4","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.6","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-pvUk+0LN47ROpNlVSagdyFF6rfPozaRazZBOzh+4d5Mo0chbb6+yGc7UEaEAyNuEhjVGBlIHR1N2YkgyzM3Cmw==","shasum":"64024c82835daffc082858da6072f1265d57ac96","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.6.tgz","fileCount":19,"unpackedSize":1900702,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFfZssnKkPHuay5tkbym/Tjl7hEe0mhPMamK6NLwC/dSAiBrMRXBwWMETN5/EIg1Lk8Qm/F/OLeore2HlglwF5A6oA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.6_1518037790850_0.6386171573438175"},"_hasShrinkwrap":false},"0.11.7":{"name":"formik","description":"Forms in React, without tears","version":"0.11.7","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/node":"^9.4.1","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.6.2","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"affaf2ee4f2c13bc37322446fad863f9c29ecad0","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.7","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-VCNH7SC0UAFIspCkgARyNmoQbJnbnQA9zfmE0u8uzTnhaZFC2RY2UK71+wUkaT4/FncWs50VTjnf3w5NP3IQ2Q==","shasum":"7b2c66a5546c793dfb07b39b965aef69dcd39326","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.7.tgz","fileCount":19,"unpackedSize":1897841,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDZ1i/SsFJ2lQOxRDhd3Wt8yBTrId7j9rlHhcRWJcShOAIgDIKpatGYWOwaoOSXqNFFmdg1ujcRrzOu+WFgG5h21Ko="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.7_1518039686244_0.9746733185922505"},"_hasShrinkwrap":false},"0.11.8-0":{"name":"formik","description":"Forms in React, without tears","version":"0.11.8-0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-native":"^0.52.8","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n** Table of Contents **\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n* [Guides](#guides)\n  * [Basics](#basics)\n  * [React Native](#react-native)\n    * [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    * [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  * [Using Formik with TypeScript](#using-formik-with-typescript)\n    * [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    * [`withFormik()`](#withformik)\n* [API](#api)\n  * [`<Formik />`](#formik-)\n    * [Formik render methods](#formik-render-methods)\n    * [Formik props](#formik-props)\n      * [`dirty: boolean`](#dirty-boolean)\n      * [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      * [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      * [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      * [`handleReset: () => void`](#handlereset---void)\n      * [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      * [`isSubmitting: boolean`](#issubmitting-boolean)\n      * [`isValid: boolean`](#isvalid-boolean)\n      * [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      * [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      * [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      * [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      * [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      * [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      * [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      * [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      * [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      * [`status?: any`](#status-any)\n      * [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      * [`values: { [field: string]: any }`](#values--field-string-any-)\n      * [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    * [`component`](#component)\n    * [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    * [`children: func`](#children-func)\n    * [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    * [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    * [`initialValues?: Values`](#initialvalues-values)\n    * [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    * [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    * [`validate?: (values: Values) => FormikError<Values> | Promise<any>`](#validate-values-values--formikerrorvalues--promiseany)\n    * [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    * [`validateOnChange?: boolean`](#validateonchange-boolean)\n    * [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  * [`<Field />`](#field-)\n    * [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n  * [`<FieldArray/>`](#fieldarray)\n    * [`name: string`](#name-string)\n    * [FieldArray Helpers](#fieldarray-helpers)\n    * [FieldArray render methods](#fieldarray-render-methods)\n      * [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      * [`component: React.ReactNode`](#component-reactreactnode)\n  * [`<Form />`](#form-)\n  * [`withFormik(options)`](#withformikoptions)\n    * [`options`](#options)\n      * [`displayName?: string`](#displayname-string)\n      * [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      * [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        * [The \"FormikBag\":](#the-formikbag)\n      * [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      * [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      * [`validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorvalues--promiseany)\n      * [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      * [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n      * [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    * [Injected props and methods](#injected-props-and-methods)\n* [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n* [Authors](#authors)\n* [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.handleChange} // this WILL NOT WORK IN RN\n            value={props.values.email}\n          />\n          <Button onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = values => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n          <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index) // remove a friend from the list}\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '') // insert an empty string at a position}\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button\n                  type=\"button\"\n                  onClick={() => arrayHelpers.push('')}\n                >\n                  {/** show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","readmeFilename":"README.md","gitHead":"1ca36e2d95e5fb8cc4bc36e768edd77d825197a4","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.8-0","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-EgYDMrZBJG3FvMkXzwmhjXtYgMGHUO5mtD4UfRnik2n6uzS/AGfxfGOuEsTgDzS9V1uW4WYwb5p7iaoOyQXeKA==","shasum":"68b291db14d4a0839f4a4da3a916d03601a9b422","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.8-0.tgz","fileCount":19,"unpackedSize":1901899,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGVKzTBK66APrKZCLegdd+PanfccX2f5o05fWBh840y4AiEAkAPX1suOFQ2PdcMZtTzR571to9AHOmmuL4tFjje9lFI="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.8-0_1518114251405_0.26899028275329084"},"_hasShrinkwrap":false},"0.11.8":{"name":"formik","description":"Forms in React, without tears","version":"0.11.8","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-native":"^0.52.8","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"f0c9b4a3bd8a518873deded579d8d39c1f13b631","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.8","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-OGlb8hP/bueTyJ4KioylGrL2lSnJHIoj+Vlo9brwlXu66d11owwTOfB0PnkhXpxtPNzFW2nSCqimbbKAstCm9A==","shasum":"123e407bd2cd1613c6d68741ec65ce041354a92f","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.8.tgz","fileCount":19,"unpackedSize":1901897,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIB9PhnernAB5NEnKgsK5Iq7CF9FUVJIAaSUa8Q6W0KZwAiEAznQv0TGjEqdvqC1+pgWF/xRj01b2+Y34HV/S5qywftY="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.8_1518114604635_0.041747572725706394"},"_hasShrinkwrap":false},"0.11.9":{"name":"formik","description":"Forms in React, without tears","version":"0.11.9","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-native":"^0.52.8","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"gitHead":"82cd01363e80d39f2a318a8846ba27f9e5272ef1","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@0.11.9","_npmVersion":"5.5.1","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-GU8IFU5q+VMcdob304PDUzKIPgwOSx5d/0q3+gWpG1/CqC6ejuJILvXK78EHE/QU1hsp/MVV7tAaU9z6ubWB2A==","shasum":"41da6e5b5ddaf1474eab29a992c9ef8623d40d00","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.9.tgz","fileCount":19,"unpackedSize":1909469,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFzwprpug/EOSzZfxAGVQkHRyIaA5OwWuGWr2m+zJKSoAiBuJ00fGVq1YWqSAw+eTUV+VkUX8MMoPY6McK9CTEGoDA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.9_1518137024516_0.9877678484615968"},"_hasShrinkwrap":false},"0.11.10":{"name":"formik","description":"Forms in React, without tears","version":"0.11.10","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@0.11.10","dist":{"shasum":"0165ba285f96a5c0400c1cc5e57233b1f8e307ae","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.10.tgz","fileCount":21,"unpackedSize":1908798,"integrity":"sha512-bNOgfK2mMrArPhaLbPNj2+8m5SiO7antGv9qATRII6d6y2Y3ffkxcBSpiv3y/Jz8fNGM185762AO4GBsd6isAg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEMQMF3T1pSnwQEY2FH3J4wwhpt1J+0IwCdOBEM+sZYPAiAfOCdJO5fRmDsmYG84utyQLxmny6yaUl3RfgU5vIoWdg=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.10_1518224373194_0.22727674893849792"},"_hasShrinkwrap":false},"0.11.11-0":{"name":"formik","description":"Forms in React, without tears","version":"0.11.11-0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n** Table of Contents **\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikError<Values> | Promise<any>`](#validate-values-values--formikerrorvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.handleChange} // this WILL NOT WORK IN RN\n            value={props.values.email}\n          />\n          <Button onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = values => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n          <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index) // remove a friend from the list}\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '') // insert an empty string at a position}\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button\n                  type=\"button\"\n                  onClick={() => arrayHelpers.push('')}\n                >\n                  {/** show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@0.11.11-0","dist":{"shasum":"e69463be2d5b1aefa7100ccdffcc96b4ba0ed770","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.11-0.tgz","fileCount":21,"unpackedSize":1909729,"integrity":"sha512-+yv2ytKbLar1d6k6+BMJtGTak9sXsj7OhXRiyiRMwKEDRMcjPbhFxsDZJgX3sbh92F27tsJThQsMdADlilpAhw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDaiiRSWl/A78S/8yNQdq+bjPZfL3mEFRbR2gSOlSd9uAIgR8f3qpEsVMbAZTjOVVu/y1TX26wXI2+YDsu57DNPEtc="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.11-0_1518729914516_0.7052620522725468"},"_hasShrinkwrap":false},"0.11.11":{"name":"formik","description":"Forms in React, without tears","version":"0.11.11","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"15.5.1","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@0.11.11","dist":{"shasum":"4b02838133c0196b1ef443aa973766cd097ec4a5","tarball":"https://registry.npmjs.org/formik/-/formik-0.11.11.tgz","fileCount":21,"unpackedSize":1909620,"integrity":"sha512-RZm1k/HCXyA0caTvWqcGizdV2kI1g3qT1009du62GP50Helcwe9eZTd+MOiyln6UGUqgTRNo0C7NUpzF5JjUCA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIClJfhFRy2U0fPsPSM6Uwwrpsrem06dnAVMllyIs5aMjAiEAw7tloLHOIBqPvoPhsxKDGlnqcIVCBZl1M+F2vJ/LL7o="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_0.11.11_1519229892810_0.17918240285049625"},"_hasShrinkwrap":false},"1.0.0-alpha.1":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/formik.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"^15.5.2","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n** Table of Contents **\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikError<Values> | Promise<any>`](#validate-values-values--formikerrorvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = values => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n          <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index) // remove a friend from the list}\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '') // insert an empty string at a position}\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button\n                  type=\"button\"\n                  onClick={() => arrayHelpers.push('')}\n                >\n                  {/** show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.1","dist":{"shasum":"2ed82e31c704ce51c1ff8bb9cbf144299ab1004b","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.1.tgz","fileCount":22,"unpackedSize":2038059,"integrity":"sha512-OveuMJxwsqteTJLu3d+QNm3FoUeeqPmfSwLj89McDUKAzCg5nhEK9O5ypDs76L12l/RaJv3hn26VoZ+LBzONBg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC0F3gb8ez7F1tAdvxJpq+LkfXOmgkb9x692fyPX4DsfAIhAOGF1pgKdnLxi0AT6BPgtRdkZo2RZTebw5iq8U0qe1Mw"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.1_1519252766439_0.5833587950857599"},"_hasShrinkwrap":false},"1.0.0-alpha.2":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"^15.5.2","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n** Table of Contents **\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent> | undefined) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikError<Values> | Promise<any>`](#validate-values-values--formikerrorvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = values => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n          <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button\n                  type=\"button\"\n                  onClick={() => arrayHelpers.push('')}\n                >\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.2","dist":{"shasum":"81ba9e9ea400663b23e21dfcf76b7b84e923fd07","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.2.tgz","fileCount":23,"unpackedSize":2040512,"integrity":"sha512-5rEDzAnnq/M7+ZMEcG7psiuk2gRvQk28LRGrIXdV7iv12LPxgWG/9VGTl5ncFlOKPJxEURdZgdcvS/qIUSqx7w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDZeJKjfHeSwNzvcWZ//3hZFkuPS9CkNAJuJG3JB0Ly1QIhAKeFrhHOWO22/jU5B5/uilIXHphCMyyUU8gwwBUqgXgg"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.2_1519772327551_0.2991456081543242"},"_hasShrinkwrap":false},"1.0.0-alpha.3":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"^15.5.2","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"^1.8.2","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.7","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.7.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikError<Values> | Promise<any>`](#validate-values-values--formikerrorvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.3","dist":{"shasum":"1de0821a8309d48132efe8906cb1cdae7789a3d0","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.3.tgz","fileCount":22,"unpackedSize":1246206,"integrity":"sha512-MWN0Et3CrqSiUERiMo91k9kchVq2BWlWHo1BSBuh+L59oHJgi54iFsrZnFLD5Z1ERSBfn8LKuHCNOkUC0ksadQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIE2jSrfZiRYkW72YkfPXcjBPmV1K55vShWL5XR89Mpj3AiEA2nTZGreg0pP/+v0hrfNo2Q2qmUbccm25cwSZx3StdBQ="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.3_1521058312185_0.23301581818022954"},"_hasShrinkwrap":false},"1.0.0-alpha.4":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md"},"dependencies":{"hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"^15.5.2","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"1.11.1","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","ts-jest":"^21.2.4","tsc-watch":"1.0.17","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.8.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikError<Values> | Promise<any>`](#validate-values-values--formikerrorvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikError<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.4","dist":{"shasum":"99696c0ba26ac132482976071843f210ad020997","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.4.tgz","fileCount":22,"unpackedSize":1261943,"integrity":"sha512-8McPwBB3BQeMozKvojXB06mbNTD8FTtQT13ql77gJWrQT6tZadbkfZhMuecaYGFCZudr4Wl91TKpa3EEQvaw7w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHPoNBVkUPXW5I+npe5qFpHWyEE0fOcUT6P4gU4iOc01AiEAtDmzgcyT5p21cQMzZ+libDRvRgw9DAAmtiTZSQrLgYQ="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.4_1522431796090_0.7517123947678503"},"_hasShrinkwrap":false},"1.0.0-alpha.5":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom && npm run size","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.isequal":"4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.isequal":"4.5.2","@types/lodash.topath":"4.5.3","@types/prop-types":"^15.5.2","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"1.11.1","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.16.2","ts-jest":"^21.2.4","tsc-watch":"1.0.17","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.8.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/formik.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n|| :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.5","dist":{"shasum":"06b07a8e0895b2a21a26d3a747462e539400ef71","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.5.tgz","fileCount":22,"unpackedSize":1264480,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa167SCRA9TVsSAnZWagAAr1AP/2Vc4egGLhB05jZEDAB0\nsbOlGd9QexFuolKNULyYsdGEeHuFPMAvQyEJvH2mC/1VIlfTs8XgOlygfZvZ\n/PpVhEvhKFoaduc51K89zJdib6KX5FVnRsTG1dOppw+XNstWosqUQh4/RKgA\nDnjjQSnWmzvcRSIKfKKEKIEHACcSfyrrwTEvTsJIFVxFySfUMFXIC82v208C\nRQDJD8XHFDFayyqnH/wjQt6vI4PXWWnpz7ccF8bQct3Vt1XRYDhviuxu0bhl\nYZQLrchhKr1ZeLi+WXu04uU3OWJhsMPCXj3bgiqbK1jcPCqB79o8EGJgA5sB\nEjpRQs+gkOIeEF3ZO9FN0pka35bswOGeAZqOt2LUw82vzHNhVNQEFF0ldglQ\nnkxxYvO/6UxpznRgNMn0a67gQiao3zNSBv4Y2Ah6p1f6f/DD5/9uYr99431r\nD6gbEvffct1gCFukcQcVHmOl2+jPSW/9iuaC5OZ7WvY7WnvlaH+/81gS3SdA\nHL+aYgfgRuEFMwzmAyACNmJI378bNgnmcbHOVFpES83rjSyJYh/0AQS67Sda\nJs3mR2PVzmO5UsyLxC9deGy1GNfBN1upM5hc2WDNIyMI8MpDzGPkIqu0Pe8H\nY087ia3yYnvIakp6innYcUsbIBAZMXyG0s2lW0plQID6n/oZwvyH8nQy6mNf\nuq2N\r\n=APN0\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-ONVormFl4EjUL/LJqnuqAsjl0dzoJ9xLMNWdhB5TKz1f7DEW+XfeRKMkASC8R06m6ISS6/wEo5ex8JIX76eKMA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEgqYYliZYjxDSA6qOs4GmCLstQec6lUeEowDS5tjhJyAiEA1YRaBsRvTpAOA2oBRKPHvTvW5Qw8IZEiKrNgieSjWYs="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.5_1524084433699_0.1506867561360734"},"_hasShrinkwrap":false},"1.0.0-alpha.6":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"scripts":{"test":"jest --env=jsdom && npm run size","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json  && cross-env NODE_ENV=production rollup -c && cross-env NODE_ENV=development rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.5.10","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"peerDependencies":{"react":">=15"},"optionalDependencies":{},"devDependencies":{"@types/enzyme":"3.1.5","@types/enzyme-adapter-react-16":"1.0.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/prop-types":"^15.5.2","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"3.2.0","enzyme-adapter-react-16":"^1.1.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"1.11.1","react":"16.2.0","react-dom":"16.2.0","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^21.2.4","tsc-watch":"1.0.17","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.8.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/formik.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" /> //\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.6","dist":{"shasum":"22e1a42a92919ed8eaf4e3e1f5ee791b672bf353","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.6.tgz","fileCount":22,"unpackedSize":1069867,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa17lMCRA9TVsSAnZWagAAUm4P/1SCT7bjZUnz4Ttue90k\nbNtMsj6ZsVM5cCLz/IW1XFHfGNuGCR0Daz5ZoeRUzM0F/TkLWOCxeZeZi2OA\nCdArwGhYaH9NGXAlGInLa0F8Jqw/vgqi7ZOVBcafzVnhtWjN4ENWOOM05tJY\nsvIobjUa0ZquNxtKKQyC3rbW1l/GzpqJNGuXPPBY7I+cbXr/J/liMWkaqKYh\nwsVDrOGvX5YvtaXRKmeuylQ2N4m0TkB6p9WwQmM/C/4Oi1R3AnWSH/2a7OqG\nQPoPAmR1u3u6l445C4VMmeNEu6LD208if12d+D1rKz0ZROpryh4dSbnIzKyx\nlHn/yCVqyU0xCuJwSHglOI/rkkrEU5zcaxhVrmBs3FpQZ5hS3Lvf9XpTsU1I\ncwRMTGfxzO6+haLtdmRV9MhOr2VJz/PLcyHKKZFF5YhY3kwLPWXxTKk6czwL\nOqE3QbAHMZUSSybiuBmeSa25PtGhI6JVn4tQCrP5acZoaoU78w+043dsUvTk\nWyJZGD1L92BdcnzbLTgVbGkLtX4pCXixFOqd+tLKDBto6Mops3xz3YFcjU2o\ntAjIJTpKFWj2hm+g3fYXGLMo1L0KMi3+qu1JfpzLYAQTt3nPvZqy18bVxVaw\nwFzHfdiUwqttpcDFzTsAKOSDTeWTrqNssM0dLWd2DGcYD6NI+NAOicTZ85xV\nMiP2\r\n=5d0l\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-WXIh8tq2G1AWscMD5hS3y2xQOUPl840EjkQcjX2SYKuOE796nwao4KpAQCxjGWe0XJMtOBjaaLWDnF2rGNhGLg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCu4ImlHkTTOQmg4+1GexHm+AQwt+4KvMiYrMhACYhKKQIgBGEMky6fMNByPww0VyX+0P8em2c7PC2omYd7qkRn1Fo="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.6_1524087114981_0.8565300567927119"},"_hasShrinkwrap":false},"1.0.0-alpha.r16.3.1":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.r16.3.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json && rollup -c && rimraf compiled","prepare":"rimraf dist && npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","react-fast-compare":"^1.0.0","react-lifecycles-compat":"^3.0.2","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"1.11.1","prop-types":"^15.6.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^21.2.4","tsc-watch":"1.0.17","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.8.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/formik.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.r16.3.1","dist":{"shasum":"24371b8e401c740208ace4f17b506ed74d96a8e2","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.r16.3.1.tgz","fileCount":23,"unpackedSize":1079459,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa9eZcCRA9TVsSAnZWagAAAJEP/jMTZ7fQtKqCeeL60CLU\nsbSLysL+z8mYLTGkl1thwWvzrjJv0a/rS5NbNCjDXSfWElhQYkAaXiraPmAI\n0vxOlhLDOWMSiY9dgwqmzx6ixEGZaGvUeYG3krUglgNCWYiXnvGlxz4h7MOl\n9G0dYd81yASaeF68g+HblCUA+OA6wYAVNvFdU1eIIeE1o37y2vHHPcXYjYFG\nMhLmXC5pwwBX8xdTmbLBqrHyDeghYCTSdGASBgDOrB/QNLdS8iWxJK5htgN5\np1QNtHSMfTfK+C/cDkWqspTyxXEIMki5dvgAtfmX8bdPE6A6cdFIiZap9H4/\ntj6hvSCMlMEbwrqVXyM+238IrHNjMPJDFPIzrUZt89xqJyGaBhqsLCeOfC6K\nx1KftAOMmNt5S/OXPgMKZfOu3NzbwjGqqAEYiOtfFRRXr8gV0+pFQtW3+wzF\nB6a8oKRZIC6AWIaGGfmkJWP2FkGT2AIHSp8ihDbTueHa4BXQfbyqBubzYnjk\nlWXIg19eAeGoUSXFNFiBDN6hB6STV0lEedOzjrwMcF/pQgApadVrSv+tPfyB\ntGjb0KqIegUkiOjRCGyjju6vnUMB1oAWvOzLeK86k/DbCvR8X5Z+4CEjvwzH\nkXjtKqp/z3AtSq+3Ain+DO3yT/F0dbYayrBPQ4yQabJoqSZReAnIs5tVgeyy\nUT1e\r\n=ciLV\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-k8gPoF99g0fiu2Ji3R3UFrW9e9vxmtu3zy0pccJNc/l1fZyD9XwaObDp50cU9AThxmAwDtBBR35bc3KOiPtmrQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCXdQRXVhQ+dmWdNsDmOk8QobG1+slBt2E5ixpz2ojargIhALd4W0frkqSfnz3ZMHtX0V8D9eLDcCMGBkWc/vbPTcXK"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.r16.3.1_1526064731633_0.3526798610077755"},"_hasShrinkwrap":false},"1.0.0-alpha.r16.3.2":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-alpha.r16.3.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/formik.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cross-env NODE_ENV=development tsc-watch --project tsconfig.base.json  --onSuccess \"rollup -c\"","prebuild":"rimraf dist","build":"tsc -p tsconfig.base.json && rollup -c && rimraf compiled","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","react-fast-compare":"^1.0.0","react-lifecycles-compat":"^3.0.2","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^21.2.1","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"1.11.1","prop-types":"^15.6.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^21.2.4","tsc-watch":"1.0.17","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^2.8.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/formik.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-alpha.r16.3.2","dist":{"shasum":"4d6f74e6ed9142943fe60332d0b0fee25c27b359","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-alpha.r16.3.2.tgz","fileCount":23,"unpackedSize":1079448,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa9esNCRA9TVsSAnZWagAASTQP/ir7i/ccQPcHfzniSFZY\nmM+7QnEL/6XqFtQp1DaucLsXV6K7rn+ni4bZyP8ECLdQi2NA5T7aQPysWNoB\nrV9qimRO0TkCjf14b7jy8PwhcfldSW+pJhE8wCGl8pOEMqx95OqN/Ryc81W1\nqkdoLZNgVyuyf+/TFdsmEjH9WuiBP94m2rnQxekGtwV10z6ncl9ieD0AC/l6\nTmtcmF1JUkiCAFKmmYhvhheIJBS/0soc3wJKvvoPyEV5ci9Plx0YTqkvB77x\n8g6WZrwGa3DCFmHHguqMbiLTEIak/bLZFMISOJ4xj25YPptBlYgyPXfTN7Yd\ncTRxydouhMZIudZUmqaoafTliN8ES5u4YLbDBo59Ni+azR1xAXqSzWd+GZV6\nwPkaDL/CQMjlw3ulFGtZ6NxLAocRtfRwJ0KZTpTWDOs1nNoiAMEREGqV3mTG\nK964pV9iKOuzYlUHiLoqSN2i86ch88uBJg79tWY/mFYQyNHK8K2QE8XHFnO/\n1BKfZybNOI/jHKhZSkguv7GIoxGf2Q7o2nEo8DOmCFz0SV5bVZQYL4H7koi5\nMU0umVNQ0i5vTFqQklNFMkcgo/goJXwnO5I5TnbnRJ1+C9uCHufaLeKsf3Mc\n2wiboerLNMUL3LLiX/J60WjwI4C0M4xH8DAuvPrnyun4dzyJBcL0cE9NxddB\nSfN6\r\n=/J20\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-QNEXiD6dX5J39udLx+aSlB4jSY9ofdXjskX/BSvwnkrFoERXgt9/qTQdtLj6hSNf/FgvxGhlrlikNluGnw0wrw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCsAUWVcXG3Y8M8ywTK5joqcSsI7tcnAyoGEJ09m/jjXQIhAMyYNf2RuA+rN/1h/UUhNR/BxUbbqglSz7VzvQX2/d5P"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-alpha.r16.3.2_1526065932403_0.8905850024348858"},"_hasShrinkwrap":false},"1.0.0-beta.0":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","react-lifecycles-compat":"^3.0.2","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^22.4.3","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"1.11.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.8.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate>` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: || :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.0","dist":{"shasum":"bdc9afcb648f9071d856a828f7cca7a554d4acb4","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.0.tgz","fileCount":27,"unpackedSize":1329780,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa9hVnCRA9TVsSAnZWagAA04sP/2WBfP2jt9HUBN6Tdryc\nVzrzBjQUjr3uEJ38UIArHn3vwQlsQI81K29dAU5lZvZw1nDAflQJTecs/fRg\niS1Y3o8udzMlEcBxfNmQUyHPVioHr1+9b2qcsGylPDpMZ8rdLcxaeDpG/g3B\nTKjJiFZbQz4fswghJ9SfNvr12xai+UPm5vkfUTShXO++xInaUinX2fx/Pg3/\nOfbV91Xg+eUSJSdHRLnmaQHkMytnnSYidJvbWw+l5ntXSMxWNOqU7cpsadp8\nJkIUpHrRjZlvpV3tw6xXqW0q08rLfego+tpWk6DwPHukhYh43hgILkWYtp2t\nD2AhcePNnOeWDWDcrlVZ/szw24IvyVCujnyqmsWlxipqDaGYuHHkO1+nKG59\nCXLyZkR63b3izoPzx3+vUu1O8g1Is+ffVIBb5X35L7D8+aX3kapmIw7sWprh\n+2K3mMLB6O8+1+VrpsRbu2Sj2K1oO1qPpokquVNyy4+AjiK72MInlvPpnR3a\nY16ThZAAWtsaU8PxRRC8E3004YrZHAHsi7FcSONmMJDnBODPkG7HT833VKJO\nMpw6RjxFJsT1yEDpTp0NqR+Xf9Km3GasZqyaxtYL+T0n4GD8w81gTnJ0t8X7\npShCsYVuTLrN9oeQ3b+zS+Q3P/hzUArNWjWlK6W5IQja1JtyIWS28RYK073C\n5zDE\r\n=QAGi\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-yliD7kzoyJNrgSZ3S9vUXMWKKM3bA6ZF9w6fZwAZbosO5MdMZX1hTabqyqYYobParcOPWDKmVxZXqgku9v1Ljg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCvO1zt5Pov1X3lcRFD9PDZYV5ID9aD/4r+1QgkygekOAIhAJd9StiaNO1W29fHhEi88wV1cLRBITmw3ypX6jz41RCu"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.0_1526076774917_0.535405300110209"},"_hasShrinkwrap":false},"1.0.0-beta.1":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","react-lifecycles-compat":"^3.0.2","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@types/jest":"20.0.6","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^22.4.3","jest-cli":"^21.2.1","lint-staged":"4.0.2","prettier":"1.11.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.55.3","rollup-plugin-commonjs":"8.1.0","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"3.0.0","rollup-plugin-replace":"1.1.1","rollup-plugin-sourcemaps":"0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.8.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field/>`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray/>`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form/>`\n\nThis is the **exact** same form as before, but written with `<Form/>` and\n`<Field/>`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...}/>`\n   instead of HTML `<form onSubmit={...}/>` component (since there is no\n   `<form/>` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilisophically, just treat React Native's `<TextInput/>` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput/>` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field/>`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik/>`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />}/>\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />}/>\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field/>` will default to an\n`<input/>` element. To change the underlying element of `<Field/>`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field/>` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray/>`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray/>`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field/>`, `<Form/>` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit}/>` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.1","dist":{"shasum":"884b4128760ecc262407cdffb483a0c6f456157e","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.1.tgz","fileCount":27,"unpackedSize":1336649,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa9t5kCRA9TVsSAnZWagAAVY4P/0SCMW8bajZYArJ5ANa8\n86mSpA0pAzuq4YTZwmJ9m8UPiTXCcQKDk0AqeLUyKPK9NHAGfYDM6ayJJssD\n9NRpGw9ine/5iw44LwdnlYLpDud5KPdxLgb8gQnr+B6jRudw59OGwgK4FZaH\n1ECRgbgylpGsCVFFSzWwi/XbgT6Rm3lp/lEwpVk1vmQ1g/uzEgMgY7UinLWw\nxenbAbo6UbH3wubvRhJTlzJOzQMxshHVN2AwPgx/Tt8JKtHFa6LW9RFCDXhh\nczDv7cpnKMkXgNozP3SyHJZd6dLdf4ReBU+FhtwpEmlK5LSgAx229I3VUG3k\noGq8WbdIfrFLs3RwejBCvlul9f8PzI+PFGfKT7Fp0ciedlxB/NP5aKE1b1RN\nrU+IVXFDmwP2VuNtGKHGeCKumuTl0YMxViy7/EHw1eA6M8lCmd2lG+u2oOc8\nv2fvmpA35i7gGZC+Su1gmw2TugDAK/jYVEmQU4HahoHykHn2iCSDN0w8XAF3\n6CLTCPKD6JmmcqZ38FqwlGucJ7lu8IYtc+psvpqF0DxwDClqTY6041FJlxM/\nKkFhLlQFqC053V/DtCqBuXhKQo6GimnxGDkh3ZGPiZcy+v0v9Mz/+VUfdsup\nSddoPUD3mYZ0exwLPRAyp/pCHT/xDB34IcxJofX6HuaqPG82lrodqvmdDyf/\nsUGE\r\n=4Md5\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-NVLcdcVpwGfU8PJgr51F+VuzQiqlDsrWBmm9hNQ+RTMYLpaq6IpAEYkA8wSEIcBSSo864Nw6IrBg85jiPa04pA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIE+UiskrVzoO722Z9RJ+jGl8/IEpL4qDqtKcw3ftzwj1AiBaH0RpfjGqqf2dT+kM4CTZSSvBtgsUeYObOB0xvvy2TA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.1_1526128227973_0.2905456279874019"},"_hasShrinkwrap":false},"1.0.0-beta.2":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","react-lifecycles-compat":"^3.0.4","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^22.4.3","jest-cli":"^22.4.3","lint-staged":"4.0.2","prettier":"1.11.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.8.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 12.7 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport EditUserForm from './EditUserForm';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n   instead of HTML `<form onSubmit={...} />` component (since there is no\n   `<form />` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god']).includes(values.username) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.2","dist":{"shasum":"2afcc19f02a64461a957b8a923b3da4d4eec1aa2","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.2.tgz","fileCount":27,"unpackedSize":1359025,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa+0yTCRA9TVsSAnZWagAAIfwP/iY8AbQC4St6HkUBlmpv\nLQm5gUiY2xJ5Q8OqZ2MZfuQwA7gfjgFVIGLRTqc4gs6QocT1qN3eCk72VTdv\no6vaafZKfll+oZp+ZppCOdC854CWp1SCEI1y1CuxCQWY1ZCRxPlAjKriSYaU\neZfxdZJIg/bxk2JMGxutQF1DHd4Q/KcLWGqyLvQvLGkx0o/LRUNKGsiYFaYm\ncy6uwbL1gALvk78F5afXZewNwhszFIFy8q/uY4emcvEQYfCdekJc9boPTwmw\nlUIjV9fUhKmZHAdP2VLe5Z/BYAVvxR6xcT9Vh7EkKmZ33P6FYFe7ll8MAmuL\nbh3x7jG3d1v9z0NGKWEw/NjMIH9Vl8whP79cdpEMfuZbyqllwONmrpf/nvsx\nIOL65MSU9rIQV/2/bQcGUFfVqNPwiniHG9TZ+J+VHnHa+cwaj9An2AZ/Q3PS\niIxS5GdZrmWENGBZEvpxrKdpLpLpyOyWIdRrMfBgF3rFpezw0JYeibwwMafQ\niaUsYBapVBD5tMTHK5LUEz+v7SY4tjF+aCANSNwjXm9j0chq699z/7HMVkqG\nulS6RYoddl9OVuHZ4lsUEN8fZEe8McZmnKSryTsN7zGpKZ082jErdc4vw054\nAc+Q87nWbF/9WxoN7VXxn+L0ly0uJY0HRRYBNQeOyXSia0WeWH+x2BY1szEO\ngltz\r\n=iAif\r\n-----END PGP SIGNATURE-----\r\n","integrity":"sha512-Qw6m2wN5EuJR6csuOna4a8UU9vNZmxwQ5I/FlV5LxGSHU317xG3QTN7IBYHPJBHqUvkG10tirE7ktFHdMv1sKg==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD0DFlQziG49XN3814juq0jYK3TREmEdW+h1g/5KLHOvAIgMBjS75+9zrIDRd+7LcnGjbREX9wXpJUHDQd+gQAejpQ="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.2_1526418578860_0.3410569229885285"},"_hasShrinkwrap":false},"1.0.0-beta.3":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.9.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray-)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n   instead of HTML `<form onSubmit={...} />` component (since there is no\n   `<form />` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <FieldArray\n          name=\"friends\"\n          render={arrayHelpers => (\n            <Form>\n              {values.friends && values.friends.length > 0 ? (\n                values.friends.map((friend, index) => (\n                  <div key={index}>\n                    <Field name={`friends.${index}`} />\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                    >\n                      -\n                    </button>\n                    <button\n                      type=\"button\"\n                      onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                    >\n                      +\n                    </button>\n                  </div>\n                ))\n              ) : (\n                <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                  {/* show this when user has removed all friends from the list */}\n                  Add a friend\n                </button>\n              )}\n              <div>\n                <button type=\"submit\">Submit</button>\n              </div>\n            </Form>\n          )}\n        />\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do the same\n            <button\n              type=\"button\"\n              onClick={() => arrayHelpers.remove(index)}\n            >\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.3","dist":{"shasum":"1b55c8eda00f90694dcdf46f97e52e5d53a4dc15","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.3.tgz","fileCount":27,"unpackedSize":1413023,"integrity":"sha512-ifLdtO4DCjCR5YD1iaO62S6GlFE2O7KTg0/jJVkTORgU6jYSdKvvxSfFi1ovjY39rBmKWz5kgZBX9s6G5ZAToQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICm4xFtoA9F8iMNoE2UpUqwxyN2aheEfZJpHFuadPiaIAiEAi07zsvv5T9+m9l3xD+k1aWANulRn4XuxHMjUmlUaabI="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.3_1530210600539_0.9762126396800617"},"_hasShrinkwrap":false},"1.0.0-beta.4":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.es6.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.9.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray-)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n   instead of HTML `<form onSubmit={...} />` component (since there is no\n   `<form />` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling  \n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n              )}\n          />\n        </Form>\n        )}\n        />\n      </div>\n    );\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do the same\n            <button\n              type=\"button\"\n              onClick={() => arrayHelpers.remove(index)}\n            >\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n|| :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.4","dist":{"shasum":"db398c7a094327add8d2c4ce28c57842baf37880","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.4.tgz","fileCount":27,"unpackedSize":1413268,"integrity":"sha512-IEvSFMi/6I/30EstqaAh32QCEmg2uIP6/GhQ06746f8EAW0YqjlkwqaTR6yivcg9NYGSBVV4COh0K08TMCAF/w==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDKwQ4c2oIQ3BLDeAoyDmNmKO/kSxNyA5XZMesvfhL6zgIgMEeuPnJ4N1p6eGjlkRrOCg2xV3jT8DZJ8suxEqUlsro="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.4_1530546826048_0.8542479209792211"},"_hasShrinkwrap":false},"1.0.0-beta.5":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.9.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.es6.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n      - [`validateField: (field: string) => void`](#validatefield-field-string--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray-)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n   instead of HTML `<form onSubmit={...} />` component (since there is no\n   `<form />` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling\n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `validateField: (field: string) => void`\n\nImperatively call field's [`validate`] function if specified for given field. Formik will use the current field value.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n              )}\n          />\n        </Form>\n        )}\n        />\n      </div>\n    );\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do the same\n            <button\n              type=\"button\"\n              onClick={() => arrayHelpers.remove(index)}\n            >\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.5","dist":{"shasum":"90508448a5749e2eb620e4a2a393b504881318e7","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.5.tgz","fileCount":27,"unpackedSize":1407356,"integrity":"sha512-Huh4lWiSqBHb3APrMbrvDNoAniH+0cryHrnQLYJ1gr0BHzgyWV7pdBlcHDCmbKQc771pRIwvm/G7yYNuAqLwew==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICm+BSH7OMzn8FnbBSzZXR2SjRF0sQ0ZGAhetdA2wCAQAiEAuZaHG+/Lx89An5rxZ1I44kNEU+Ifjx6ta2r7M4P61jo="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.5_1530829967575_0.6347995779662599"},"_hasShrinkwrap":false},"1.0.0-beta.6":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.3.2","react-dom":"^16.3.2","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.9.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project. \n\n_Version 1.0 is coming will be released by the end of July, so I suggest installing from the `next` release channel._\n\n```bash\nnpm i formik@next --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n      - [`validateField: (field: string) => void`](#validatefield-field-string--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray-)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n   instead of HTML `<form onSubmit={...} />` component (since there is no\n   `<form />` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling\n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `validateField: (field: string) => void`\n\nImperatively call field's [`validate`] function if specified for given field. Formik will use the current field value.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n              )}\n          />\n        </Form>\n        )}\n        />\n      </div>\n    );\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do the same\n            <button\n              type=\"button\"\n              onClick={() => arrayHelpers.remove(index)}\n            >\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: || :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.6","dist":{"shasum":"b52d6393474838614bbda7182ad7ad0e0af196f5","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.6.tgz","fileCount":27,"unpackedSize":1406600,"integrity":"sha512-wCOjko3tjPouvAEn6Fuy5ed64agMpIQwN6Ky6dJUEaQKNgn2ypslzMaBimWlgTO7yZF0K8TOWUrh3HPUx1AYSQ==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCJsmq9sGmQUUGPz0bMkMcKuLstg+N3tTlDjPs2Qs9bKgIhAIR1Tm2L3GfibGhmVLDtWcaIlUWx/x6SLlpi54Z9vsw5"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.6_1531325344780_0.6372424959806111"},"_hasShrinkwrap":false},"1.0.0-beta.7":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.7","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.0","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"2.9.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project. \n\n_Version 1.0 is coming will be released by the end of July, so I suggest installing from the `next` release channel._\n\n```bash\nnpm i formik@next --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n      - [`validateField: (field: string) => void`](#validatefield-field-string--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray-)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n   instead of HTML `<form onSubmit={...} />` component (since there is no\n   `<form />` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling\n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `validateField: (field: string) => void`\n\nImperatively call field's [`validate`] function if specified for given field. Formik will use the current field value.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n              )}\n          />\n        </Form>\n        )}\n        />\n      </div>\n    );\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do the same\n            <button\n              type=\"button\"\n              onClick={() => arrayHelpers.remove(index)}\n            >\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n|| :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.7","dist":{"shasum":"9ad40e646a0957d7648dbfdfd82844d977395cf7","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.7.tgz","fileCount":27,"unpackedSize":1412951,"integrity":"sha512-6wMUZeNgGhahpO+NPwfDFTrmyTbIG3nyLpw0Er8NaWJg/zAhhO45nbeawT/t28dICduIgfuQFry7/fh7sEO4WA==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICJA4PpF8WPUnWtxcOaY5T1Xed6wlVRZtHXPXYamErOVAiBNjESMAoLCwudDdv9UkVhjpeqyuHe1e1PlVWXIkv2ueQ=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.7_1531352281827_0.17454093911123292"},"_hasShrinkwrap":false},"1.0.0-beta.8":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.8","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1. Getting values in and out of form state\n2. Validation and error messages\n3. Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1. According to our prophet Dan Abramov,\n   [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2. Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n   SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n   input latency will continue to increase if you use Redux-Form.\n3. Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project. \n\n_Version 1.0 is coming will be released by the end of July, so I suggest installing from the `next` release channel._\n\n```bash\nnpm i formik@next --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n      The benefit of the render prop approach is that you have full access to React's\n      state, props, and composition model. Thus there is no need to map outer props\n      to values...you can just set the initial values, and if they depend on props / state\n      then--boom--you can directly access to props / state.\n\n      The render prop accepts your inner form component, which you can define separately or inline\n      totally up to you:\n      - `<Formik render={props => <form>...</form>}>`\n      - `<Formik component={InnerForm}>`\n      - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n    */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field)\n    - [`withFormik()`](#withformik)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n      - [`validateField: (field: string) => void`](#validatefield-field-string--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray-)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1. Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n   instead of HTML `<form onSubmit={...} />` component (since there is no\n   `<form />` element in React Native).\n2. `<TextInput />` uses Formik's `props.setFieldValue` instead of\n   `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`\n\n##### `isSubmitting: boolean`\n\nSubmitting state. Either `true` or `false`. Formik will set this to `true` on\nyour behalf before calling [`handleSubmit`] to reduce boilerplate.\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false` and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling\n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `validateField: (field: string) => void`\n\nImperatively call field's [`validate`] function if specified for given field. Formik will use the current field value.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms))\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {}\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try'\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors\n    }\n  })\n}\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n              )}\n          />\n        </Form>\n        )}\n        />\n      </div>\n    );\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do the same\n            <button\n              type=\"button\"\n              onClick={() => arrayHelpers.remove(index)}\n            >\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1. Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n|| :---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\")                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\")                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.8","dist":{"shasum":"685defe293bc4e8e7ea0e71db6892df70e96a5dc","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.8.tgz","fileCount":27,"unpackedSize":1411905,"integrity":"sha512-MOLg6oV0eiivYxo5HuWyPswo1KyB8alKcJZKjUseEABKcJdvClB8tdQ0qmO4hlun/3awWVW68TsYJJpWboSXYw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDpWfh+XGW/CnBl2mN2B8Xl/h0lQXonm8Q2BMFrbWw8jAIhAJNsmqRWKOs2rVHxlrPQlSeCu7TmSzb89sRAm5CjTxWU"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.8_1531354245159_0.333469858135494"},"_hasShrinkwrap":false},"1.0.0-beta.9":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.9","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik/dist/formik.umd.min.js?compression=gzip)](https://unpkg.com/formik/dist/formik.umd.min.js)\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![npm](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![license](https://img.shields.io/npm/l/formik.svg)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1.  According to our prophet Dan Abramov,\n    [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2.  Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n    SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n    input latency will continue to increase if you use Redux-Form.\n3.  Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n_Version 1.0 is coming will be released by the end of July, so I suggest installing from the `next` release channel._\n\n```bash\nnpm i formik@next --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)**\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n                                                          The benefit of the render prop approach is that you have full access to React's\n                                                          state, props, and composition model. Thus there is no need to map outer props\n                                                          to values...you can just set the initial values, and if they depend on props / state\n                                                          then--boom--you can directly access to props / state.\n\n                                                          The render prop accepts your inner form component, which you can define separately or inline\n                                                          totally up to you:\n                                                          - `<Formik render={props => <form>...</form>}>`\n                                                          - `<Formik component={InnerForm}>`\n                                                          - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n                                                        */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n- [Guides](#guides)\n  - [Basics](#basics)\n  - [React Native](#react-native)\n    - [Why use `setFieldValue` instead of `handleChange`?](#why-use-setfieldvalue-instead-of-handlechange)\n    - [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  - [Using Formik with TypeScript](#using-formik-with-typescript)\n    - [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field-)\n    - [`withFormik()`](#withformik)\n  - [How Form Submission Works](#how-form-submission-works)\n    - [Frequently Asked Questions](#frequently-asked-questions)\n- [API](#api)\n  - [`<Formik />`](#formik-)\n    - [Formik render methods](#formik-render-methods)\n    - [Formik props](#formik-props)\n      - [`dirty: boolean`](#dirty-boolean)\n      - [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      - [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      - [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      - [`handleReset: () => void`](#handlereset---void)\n      - [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      - [`isSubmitting: boolean`](#issubmitting-boolean)\n      - [`isValid: boolean`](#isvalid-boolean)\n      - [`isValidating: boolean`](#isvalidating-boolean)\n      - [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      - [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      - [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      - [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      - [`submitForm: () => void`](#submitform---void)\n      - [`submitCount: number`](#submitcount-number)\n      - [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      - [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      - [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      - [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      - [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      - [`status?: any`](#status-any)\n      - [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      - [`values: { [field: string]: any }`](#values--field-string-any-)\n      - [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    - [`validateField: (field: string) => void`](#validatefield-field-string--void)\n    - [`component`](#component)\n    - [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    - [`children: func`](#children-func)\n    - [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    - [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    - [`initialValues?: Values`](#initialvalues-values)\n    - [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    - [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    - [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    - [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    - [`validateOnChange?: boolean`](#validateonchange-boolean)\n    - [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  - [`<Field />`](#field-)\n    - [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    - [Refs](#refs)\n  - [`<FieldArray />`](#fieldarray-)\n      - [`name: string`](#name-string)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    - [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    - [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    - [FieldArray Helpers](#fieldarray-helpers)\n    - [FieldArray render methods](#fieldarray-render-methods)\n      - [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      - [`component: React.ReactNode`](#component-reactreactnode)\n  - [`<Form />`](#form-)\n  - [`withFormik(options)`](#withformikoptions)\n    - [`options`](#options)\n      - [`displayName?: string`](#displayname-string)\n      - [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      - [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        - [The \"FormikBag\":](#the-formikbag)\n      - [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      - [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      - [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      - [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      - [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      - [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    - [Injected props and methods](#injected-props-and-methods)\n  - [`connect()`](#connect)\n- [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n- [Authors](#authors)\n- [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1.  Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n    instead of HTML `<form onSubmit={...} />` component (since there is no\n    `<form />` element in React Native).\n2.  `<TextInput />` uses Formik's `props.setFieldValue` instead of\n    `props.handleChange`. To understand why, see the discussion below.\n\n#### Why use `setFieldValue` instead of `handleChange`?\n\n'cuz [`handleChange`] will not work in React Native...\n\n```js\nimport { Button, TextInput, View } from 'react-native';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={formikProps => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={formikProps.handleChange} // this WILL NOT WORK IN RN\n            value={formikProps.values.email}\n          />\n          <Button onPress={formikProps.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n```\n\nThe reason is that Formik's [`handleChange`] function expects its first argument\nto be synthetic DOM event where the `event.target` is the DOM input element and\n`event.target.id` or `event.target.name` matches the field to be updated.\nWithout this, [`handleChange`] will do nothing.\n\nIn React Native, neither\n[`<TextInput />`](https://facebook.github.io/react-native/docs/textinput.html)'s\n[`onChange`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\nnor\n[`onChangeText`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\ncallbacks pass such an event or one like it to its callback. Instead, they do\nthe following _(emphasis added)_:\n\n> [`onChange?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchange)\\\n> Callback that is called when the text input's text changes.\n>\n> [`onChangeText?: function`](https://facebook.github.io/react-native/docs/textinput.html#onchangetext)\\\n> Callback that is called when the text input's text changes. **Changed text is passed\n> as an argument to the callback handler.**\n\nHowever, Formik works just fine if you use `props.setFieldValue`!\nPhilosophically, just treat React Native's `<TextInput />` the same way you would\nany other 3rd party custom input element.\n\nIn conclusion, the following WILL work in React Native:\n\n```js\n// ...\n// this works.\nexport const MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={text => props.setFieldValue('email', text)}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} />\n  </View>\n);\n// ...\n```\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n### How Form Submission Works\n\nTo submit a form in Formik, you need to somehow fire off the provided `handleSubmit(e)` or `submitForm` prop. When you call either of these methods, Formik will execute the following _(pseudo code)_ each time:\n\n* \"Pre-submit\"\n  * Touch all fields\n  * Set `isSubmitting` to `true`\n  * Increment `submitCount` + 1\n* \"Validation\"\n  * Set `isValidating` to `true`\n  * Run all field-level validations, `validate`, and `validationSchema` asynchronously and deeply merge results\n  * Are there any errors?\n    * Yes: Abort submission. Set `isValidating` to `false`, set `errors`, set `isSubmitting` to `false`\n    * No: Set `isValidating` to `false`, proceed to \"Submission\"\n* \"Submission\"\n  * Proceed with running your submission handler (i.e.`onSubmit` or `handleSubmit`)\n  * _you call `setSubmitting(false)`_ in your handler to finish the cycle\n\n#### Frequently Asked Questions\n\n<details>\n<summary>How do I determine if my submission handler is executing?</summary>\n\nIf `isValidating` is `false` and `isSubmitting` is `true`.\n\n</details>\n\n<details>\n<summary>Why does Formik touch all fields before submit?</summary>\n\nIt is common practice to only show an input's errors in the UI if it has been visited (a.k.a \"touched\"). Before submitting a form, Formik touches all fields so that all errors that may have been hidden will now be visible.\n\n</details>\n\n<details>\n<summary>How do I protect against double submits?</summary>\n\nDisable whatever is triggering submission if `isSubmitting` is `true`.\n\n</details>\n<details>\n<summary>How do I know when my form is validating before submit?</summary>\n\nIf `isValidating` is `true` and `isSubmitting` is `true`.\n\n</details>\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`. To learn more about the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `isSubmitting: boolean`\n\nSubmitting state of the form. Returns `true` if submission is in progress and `false` otherwise. IMPORTANT: Formik will set this to `true` as soon as submission is _attempted_. To learn more about the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `isValidating: boolean`\n\nReturns `true` if Formik is running any validation function, `false` otherwise. To learn more about what happens with `isValidating` during the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false`, `isValidating` to `false`, and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling\n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `validateField: (field: string) => void`\n\nImperatively call field's [`validate`] function if specified for given field. Formik will use the current field value.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1.  Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do\n            the same\n            <button type=\"button\" onClick={() => arrayHelpers.remove(index)}>\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1.  Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n### `connect()`\n\n`connect()` is a higher-order component that injects raw Formik context as prop called `formik` into the inner component. Fun fact: Formik uses `connect()` under the hood to wire up `<Field/>`, `<FastField>`, and `<Form>`. Advanced users may find it useful to use `connect()` when building custom components.\n\n```js\nimport { connnect } from 'formik';\n\nconst SubmitCount = ({ formik }) => <div>{formik.submitCount}</div>;\n\nexport default connect(SubmitCount);\n```\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer 'Answering Questions') [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Code') [🎨](#design-jaredpalmer 'Design') [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Documentation') [💡](#example-jaredpalmer 'Examples') [🤔](#ideas-jaredpalmer 'Ideas, Planning, & Feedback') [👀](#review-jaredpalmer 'Reviewed Pull Requests') [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Tests') | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite 'Code') [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite 'Documentation') [🤔](#ideas-eonwhite 'Ideas, Planning, & Feedback') [👀](#review-eonwhite 'Reviewed Pull Requests') | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco 'Documentation') | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz 'Bug reports') [🤔](#ideas-skattyadz 'Ideas, Planning, & Feedback') [👀](#review-skattyadz 'Reviewed Pull Requests') | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin 'Bug reports') [🤔](#ideas-VladShcherbin 'Ideas, Planning, & Feedback') | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=brikou 'Documentation') | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=skvale 'Code') [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale 'Tests') |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey 'Code')                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler 'Documentation')                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.0.0-beta.9","dist":{"shasum":"7df3a9b1fcffde2f14bed14a4271510165ec27e4","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.9.tgz","fileCount":27,"unpackedSize":1419739,"integrity":"sha512-XmqtUw7Cv7//8QMePG81eOtVYOUYlUHYc0wIL+iXgNfkHaWRNGZzV7aQl53pC89robtKkAq6nhamPlBfKcJJlw==","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICmxPzwg2nYw6u7x8D4liLY2F0OXwB7EXAKosCUmvLNXAiAfWBCSISioZDAMACTHay1zzbG6LlaXUg7u1X6/AahM6w=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.9_1531401175121_0.278617010976034"},"_hasShrinkwrap":false},"1.0.0-beta.10":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0-beta.10","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"28ce2b07304550b67b1dec3a961b9e617d5fd1e4","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.0.0-beta.10","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-4iGna3bYryuldOh78pgOekVZUBfRc5RycSo6QMq22Svs6PGMHV9L9R1NphLLL6XCOts47PX/ghcErdZhSunMEQ==","shasum":"de08f861799a493f721b9538aaf628c2b18cd2a3","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0-beta.10.tgz","fileCount":25,"unpackedSize":1420207,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbR6YfCRA9TVsSAnZWagAACIQP/2xIPD+TAetViJ9txC2m\nBs5rXlfxl9p5dxCxrA4lMBeECjwHk+FjYNJqXfZ8Lowp3SlWmuOT9WhDkIrj\n6f6ThPax6dMBJ9K/xfvwT9N/Vb4RxdozHebWNMjYszEM2ISaNC2VAewNEhhR\nNv+Qkb+gKh8K0OyY9j0R6CxmGfWZTxkrhuwiyYL2qdl63aySLAuOa93yjKPm\nG+HYeUzfcvRafhY0O26XTp+5CcquGA2sst1WK2bAEq3Vrn7QQfxcQouPXziw\nnatv3f2WX0IsXJLL440Z+eXAayUYyBTr1/R9h80ghFI3kF4cz6uMiQLOu71R\nB5RN9XrXFZPohk8Hs9S5aEvDhugdYm/WPNg+BXgYsC4S70bxv7IB023c7Vxl\nABDIA43sSPWcS53tjobQ6Ka5rYDMx5PDcH5gi14M8dSKiQNqz0P9nTC+5FLh\nZfDGSGLmL3pcwLUvMSiOOZ3/tJagtbRFqcs4RyRyNXDEpk8Z/+TjiVkA/4Rz\n5ssc7wTNGf41fcY2v8zDVp0TNieI8Fps94QKGC2LdN8DUDxvbcsJ7AQHUdt3\nZwk/zE9JA5L7bhil/06fa2s7e+FdShAM5cYFBncjBlo/EehzPk0K+4eoYdJc\nYMDo89UG0KnscV/9p3Ib77PC+BqQd4rZmg4/BXxA+Wmesb3o2IDeiiUeVzDS\nTIJY\r\n=IW5j\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDOwWRSwU5rHj63iFalkTyW3DC0QPkn3mZYZ+QM8WPPwwIgSfFHV3mLZ7Y2tLBKLBNhB+uumTWn/IK9sPYqebcLE+k="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0-beta.10_1531422239214_0.32824445474523145"},"_hasShrinkwrap":false},"1.0.0":{"name":"formik","description":"Forms in React, without tears","version":"1.0.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"fa1c3f396334cfddbe736caf2ff71e7f8b71b2fb","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.0.0","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-iRuJ+8aO2FA/SB/QeDXW/WyHXC9LRdWa8h5Wn0omJx3jN0ZYUl2HRwvZnqMG4Oiuct+2vAy0736WQ4Vs+ZariQ==","shasum":"de1138e57029d7a9fc7f4aeb961736d77b5f31c9","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.0.tgz","fileCount":25,"unpackedSize":1420120,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbR74tCRA9TVsSAnZWagAASgIQAKJVjKy29i/OI2+TJuP5\nIKSYutT1nQcYHNZotipkRcrYCAV0BZU3UrTORazqMGpVeK7U8B3HN2qQ81tV\nc0LDxXue5Q9sH7jjn2rFbstMy7PVP1E1qogBU26z1Di5JtqORi9TsE7FppmT\nVZUDNyIsr4nUDdkiCNZZXgdoaizA/DCCAyWtVf42Eo4vHofhMZCoTnY60yOe\nLld7BF0FrJ6ZlmPEGCl5bVt0fbKbS+T5Cdy25Q2mJH83DhPD77YorV5L+LO4\nMAWk9lncUdTd6Z70dlGNej9TKJfHt/6ThSR7ZP5WvS8ec8VwB5Qjq42nzS5P\nrRqka9BdyfO653I36lGGZ83KpnBts4GPuf9rzqzc5nKt138lH1F35hZxqc17\n0YgIUg5tMA+qk8UdFrTPE/iK5wyi1ETb66ctd6Hv0YX4k4Nm9mCkpeuhn6oh\ne/EggD73UaZTP1DiyNoPjVwvRX+Edg/zG05Cgf2e7+NkZl7L1+uM3drwyw9X\npDxEn/zWx9i5zjyUw28AwwMeUQqLhaSiYfsW8h3+yug2krV8cdY/KhZXJDdA\nLkKibOx0YByg1/6EWAPCXN++Q2o2pgtMBqCg/CW32WN1z3Daf7BWacVedal/\nhiXRW6N/rHNYyk5LIGLegS01Iq9aA9/Zx8jhj+GOdmpYl8OP88YP91Lu5dKE\n7dC/\r\n=OfAM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHgsdrUFeSUZ60sXuVA6Oe0mW4JdEDkKI7Vnp7zsIPkPAiA44aYFtd4wcvAhgkVy8mJb+DgKbk878B6J5CsPRmSclA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.0_1531428396857_0.647022665525665"},"_hasShrinkwrap":false},"1.0.1":{"name":"formik","description":"Forms in React, without tears","version":"1.0.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"273b846a872cb0bbf9b75ceb79a880381673400e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.0.1","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-wGTpf+hhAut2dU2ZQNWzSkxiWCWyNtLVD71XBCUoBnQHzqHzAiay3DiN2H57sMZkx2qIqTS96WyO0yC3SP18Ig==","shasum":"fadb89380d2d228b1457a747279ab5da57450a9c","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.1.tgz","fileCount":25,"unpackedSize":1420114,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbR76lCRA9TVsSAnZWagAA1tIP/21xy0gQaYkO3lX2+3ig\nALmJilIjQNuXpgcNoTS6c1BTUxwzLnHwfRKb2Sx1XS3lBGprf22g9TxsW0/V\n3cC3SHIeEwBpftRKrl4butNC2eA2p6lgJB1R8ldnhNzm73fEedMAJCOQG/94\nNIYaYto22Bj1pJc5Q1q2WnCS/5d1mJ4xQHXiifo752REfSMYEtOacrK6kYau\nUHZlPHnMnLLDplEk4oJasVLV+XisNoN9DCAfM6+xE3fX2TDcSJQ9fWUJ1iIA\nCwp954i9Y6DxdmZ13xIu4ViFBN8n1+plcSX/yZUY3+TkrbVzYR01Yk+AdWQB\n6YVVjYxkFaR/saF158oRljQ46Y/Fo5waO/AieY6zkpWj4ULNGuwQF8Haqrf9\nvYalgxFJPMLotSo4dyCMLcCVpoUrVaxHBSn3SPyze9FO5haBkt/0fssd9Zsd\nc2LY4payMAGT0BKl0hpXkKudsQ+YKJHbENQIylN6sB2YLVMzFbxqOvhkaupZ\npd4fayn4LaHBxibn4g8TbtOcUsUpoM/VYdJp1NKqLxpgbs9PmJrs0sNx4vuc\n1HUrvA/paY/owDHaP4iNUvdUFYGvbVKqCBh+ZXjk2iSpzo40Zby1YFA1/AQy\ncGZpdognlns5EppqdsXUCZTW9iAYjQK3OVzSkn2FcKwD7whV04CodTNztQs4\n5Ov8\r\n=kvTp\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAl5+tFUtNiKZr5VN9vs0MgnRMlf1arKAE8beNMcOMQtAiBKA4LGc3sAKh1DC/xA9qhDUA+vTzOe8lYOtYmzN2EWBA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.1_1531428517630_0.4853600914665319"},"_hasShrinkwrap":false},"1.0.2-0":{"name":"formik","description":"Forms in React, without tears","version":"1.0.2-0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Next Release](https://img.shields.io/npm/v/formik/next.svg)](https://www.npmjs.com/package/formik/v/next)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1.  According to our prophet Dan Abramov,\n    [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2.  Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n    SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n    input latency will continue to increase if you use Redux-Form.\n3.  Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"  \n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)  \n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)  \n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)  \n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)** or on [Expo Snack](https://snack.expo.io/Bk9pPK87X)\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/Bk9pPK87X)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```js\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```js\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n          The benefit of the render prop approach is that you have full access to React's\n          state, props, and composition model. Thus there is no need to map outer props\n          to values...you can just set the initial values, and if they depend on props / state\n          then--boom--you can directly access to props / state.\n          The render prop accepts your inner form component, which you can define separately or inline\n          totally up to you:\n          - `<Formik render={props => <form>...</form>}>`\n          - `<Formik component={InnerForm}>`\n          - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n        */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n* [Guides](#guides)\n  * [Basics](#basics)\n  * [React Native](#react-native)\n    * [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  * [Using Formik with TypeScript](#using-formik-with-typescript)\n    * [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field-)\n    * [`withFormik()`](#withformik)\n  * [How Form Submission Works](#how-form-submission-works)\n    * [Frequently Asked Questions](#frequently-asked-questions)\n* [API](#api)\n  * [`<Formik />`](#formik-)\n    * [Formik render methods](#formik-render-methods)\n    * [Formik props](#formik-props)\n      * [`dirty: boolean`](#dirty-boolean)\n      * [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      * [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      * [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      * [`handleReset: () => void`](#handlereset---void)\n      * [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      * [`isSubmitting: boolean`](#issubmitting-boolean)\n      * [`isValid: boolean`](#isvalid-boolean)\n      * [`isValidating: boolean`](#isvalidating-boolean)\n      * [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      * [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      * [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      * [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      * [`submitForm: () => void`](#submitform---void)\n      * [`submitCount: number`](#submitcount-number)\n      * [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      * [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      * [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      * [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      * [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      * [`status?: any`](#status-any)\n      * [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      * [`values: { [field: string]: any }`](#values--field-string-any-)\n      * [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    * [`validateField: (field: string) => void`](#validatefield-field-string--void)\n    * [`component`](#component)\n    * [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    * [`children: func`](#children-func)\n    * [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    * [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    * [`initialValues?: Values`](#initialvalues-values)\n    * [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    * [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    * [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    * [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    * [`validateOnChange?: boolean`](#validateonchange-boolean)\n    * [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  * [`<Field />`](#field-)\n    * [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    * [Refs](#refs)\n  * [`<FieldArray />`](#fieldarray-)\n    * [`name: string`](#name-string)\n    * [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    * [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    * [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    * [FieldArray Helpers](#fieldarray-helpers)\n    * [FieldArray render methods](#fieldarray-render-methods)\n      * [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      * [`component: React.ReactNode`](#component-reactreactnode)\n  * [`<Form />`](#form-)\n  * [`withFormik(options)`](#withformikoptions)\n    * [`options`](#options)\n      * [`displayName?: string`](#displayname-string)\n      * [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      * [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        * [The \"FormikBag\":](#the-formikbag)\n      * [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      * [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      * [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      * [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      * [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      * [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    * [Injected props and methods](#injected-props-and-methods)\n  * [`connect()`](#connect)\n* [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n* [Authors](#authors)\n* [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```js\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```js\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.social.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```js\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={props.handleChange('email')}\n      onBlur={props.handleBlur('email')}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1.  Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n    instead of HTML `<form onSubmit={...} />` component (since there is no\n    `<form />` element in React Native).\n2.  `<TextInput />` uses Formik's `props.handleChange(fieldName)` and `handleBlur(fieldName)` instead of directly     assigning the callbacks to props, because we have to get the `fieldName` from somewhere and with ReactNative we can't get it automatically like for web (using input name attribute). You can also use `setFieldValue(fieldName, value)` and `setTouched(fieldName, bool)` as an alternative.\n\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```js\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```tsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\n[![TypeScript Types](https://img.shields.io/npm/types/formik.svg)](https://npm.im/formik)\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n### How Form Submission Works\n\nTo submit a form in Formik, you need to somehow fire off the provided `handleSubmit(e)` or `submitForm` prop. When you call either of these methods, Formik will execute the following _(pseudo code)_ each time:\n\n* \"Pre-submit\"\n  * Touch all fields\n  * Set `isSubmitting` to `true`\n  * Increment `submitCount` + 1\n* \"Validation\"\n  * Set `isValidating` to `true`\n  * Run all field-level validations, `validate`, and `validationSchema` asynchronously and deeply merge results\n  * Are there any errors?\n    * Yes: Abort submission. Set `isValidating` to `false`, set `errors`, set `isSubmitting` to `false`\n    * No: Set `isValidating` to `false`, proceed to \"Submission\"\n* \"Submission\"\n  * Proceed with running your submission handler (i.e.`onSubmit` or `handleSubmit`)\n  * _you call `setSubmitting(false)`_ in your handler to finish the cycle\n\n#### Frequently Asked Questions\n\n<details>\n<summary>How do I determine if my submission handler is executing?</summary>\n\nIf `isValidating` is `false` and `isSubmitting` is `true`.\n\n</details>\n\n<details>\n<summary>Why does Formik touch all fields before submit?</summary>\n\nIt is common practice to only show an input's errors in the UI if it has been visited (a.k.a \"touched\"). Before submitting a form, Formik touches all fields so that all errors that may have been hidden will now be visible.\n\n</details>\n\n<details>\n<summary>How do I protect against double submits?</summary>\n\nDisable whatever is triggering submission if `isSubmitting` is `true`.\n\n</details>\n<details>\n<summary>How do I know when my form is validating before submit?</summary>\n\nIf `isValidating` is `true` and `isSubmitting` is `true`.\n\n</details>\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```js\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`. To learn more about the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `isSubmitting: boolean`\n\nSubmitting state of the form. Returns `true` if submission is in progress and `false` otherwise. IMPORTANT: Formik will set this to `true` as soon as submission is _attempted_. To learn more about the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `isValidating: boolean`\n\nReturns `true` if Formik is running any validation function, `false` otherwise. To learn more about what happens with `isValidating` during the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false`, `isValidating` to `false`, and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling\n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `validateField: (field: string) => void`\n\nImperatively call field's [`validate`] function if specified for given field. Formik will use the current field value.\n\n#### `component`\n\n```tsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```tsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```tsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1.  Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```js\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```js\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do\n            the same\n            <button type=\"button\" onClick={() => arrayHelpers.remove(index)}>\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```js\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1.  Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n### `connect()`\n\n`connect()` is a higher-order component that injects raw Formik context as prop called `formik` into the inner component. Fun fact: Formik uses `connect()` under the hood to wire up `<Field/>`, `<FastField>`, and `<Form>`. Advanced users may find it useful to use `connect()` when building custom components.\n\n```js\nimport { connect } from 'formik';\n\nconst SubmitCount = ({ formik }) => <div>{formik.submitCount}</div>;\n\nexport default connect(SubmitCount);\n```\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer 'Answering Questions') [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Code') [🎨](#design-jaredpalmer 'Design') [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Documentation') [💡](#example-jaredpalmer 'Examples') [🤔](#ideas-jaredpalmer 'Ideas, Planning, & Feedback') [👀](#review-jaredpalmer 'Reviewed Pull Requests') [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Tests') | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite 'Code') [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite 'Documentation') [🤔](#ideas-eonwhite 'Ideas, Planning, & Feedback') [👀](#review-eonwhite 'Reviewed Pull Requests') | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco 'Documentation') | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz 'Bug reports') [🤔](#ideas-skattyadz 'Ideas, Planning, & Feedback') [👀](#review-skattyadz 'Reviewed Pull Requests') | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin 'Bug reports') [🤔](#ideas-VladShcherbin 'Ideas, Planning, & Feedback') | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=brikou 'Documentation') | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=skvale 'Code') [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale 'Tests') |\n||| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey 'Code')                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler 'Documentation')                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","readmeFilename":"README.md","gitHead":"cef221079697d34c0606493d30d165c7be727209","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.0.2-0","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-7Hj96tqy2YsZ5wsLcuT8PPSlqSuNYPtnXh4VMXlBN9UrXnps9+QzpLonRor2QW1cFlP46huFRiKqYuYtZYEK+Q==","shasum":"700bcf96f7b0511efc4868f556daafa08d6b4c28","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.2-0.tgz","fileCount":25,"unpackedSize":1371673,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbVlZcCRA9TVsSAnZWagAABecP/j7CoTAt1rAQl5PHZ5CX\ngZ76Wd0WXUqzJXc2OiV+1jXKDHCwPvLFf9mHOBRU7ORY9Wuu1ZmKHhISjHE5\nlBrSsPrWVbqfDneOvekM7drQZJaghgEQhpdIZH0wUGP69KXWdMN6spclXwjq\ny4vjEJnKnz+wvfNVo3TEafkfP3ofOG9ebQWHoKFMi0y26OYgmamJ8tdXqtLK\ndJ8EAi2YvSBO7XFpq87EGmy7kRj4LqdBIj0k2JBF/kazfpipVgLhwYvowGea\nroMp2N3mIqJOhvLWiQulPNiVJQWV2/ghZjj8cU/cSsh55aCErm8rBQTrXttp\nPP1hh0rhi/ddpUcJ0qlz67kQJRRj+pAAM2L/Rgkk9VDTAqvRyc+yfJITNrNc\noTRIAhX1mRrug1Wh1ifalLJjf1fGDWH0ub++PoXdBkgQQwckjFJ/bvDDk7ZE\nXFcNLSxV41UQQGpAVlkQUAiilu0qcqq+eJj4bMW9PfBcc3KHZJZ1AjscGaXy\nJjswz0qnm4i7/m9j9nw3IDo4N1HrEI6yfMn1nrwfL+YtkhXxK9DetQEzaaaw\nPjgizlFWRFmTyxvbRiVoYQEx8xPdWErU5eUGVwdyVqNaS7TxhyECwmgjJl6s\nYgxD02gMg51u/8YTk94quIz9OIeKc4dsqvbuvzYzq8oUBialksx1NgpZcjTl\nna8g\r\n=PcwO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC4hEdnuBvxtXyjcwxcAfl6AlM63olgOmhfcT2/YwmygAIgTXOBhBqZK9RW4M+M5vn26v4EKqzP2lO3+SBoyiP2Xn8="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.2-0_1532384860489_0.6658869250078587"},"_hasShrinkwrap":false},"1.0.2":{"name":"formik","description":"Forms in React, without tears","version":"1.0.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"15b699814308f952a357a0764667b29cabecae69","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.0.2","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-k3nsQzXxfFbJEkOUKpA48BHwwI0oNaSPARzS2T+SzqUwXSI6gprij1YkQKpTGyToY0ZJzN18BS7ZgQ9Pkhyzgg==","shasum":"333962ab3f09f137992b13198fefa4ec91b15af5","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.2.tgz","fileCount":25,"unpackedSize":1371668,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbWIujCRA9TVsSAnZWagAA1wAP/2jUsMgTx+5bWbxrd2tx\n8dwOKpIx9y/HMEqq2QPaoHlsA1K9qAdQgZzYFfj1/pD2dGZQSBqf72f2Zzov\nhy6KFJEwaeqqzpwTZO5Nvpkqerx8gys4lmi+DW44ETT7WXe6XO6VZAONPdYZ\n7pJ3LDMFQPKwAqSCp7I87o5ZnBjJUqQsBNfSl8nHJRHo7WfuxYlVWg5U+gG/\nUvnNC92kNQUzZQSJCfGgFi5i7B9qpN1DrWWRbb0ZpfX4gVSWsf+YUJ6l4wwD\nfIKOTYC2RSJfjzI+6BrMjMY5e8q+RXuwLybxN/xT3P9zywkQ8V05TzjyX1Q8\n8SA6Sf1/KimgbebiK5vMyQQMP6PeCOfurR+y/kr7XeUKfwW3nspvUBDpMaqe\nTVXCScQ0krfjG0WKdiIaymWL/LMaO0GfW51QOHYhrXX1VqlGQ9++C/wSGvia\nS7L6fj5o45IefDh5PsnYBKNv1A0umFtGi8na1ElkBRovgoA6DZt27ly5k+QX\n32g5Ie4mpbrH4dD0O+3BSv5XR/03F1LHn7NBz3k2p3ahKv0zELQ8FdbSknzW\nUmv/A2RNjrvElgPqzBzSXYp/Hxg7p8Yv8rhJgzi7ZOC3StxyFvwosidQPtm0\nsM4yaPK7t+UCd4YDjiJYdkS6hMk5eoru7HQeQWT2UkOkIKRmB8p7H99UA2TG\nAPQi\r\n=34gK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAVWB0GTFHVp35pgT/T5YOMTdO+fTh/CYye1c761iHiIAiAD+LghOMi0XFv5lsqnJt2gZnC/zV0T7YB2VDYBx6N+OA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.2_1532529570377_0.8473945477709859"},"_hasShrinkwrap":false},"1.0.3":{"name":"formik","description":"Forms in React, without tears","version":"1.0.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.0-dev.20180711","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"03a7a967a72ce45bd6302da63f52729b8289be18","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.0.3","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-bCAyrMhMs8jld/geKdbH7ZCGyBhieidMChvGZvx4c6SJ8EdDmZFF5jnhPLv1bvQADlCokMGsWSjW0x9qrIcU5Q==","shasum":"73972b8c91d0ee22cb30f00766cdb0019d40177e","tarball":"https://registry.npmjs.org/formik/-/formik-1.0.3.tgz","fileCount":25,"unpackedSize":1377192,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbdBLgCRA9TVsSAnZWagAAzLcP/iz6ckPUsKiIO5fAxCuP\nOgTP8YZrnaKHQO6JwI4nV8/vjHI1jB4LmxNCYtbancrJkX1UQLKJj4X/i8ls\nIkqWCKlfKkbooAd99DZsskMWFY9hWBl3zxWaua/VoJslN7tLa4UyJkTvYP/g\nK6adTaW0QIJjIGWXxsBq6j8keI6ZxRe2Xx2cjU2oecPn29Asza6OxN7OChIF\nGkw6jj+WyPS2dCVfSgPp0XLbVTL7WfM0UeATXVMD/vw1rKzWNvTv1otsd87d\nFYvvR1rEhdSc1CPHyFPla7i2tGx3rFDaoTp6+/Ou6rAnp7BDZjRmY+UwydEY\nsXq9hsrqnLD0XyEl7mVfs7l+iJ1nvz/XDQOxPrSLZXUwTQZODmWM2uAzvq6q\nYCgLetFQyGoX8jTnESDYIylQmDtqaawHbGDdWgn1skZNcufO3/whvq5GM4St\nxp1HWepKyBnCIhZSHyyov39BoDy2a5C/b0Xgcxsi5ck7r8GY+Z7pEv0yfFxD\nyu6pTCJNo9mrd+28HrbDYoC+zRilTi7p94qd3Rt1/fDXNl1E0JNtqlBL7DqK\n3K73Tx0hCTWXxzm/3e2Fp+G4tpwZb2IMXL7mmnIeVTOGPYr+lt+kF+saB+Vb\npzJLbXsKtqECCCDwvhG+bLfGvL/gPv8nr2vMfco19O8M4jXaoLbn7S/YOZC2\nvUsO\r\n=/i2M\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDyhKvFImWXaivgKbhX4HLQ02DWt9yAV+6qI9NOnQXQXwIgeM4REVzJQ6I5XSvotGRFXjyQqB8ftVahq137Q/IFcTc="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.0.3_1534333664554_0.9918332686298537"},"_hasShrinkwrap":false},"1.1.0":{"name":"formik","description":"Forms in React, without tears","version":"1.1.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![Build Status](https://travis-ci.org/jaredpalmer/formik.svg?branch=master)](https://travis-ci.org/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Next Release](https://img.shields.io/npm/v/formik/next.svg)](https://www.npmjs.com/package/formik/v/next)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n## Overview\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n## Developer Experience\n\nI ([@jaredpalmer](https://twitter.com/jaredpalmer)) wrote Formik while building a large internal administrative dashboard with\n[@eonwhite](https://twitter.com/eonwhite). With around ~30 unique forms, it\nquickly became obvious that we could benefit by standardizing not just our input\ncomponents but also the way in which data flowed through our forms.\n\n### Why not Redux-Form?\n\nBy now, you might be thinking, \"Why didn't you just use\n[Redux-Form](https://github.com/erikras/redux-form)?\" Good question.\n\n1.  According to our prophet Dan Abramov,\n    [**form state is inherently ephemeral and local**, so tracking it in Redux (or any kind of Flux library) is unnecessary](https://github.com/reactjs/redux/issues/1287#issuecomment-175351978)\n2.  Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY\n    SINGLE KEYSTROKE. This is fine for small apps, but as your Redux app grows,\n    input latency will continue to increase if you use Redux-Form.\n3.  Redux-Form is 22.5 kB minified gzipped (Formik is 7.8 kB)\n\n**My goal with Formik was to create a scalable, performant, form helper with a\nminimal API that does the really really annoying stuff, and leaves the rest up\nto you.**\n\n## Testimonials\n\n> \"I can't believe people ever put forms in redux, or did anything else other than this.\"\n> --[James Long](https://twitter.com/jlongster), Creator of Prettier and Actual Budget\n\n> [\"Formik. All day. All long.\"](https://twitter.com/ken_wheeler/status/974676242501947397?s=20)\n> --[Ken Wheeler](https://twitter.com/ken_wheeler), Director of Open Source at Formidable Labs\n\n> [\"Been using @jaredpalmer's Formik lately at work – this is my all-time favorite way to handle forms\"](https://twitter.com/jxnblk/status/1000036895366307846)\n> --[Brent Jackson](https://twitter.com/jxnblk/), Creator of Rebass, styled-system, Compositor and many more\n\n> [\"Formik removes most of the moving parts involved in forms allowing me to move faster with more confidence.\"](https://twitter.com/tkh44/status/1000058583197732864)\n> --[Kye Hohenberger](https://twitter.com/tkh44), Creator of Emotion\n\n## Influences\n\nFormik started by expanding on\n[this little higher order component](https://github.com/jxnblk/rebass-recomposed/blob/master/src/withForm.js)\nby [Brent Jackson](https://github.com/jxnblk), some naming conventions from\nRedux-Form, and (most recently) the render props approach popularized by\n[React-Motion](https://github.com/chenglou/react-motion) and\n[React-Router 4](https://github.com/ReactTraining/react-router). Whether you\nhave used any of the above or not, Formik only takes a few minutes to get\nstarted with.\n\n## Installation\n\nAdd Formik to your project.\n\n```bash\nnpm i formik --save\n```\n\nYou can also try before you buy with this\n**[demo of Formik on CodeSandbox.io](https://codesandbox.io/s/zKrK5YLDZ)** or on [Expo Snack](https://snack.expo.io/Bk9pPK87X)\n\n## Demos\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/Bk9pPK87X)\n\n## Talks\n\n* [An Introduction to Formik](https://youtu.be/-tDy7ds0dag?t=33s) by\n  [Jared Palmer](https://twitter.com/jaredpalmer) @ Spotify NYC. August 15th, 2017.\n\n## Community Articles / Tutorials\n\n* [Better React Forms with Formik](https://mead.io/formik/?utm_source=github&utm_campaign=formikrepo)\n* [The Joy of Forms with React and Formik](https://keyholesoftware.com/2017/10/23/the-joy-of-forms-with-react-and-formik/)\n* [Painless React Forms with Formik](https://hackernoon.com/painless-react-forms-with-formik-e61b70473c60)\n\n## The gist\n\nFormik keeps track of your form's state and then exposes it plus a few reusable\nmethods and event handlers (`handleChange`, `handleBlur`, and `handleSubmit`) to\nyour form via `props`. `handleChange` and `handleBlur` work exactly as\nexpected--they use a `name` or `id` attribute to figure out which field to\nupdate.\n\nThere are two ways to use Formik:\n\n* `withFormik()`: A Higher-order Component (HoC) that accepts a configuration\n  object\n* `<Formik />`: A React component with a `render` prop\n\n**Both do exactly the same thing** and share the same internal implementation.\nThey just differ in their respective style....\n\n```jsx\n// Higher Order Component\nimport React from 'react';\nimport { withFormik } from 'formik';\n\n// Our inner form component which receives our form's state and updater methods as props\nconst InnerForm = ({\n  values,\n  errors,\n  touched,\n  handleChange,\n  handleBlur,\n  handleSubmit,\n  isSubmitting,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"email\"\n      name=\"email\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.email}\n    />\n    {touched.email && errors.email && <div>{errors.email}</div>}\n    <input\n      type=\"password\"\n      name=\"password\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.password}\n    />\n    {touched.password && errors.password && <div>{errors.password}</div>}\n    <button type=\"submit\" disabled={isSubmitting}>\n      Submit\n    </button>\n  </form>\n);\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik({\n  // Transform outer props into form values\n  mapPropsToValues: props => ({ email: '', password: '' }),\n  // Add a custom validation function (this can be async too!)\n  validate: (values, props) => {\n    const errors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (\n      !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n    ) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n  // Submission handler\n  handleSubmit: (\n    values,\n    {\n      props,\n      setSubmitting,\n      setErrors /* setValues, setStatus, and other goodies */,\n    }\n  ) => {\n    LoginToMyApp(values).then(\n      user => {\n        setSubmitting(false);\n        // do whatevs...\n        // props.updateUser(user)\n      },\n      errors => {\n        setSubmitting(false);\n        // Maybe even transform your API's errors into the same shape as Formik's!\n        setErrors(transformMyApiErrors(errors));\n      }\n    );\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm />\n  </div>\n);\n\nexport default Basic;\n```\n\n```jsx\n// Render Prop\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst Basic = () => (\n  <div>\n    <h1>My Form</h1>\n    <p>This can be anywhere in your application</p>\n    {/*\n          The benefit of the render prop approach is that you have full access to React's\n          state, props, and composition model. Thus there is no need to map outer props\n          to values...you can just set the initial values, and if they depend on props / state\n          then--boom--you can directly access to props / state.\n          The render prop accepts your inner form component, which you can define separately or inline\n          totally up to you:\n          - `<Formik render={props => <form>...</form>}>`\n          - `<Formik component={InnerForm}>`\n          - `<Formik>{props => <form>...</form>}</Formik>` (identical to as render, just written differently)\n        */}\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      validate={values => {\n        // same as above, but feel free to move this into a class method now.\n        let errors = {};\n        if (!values.email) {\n          errors.email = 'Required';\n        } else if (\n          !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\n        ) {\n          errors.email = 'Invalid email address';\n        }\n        return errors;\n      }}\n      onSubmit={(\n        values,\n        { setSubmitting, setErrors /* setValues and other goodies */ }\n      ) => {\n        LoginToMyApp(values).then(\n          user => {\n            setSubmitting(false);\n            // do whatevs...\n            // props.updateUser(user)\n          },\n          errors => {\n            setSubmitting(false);\n            // Maybe transform your API's errors into the same shape as Formik's\n            setErrors(transformMyApiErrors(errors));\n          }\n        );\n      }}\n      render={({\n        values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n      }) => (\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"email\"\n            name=\"email\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.email}\n          />\n          {touched.email && errors.email && <div>{errors.email}</div>}\n          <input\n            type=\"password\"\n            name=\"password\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.password}\n          />\n          {touched.password && errors.password && <div>{errors.password}</div>}\n          <button type=\"submit\" disabled={isSubmitting}>\n            Submit\n          </button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nexport default Basic;\n```\n\n### Complementary Packages\n\nAs you can see above, validation is left up to you. Feel free to write your own\nvalidators or use a 3rd party library. Personally, I use\n[Yup](https://github.com/jquense/yup) for object schema validation. It has an\nAPI that's pretty similar [Joi](https://github.com/hapijs/joi) /\n[React PropTypes](https://github.com/facebook/prop-types) but is small enough\nfor the browser and fast enough for runtime usage. Because I :heart: Yup sooo\nmuch, Formik has a special config option / prop for Yup called\n[`validationSchema`] which will automatically transform Yup's validation errors\ninto a pretty object whose keys match [`values`] and [`touched`]. Anyways, you\ncan install Yup from npm...\n\n```\nnpm install yup --save\n```\n\n## Table of Contents\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n\n* [Guides](#guides)\n  * [Basics](#basics)\n  * [React Native](#react-native)\n    * [Avoiding new functions in render](#avoiding-new-functions-in-render)\n  * [Using Formik with TypeScript](#using-formik-with-typescript)\n    * [Render props (`<Formik />` and `<Field />`)](#render-props-formik--and-field-)\n    * [`withFormik()`](#withformik)\n  * [How Form Submission Works](#how-form-submission-works)\n    * [Frequently Asked Questions](#frequently-asked-questions)\n* [API](#api)\n  * [`<Formik />`](#formik-)\n    * [Formik render methods](#formik-render-methods)\n    * [Formik props](#formik-props)\n      * [`dirty: boolean`](#dirty-boolean)\n      * [`errors: { [field: string]: string }`](#errors--field-string-string-)\n      * [`handleBlur: (e: any) => void`](#handleblur-e-any--void)\n      * [`handleChange: (e: React.ChangeEvent<any>) => void`](#handlechange-e-reactchangeeventany--void)\n      * [`handleReset: () => void`](#handlereset---void)\n      * [`handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`](#handlesubmit-e-reactformeventhtmlformevent--void)\n      * [`isSubmitting: boolean`](#issubmitting-boolean)\n      * [`isValid: boolean`](#isvalid-boolean)\n      * [`isValidating: boolean`](#isvalidating-boolean)\n      * [`resetForm: (nextValues?: Values) => void`](#resetform-nextvalues-values--void)\n      * [`setErrors: (fields: { [field: string]: string }) => void`](#seterrors-fields--field-string-string---void)\n      * [`setFieldError: (field: string, errorMsg: string) => void`](#setfielderror-field-string-errormsg-string--void)\n      * [`setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`](#setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void)\n      * [`submitForm: () => void`](#submitform---void)\n      * [`submitCount: number`](#submitcount-number)\n      * [`setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`](#setfieldvalue-field-string-value-any-shouldvalidate-boolean--void)\n      * [`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n      * [`setSubmitting: (isSubmitting: boolean) => void`](#setsubmitting-issubmitting-boolean--void)\n      * [`setTouched: (fields: { [field: string]: boolean }) => void`](#settouched-fields--field-string-boolean---void)\n      * [`setValues: (fields: { [field: string]: any }) => void`](#setvalues-fields--field-string-any---void)\n      * [`status?: any`](#status-any)\n      * [`touched: { [field: string]: boolean }`](#touched--field-string-boolean-)\n      * [`values: { [field: string]: any }`](#values--field-string-any-)\n      * [`validateForm: (values?: any) => void`](#validateform-values-any--void)\n    * [`validateField: (field: string) => void`](#validatefield-field-string--void)\n    * [`component`](#component)\n    * [`render: (props: FormikProps<Values>) => ReactNode`](#render-props-formikpropsvalues--reactnode)\n    * [`children: func`](#children-func)\n    * [`enableReinitialize?: boolean`](#enablereinitialize-boolean)\n    * [`isInitialValid?: boolean`](#isinitialvalid-boolean)\n    * [`initialValues?: Values`](#initialvalues-values)\n    * [`onReset?: (values: Values, formikBag: FormikBag) => void`](#onreset-values-values-formikbag-formikbag--void)\n    * [`onSubmit: (values: Values, formikBag: FormikBag) => void`](#onsubmit-values-values-formikbag-formikbag--void)\n    * [`validate?: (values: Values) => FormikErrors<Values> | Promise<any>`](#validate-values-values--formikerrorsvalues--promiseany)\n    * [`validateOnBlur?: boolean`](#validateonblur-boolean)\n    * [`validateOnChange?: boolean`](#validateonchange-boolean)\n    * [`validationSchema?: Schema | (() => Schema)`](#validationschema-schema----schema)\n  * [`<Field />`](#field-)\n    * [`validate?: (value: any) => undefined | string | Promise<any>`](#validate-value-any--undefined--string--promiseany)\n    * [Refs](#refs)\n  * [`<FieldArray />`](#fieldarray-)\n    * [`name: string`](#name-string)\n    * [`validateOnChange?: boolean`](#validateonchange-boolean-1)\n    * [FieldArray Array of Objects](#fieldarray-array-of-objects)\n    * [FieldArray Validation Gotchas](#fieldarray-validation-gotchas)\n    * [FieldArray Helpers](#fieldarray-helpers)\n    * [FieldArray render methods](#fieldarray-render-methods)\n      * [`render: (arrayHelpers: ArrayHelpers) => React.ReactNode`](#render-arrayhelpers-arrayhelpers--reactreactnode)\n      * [`component: React.ReactNode`](#component-reactreactnode)\n  * [`<Form />`](#form-)\n  * [`withFormik(options)`](#withformikoptions)\n    * [`options`](#options)\n      * [`displayName?: string`](#displayname-string)\n      * [`enableReinitialize?: boolean`](#enablereinitialize-boolean-1)\n      * [`handleSubmit: (values: Values, formikBag: FormikBag) => void`](#handlesubmit-values-values-formikbag-formikbag--void)\n        * [The \"FormikBag\":](#the-formikbag)\n      * [`isInitialValid?: boolean | (props: Props) => boolean`](#isinitialvalid-boolean--props-props--boolean)\n      * [`mapPropsToValues?: (props: Props) => Values`](#mappropstovalues-props-props--values)\n      * [`validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`](#validate-values-values-props-props--formikerrorsvalues--promiseany)\n      * [`validateOnBlur?: boolean`](#validateonblur-boolean-1)\n      * [`validateOnChange?: boolean`](#validateonchange-boolean-2)\n      * [`validationSchema?: Schema | ((props: Props) => Schema)`](#validationschema-schema--props-props--schema)\n    * [Injected props and methods](#injected-props-and-methods)\n  * [`connect()`](#connect)\n* [Organizations and projects using Formik](#organizations-and-projects-using-formik)\n* [Authors](#authors)\n* [Contributors](#contributors)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Guides\n\n### Basics\n\nImagine you want to build a form that lets you edit user data. However, your\nuser API has nested objects like so.\n\n```js\n{\n   id: string,\n   email: string,\n   social: {\n     facebook: string,\n     twitter: string,\n     // ...\n   }\n}\n```\n\nWhen we are done we want our dialog to accept just a `user`, `updateUser`, and\n`onClose` props.\n\n```jsx\n// User.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({\n          values,\n          errors,\n          touched,\n          handleBlur,\n          handleChange,\n          handleSubmit,\n          isSubmitting,\n        }) => (\n          <form onSubmit={handleSubmit}>\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.email}\n            />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <input\n              type=\"text\"\n              name=\"social.facebook\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.facebook}\n            />\n            {errors.social &&\n              errors.social.facebook &&\n              touched.facebook && <div>{errors.social.facebook}</div>}\n            <input\n              type=\"text\"\n              name=\"social.twitter\"\n              onChange={handleChange}\n              onBlur={handleBlur}\n              value={values.social.twitter}\n            />\n            {errors.social &&\n              errors.social.twitter &&\n              touched.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\nTo make writing forms less verbose. Formik comes with a few helpers to save you\nkey strokes.\n\n* `<Field>`\n* `<Form />`\n\nThis is the **exact** same form as before, but written with `<Form />` and\n`<Field />`:\n\n```jsx\n// EditUserDialog.js\nimport React from 'react';\nimport Dialog from 'MySuperDialog';\nimport { Formik, Field, Form } from 'formik';\n\nconst EditUserDialog = ({ user, updateUser, onClose }) => {\n  return (\n    <Dialog onClose={onClose}>\n      <h1>Edit User</h1>\n      <Formik\n        initialValues={user /** { email, social } */}\n        onSubmit={(values, actions) => {\n          CallMyApi(user.id, values).then(\n            updatedUser => {\n              actions.setSubmitting(false);\n              updateUser(updatedUser), onClose();\n            },\n            error => {\n              actions.setSubmitting(false);\n              actions.setErrors(transformMyAPIErrorToAnObject(error));\n            }\n          );\n        }}\n        render={({ errors, touched, isSubmitting }) => (\n          <Form>\n            <Field type=\"email\" name=\"email\" />\n            {errors.email && touched.email && <div>{errors.email}</div>}\n            <Field type=\"text\" name=\"social.facebook\" />\n            {errors.social.facebook &&\n              touched.social.facebook && <div>{errors.social.facebook}</div>}\n            <Field type=\"text\" name=\"social.twitter\" />\n            {errors.social.twitter &&\n              touched.social.twitter && <div>{errors.social.twitter}</div>}\n            <button type=\"submit\" disabled={isSubmitting}>\n              Submit\n            </button>\n          </Form>\n        )}\n      />\n    </Dialog>\n  );\n};\n```\n\n### React Native\n\n**Formik is 100% compatible with React Native and React Native Web.** However,\nbecause of differences between ReactDOM's and React Native's handling of forms\nand text input, there are two differences to be aware of. This section will walk\nyou through them and what I consider to be best practices.\n\nBefore going any further, here's a super minimal gist of how to use Formik with\nReact Native that demonstrates the key differences:\n\n```jsx\n// Formik x React Native example\nimport React from 'react';\nimport { Button, TextInput, View } from 'react-native';\nimport { withFormik } from 'formik';\n\nconst enhancer = withFormik({\n  /*...*/\n});\n\nconst MyReactNativeForm = props => (\n  <View>\n    <TextInput\n      onChangeText={props.handleChange('email')}\n      onBlur={props.handleBlur('email')}\n      value={props.values.email}\n    />\n    <Button onPress={props.handleSubmit} title=\"Submit\" />\n  </View>\n);\n\nexport default enhancer(MyReactNativeForm);\n```\n\nAs you can see above, the notable differences between using Formik with React\nDOM and React Native are:\n\n1.  Formik's `props.handleSubmit` is passed to a `<Button onPress={...} />`\n    instead of HTML `<form onSubmit={...} />` component (since there is no\n    `<form />` element in React Native).\n2.  `<TextInput />` uses Formik's `props.handleChange(fieldName)` and `handleBlur(fieldName)` instead of directly     assigning the callbacks to props, because we have to get the `fieldName` from somewhere and with ReactNative we can't get it automatically like for web (using input name attribute). You can also use `setFieldValue(fieldName, value)` and `setTouched(fieldName, bool)` as an alternative.\n\n\n#### Avoiding new functions in render\n\nIf for any reason you wish to avoid creating new functions on each render, I\nsuggest treating React Native's `<TextInput />` as if it were another 3rd party\ncustom input element:\n\n* Write your own class wrapper around the custom input element\n* Pass the custom component [`props.setFieldValue`][`setfieldvalue`] instead of\n  [`props.handleChange`][`handlechange`]\n* Use a custom change handler callback that calls whatever you passed-in\n  `setFieldValue` as (in this case we'll match the React Native TextInput API\n  and call it `this.props.onChangeText` for parity).\n\n```jsx\n// FormikReactNativeTextInput.js\nimport * as React from 'react';\nimport { TextInput } from 'react-native';\n\nexport default class FormikReactNativeTextInput extends React.Component {\n  handleChange = (value: string) => {\n    // remember that onChangeText will be Formik's setFieldValue\n    this.props.onChangeText(this.props.name, value);\n  };\n\n  render() {\n    // we want to pass through all the props except for onChangeText\n    const { onChangeText, ...otherProps } = this.props;\n    return (\n      <TextInput\n        onChangeText={this.handleChange}\n        {...otherProps} // IRL, you should be more explicit when using TS\n      />\n    );\n  }\n}\n```\n\nThen you could just use this custom input as follows:\n\n```jsx\n// MyReactNativeForm.js\nimport { View, Button } from 'react-native';\nimport TextInput from './FormikReactNativeTextInput';\nimport { Formik } from 'formik';\n\nconst MyReactNativeForm = props => (\n  <View>\n    <Formik\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          console.log(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <View>\n          <TextInput\n            name=\"email\"\n            onChangeText={props.setFieldValue}\n            value={props.values.email}\n          />\n          <Button title=\"submit\" onPress={props.handleSubmit} />\n        </View>\n      )}\n    />\n  </View>\n);\n\nexport default MyReactNativeForm;\n```\n\n### Using Formik with TypeScript\n\n[![TypeScript Types](https://img.shields.io/npm/types/formik.svg)](https://npm.im/formik)\n\nThe Formik source code is written in TypeScript, so you can rest assured that\ntypes will always be up to date. As a mental model, Formik's types are very\nsimilar to React Router 4's `<Route>`.\n\n#### Render props (`<Formik />` and `<Field />`)\n\n```tsx\nimport * as React from 'react';\nimport { Formik, FormikProps, Form, Field, FieldProps } from 'formik';\n\ninterface MyFormValues {\n  firstName: string;\n}\n\nexport const MyApp: React.SFC<{} /* whatever */> = () => {\n  return (\n    <div>\n      <h1>My Example</h1>\n      <Formik\n        initialValues={{ firstName: '' }}\n        onSubmit={(values: MyFormValues) => alert(JSON.stringify(values))}\n        render={(formikBag: FormikProps<MyFormValues>) => (\n          <Form>\n            <Field\n              name=\"firstName\"\n              render={({ field, form }: FieldProps<MyFormValues>) => (\n                <div>\n                  <input type=\"text\" {...field} placeholder=\"First Name\" />\n                  {form.touched.firstName &&\n                    form.errors.firstName &&\n                    form.errors.firstName}\n                </div>\n              )}\n            />\n          </Form>\n        )}\n      />\n    </div>\n  );\n};\n```\n\n#### `withFormik()`\n\n```tsx\nimport React from 'react';\nimport * as Yup from 'yup';\nimport { withFormik, FormikProps, FormikErrors, Form, Field } from 'formik';\n\n// Shape of form values\ninterface FormValues {\n  email: string;\n  password: string;\n}\n\ninterface OtherProps {\n  message: string;\n}\n\n// You may see / user InjectedFormikProps<OtherProps, FormValues> instead of what comes below. They are the same--InjectedFormikProps was artifact of when Formik only exported an HOC. It is also less flexible as it MUST wrap all props (it passes them through).\nconst InnerForm = (props: OtherProps & FormikProps<FormValues>) => {\n  const { touched, errors, isSubmitting, message } = props;\n  return (\n    <Form>\n      <h1>{message}</h1>\n      <Field type=\"email\" name=\"email\" />\n      {touched.email && errors.email && <div>{errors.email}</div>}\n\n      <Field type=\"password\" name=\"password\" />\n      {touched.password && errors.password && <div>{errors.password}</div>}\n\n      <button type=\"submit\" disabled={isSubmitting}>\n        Submit\n      </button>\n    </Form>\n  );\n};\n\n// The type of props MyForm receives\ninterface MyFormProps {\n  initialEmail?: string;\n  message: string; // if this passed all the way through you might do this or make a union type\n}\n\n// Wrap our form with the using withFormik HoC\nconst MyForm = withFormik<MyFormProps, FormValues>({\n  // Transform outer props into form values\n  mapPropsToValues: props => {\n    return {\n      email: props.initialEmail || '',\n      password: '',\n    };\n  },\n\n  // Add a custom validation function (this can be async too!)\n  validate: (values: FormValues) => {\n    let errors: FormikErrors = {};\n    if (!values.email) {\n      errors.email = 'Required';\n    } else if (!isValidEmail(values.email)) {\n      errors.email = 'Invalid email address';\n    }\n    return errors;\n  },\n\n  handleSubmit: values => {\n    // do submitting things\n  },\n})(InnerForm);\n\n// Use <MyForm /> anywhere\nconst Basic = () => (\n  <div>\n    <h1>My App</h1>\n    <p>This can be anywhere in your application</p>\n    <MyForm message=\"Sign up\" />\n  </div>\n);\n\nexport default Basic;\n```\n\n### How Form Submission Works\n\nTo submit a form in Formik, you need to somehow fire off the provided `handleSubmit(e)` or `submitForm` prop. When you call either of these methods, Formik will execute the following _(pseudo code)_ each time:\n\n* \"Pre-submit\"\n  * Touch all fields\n  * Set `isSubmitting` to `true`\n  * Increment `submitCount` + 1\n* \"Validation\"\n  * Set `isValidating` to `true`\n  * Run all field-level validations, `validate`, and `validationSchema` asynchronously and deeply merge results\n  * Are there any errors?\n    * Yes: Abort submission. Set `isValidating` to `false`, set `errors`, set `isSubmitting` to `false`\n    * No: Set `isValidating` to `false`, proceed to \"Submission\"\n* \"Submission\"\n  * Proceed with running your submission handler (i.e.`onSubmit` or `handleSubmit`)\n  * _you call `setSubmitting(false)`_ in your handler to finish the cycle\n\n#### Frequently Asked Questions\n\n<details>\n<summary>How do I determine if my submission handler is executing?</summary>\n\nIf `isValidating` is `false` and `isSubmitting` is `true`.\n\n</details>\n\n<details>\n<summary>Why does Formik touch all fields before submit?</summary>\n\nIt is common practice to only show an input's errors in the UI if it has been visited (a.k.a \"touched\"). Before submitting a form, Formik touches all fields so that all errors that may have been hidden will now be visible.\n\n</details>\n\n<details>\n<summary>How do I protect against double submits?</summary>\n\nDisable whatever is triggering submission if `isSubmitting` is `true`.\n\n</details>\n<details>\n<summary>How do I know when my form is validating before submit?</summary>\n\nIf `isValidating` is `true` and `isSubmitting` is `true`.\n\n</details>\n\n## API\n\n### `<Formik />`\n\n`<Formik>` is a component that helps you with building forms. It uses a render\nprops pattern made popular by libraries like React Motion and React Router.\n\n```jsx\nimport React from 'react';\nimport { Formik } from 'formik';\n\nconst BasicExample = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ name: 'jared' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            value={props.values.name}\n            name=\"name\"\n          />\n          {props.errors.name && <div id=\"feedback\">{props.errors.name}</div>}\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n```\n\n#### Formik render methods\n\nThere are three ways to render things with `<Formik />`\n\n* `<Formik component>`\n* `<Formik render>`\n* `<Formik children>`\n\n#### Formik props\n\nAll three render methods will be passed the same props:\n\n##### `dirty: boolean`\n\nReturns `true` if values are not deeply equal from initial values, `false` otherwise.\n`dirty` is a readonly computed property and should not be mutated directly.\n\n##### `errors: { [field: string]: string }`\n\nForm validation errors. Should match the shape of your form's [`values`] defined\nin `initialValues`. If you are using [`validationSchema`] (which you should be),\nkeys and shape will match your schema exactly. Internally, Formik transforms raw\n[Yup validation errors](https://github.com/jquense/yup#validationerrorerrors-string--arraystring-value-any-path-string)\non your behalf. If you are using [`validate`], then that function will determine\nthe `errors` objects shape.\n\n##### `handleBlur: (e: any) => void`\n\n`onBlur` event handler. Useful for when you need to track whether an input has\nbeen [`touched`] or not. This should be passed to `<input onBlur={handleBlur} ... />`\n\nDOM-only. Use [`setFieldTouched`] in React Native.\n\n##### `handleChange: (e: React.ChangeEvent<any>) => void`\n\nGeneral input change event handler. This will update the `values[key]` where\n`key` is the event-emitting input's `name` attribute. If the `name` attribute is\nnot present, `handleChange` will look for an input's `id` attribute. Note:\n\"input\" here means all HTML inputs.\n\nDOM-only. Use [`setFieldValue`] in React Native.\n\n##### `handleReset: () => void`\n\nReset handler. Will reset the form to its initial state. This should be passed\nto `<button onClick={handleReset}>...</button>`\n\n##### `handleSubmit: (e: React.FormEvent<HTMLFormEvent>) => void`\n\nSubmit handler. This should be passed to `<form onSubmit={props.handleSubmit}>...</form>`. To learn more about the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `isSubmitting: boolean`\n\nSubmitting state of the form. Returns `true` if submission is in progress and `false` otherwise. IMPORTANT: Formik will set this to `true` as soon as submission is _attempted_. To learn more about the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `isValid: boolean`\n\nReturns `true` if the there are no [`errors`], or the result of\n[`isInitialValid`] the form if is in \"pristine\" condition (i.e. not [`dirty`])).\n\n##### `isValidating: boolean`\n\nReturns `true` if Formik is running any validation function, `false` otherwise. To learn more about what happens with `isValidating` during the submission process, see [How Form Submission Works](#how-form-submission-works).\n\n##### `resetForm: (nextValues?: Values) => void`\n\nImperatively reset the form. This will clear [`errors`] and [`touched`], set\n[`isSubmitting`] to `false`, `isValidating` to `false`, and rerun `mapPropsToValues` with the current\n`WrappedComponent`'s `props` or what's passed as an argument. The latter is\nuseful for calling `resetForm` within `componentWillReceiveProps`.\n\n##### `setErrors: (fields: { [field: string]: string }) => void`\n\nSet `errors` imperatively.\n\n##### `setFieldError: (field: string, errorMsg: string) => void`\n\nSet the error message of a field imperatively. `field` should match the key of\n[`errors`] you wish to update. Useful for creating custom input error handlers.\n\n##### `setFieldTouched: (field: string, isTouched: boolean, shouldValidate?: boolean) => void`\n\nSet the touched state of a field imperatively. `field` should match the key of\n[`touched`] you wish to update. Useful for creating custom input blur handlers. Calling this method will trigger validation to run if [`validateOnBlur`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `submitForm: () => void`\n\nTrigger a form submission.\n\n##### `submitCount: number`\n\nNumber of times user tried to submit the form. Increases when [`handleSubmit`](#handlesubmit-values-values-formikbag-formikbag--void) is called, resets after calling\n[`handleReset`](#handlereset---void). `submitCount` is readonly computed property and should not be mutated directly.\n\n##### `setFieldValue: (field: string, value: any, shouldValidate?: boolean) => void`\n\nSet the value of a field imperatively. `field` should match the key of\n[`values`] you wish to update. Useful for creating custom input change handlers. Calling this will trigger validation to run if [`validateOnChange`] is set to `true` (which it is by default). You can also explicitly prevent/skip validation by passing a third argument as `false`.\n\n##### `setStatus: (status?: any) => void`\n\nSet a top-level [`status`] to anything you want imperatively. Useful for\ncontrolling arbitrary top-level state related to your form. For example, you can\nuse it to pass API responses back into your component in [`handleSubmit`].\n\n##### `setSubmitting: (isSubmitting: boolean) => void`\n\nSet [`isSubmitting`] imperatively.\n\n##### `setTouched: (fields: { [field: string]: boolean }) => void`\n\nSet [`touched`] imperatively.\n\n##### `setValues: (fields: { [field: string]: any }) => void`\n\nSet [`values`] imperatively.\n\n##### `status?: any`\n\nA top-level status object that you can use to represent form state that can't\notherwise be expressed/stored with other methods. This is useful for capturing\nand passing through API responses to your inner component.\n\n`status` should only be modifed by calling\n[`setStatus: (status?: any) => void`](#setstatus-status-any--void)\n\n##### `touched: { [field: string]: boolean }`\n\nTouched fields. Each key corresponds to a field that has been touched/visited.\n\n##### `values: { [field: string]: any }`\n\nYour form's values. Will have the shape of the result of [`mapPropsToValues`]\n(if specified) or all props that are not functions passed to your wrapped\ncomponent.\n\n##### `validateForm: (values?: any) => void`\n\nImperatively call your [`validate`] or [`validateSchema`] depending on what was specified. You can optionally pass values to validate against and this modify Formik state accordingly, otherwise this will use the current `values` of the form.\n\n#### `validateField: (field: string) => void`\n\nImperatively call field's [`validate`] function if specified for given field. Formik will use the current field value.\n\n#### `component`\n\n```jsx\n<Formik component={ContactForm} />;\n\nconst ContactForm = ({\n  handleSubmit,\n  handleChange,\n  handleBlur,\n  values,\n  errors,\n}) => (\n  <form onSubmit={handleSubmit}>\n    <input\n      type=\"text\"\n      onChange={handleChange}\n      onBlur={handleBlur}\n      value={values.name}\n      name=\"name\"\n    />\n    {errors.name && <div>{errors.name}</div>}\n    <button type=\"submit\">Submit</button>\n  </form>\n};\n```\n\n**Warning:** `<Formik component>` takes precendence over `<Formik render>` so\ndon’t use both in the same `<Formik>`.\n\n#### `render: (props: FormikProps<Values>) => ReactNode`\n\n```jsx\n<Formik render={props => <ContactForm {...props} />} />\n\n<Formik\n  render={({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n/>\n```\n\n#### `children: func`\n\n```jsx\n<Formik children={props => <ContactForm {...props} />} />\n\n// or...\n\n<Formik>\n  {({ handleSubmit, handleChange, handleBlur, values, errors }) => (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        onChange={handleChange}\n        onBlur={handleBlur}\n        value={values.name}\n        name=\"name\"\n      />\n      {errors.name &&\n        <div>\n          {errors.name}\n        </div>}\n      <button type=\"submit\">Submit</button>\n    </form>\n  )}\n</Formik>\n```\n\n#### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if\n[`initialValues`] changes (using deep equality).\n\n#### `isInitialValid?: boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n#### `initialValues?: Values`\n\nInitial field values of the form, Formik will make these values available to\nrender methods component as [`props.values`][`values`].\n\nEven if your form is empty by default, you must initialize all fields with\ninitial values otherwise React will throw an error saying that you have changed\nan input from uncontrolled to controlled.\n\nNote: `initialValues` not available to the higher-order component, use\n[`mapPropsToValues`] instead.\n\n#### `onReset?: (values: Values, formikBag: FormikBag) => void`\n\nYour optional form reset handler. It is passed your forms [`values`] and the\n\"FormikBag\".\n\n#### `onSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n#### `validate?: (values: Values) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1.  Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error in an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n#### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n#### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n#### `validationSchema?: Schema | (() => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n### `<Field />`\n\n`<Field />` will automagically hook up inputs to Formik. It uses the `name`\nattribute to match up with Formik state. `<Field />` will default to an\n`<input />` element. To change the underlying element of `<Field />`, specify a\n`component` prop. It can either be a string like `select` or another React\ncomponent. `<Field />` can also take a `render` prop.\n\n```jsx\nimport React from 'react';\nimport { Formik, Field } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red', firstName: '' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      render={(props: FormikProps<Values>) => (\n        <form onSubmit={props.handleSubmit}>\n          <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n          <Field component=\"select\" name=\"color\">\n            <option value=\"red\">Red</option>\n            <option value=\"green\">Green</option>\n            <option value=\"blue\">Blue</option>\n          </Field>\n          <Field name=\"firstName\" component={CustomInputComponent} />\n          <Field\n            name=\"lastName\"\n            render={({ field /* _form */ }) => (\n              <input {...field} placeholder=\"firstName\" />\n            )}\n          />\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    />\n  </div>\n);\n\nconst CustomInputComponent: React.SFC<\n  FieldProps<Values> & CustomInputProps\n> = ({\n  field, // { name, value, onChange, onBlur }\n  form: { touched, errors }, // also values, setXXXX, handleXXXX, dirty, isValid, status, etc.\n  ...props\n}) => (\n  <div>\n    <input type=\"text\" {...field} {...props} />\n    {touched[field.name] &&\n      errors[field.name] && <div className=\"error\">{errors[field.name]}</div>}\n  </div>\n);\n```\n\n#### `validate?: (value: any) => undefined | string | Promise<any>`\n\nYou can run independent field-level validations by passing a function to the\n`validate` prop. The function will respect the [`validateOnBlur`] and\n[`validateOnChange`] config/props specified in the `<Field>'s` parent `<Formik>`\n/ `withFormik`. This function can be either be:\n\n* Synchronous and if invalid, return a `string` containing the error message or\n  return `undefined`.\n\n```js\n// Synchronous validation for Field\nconst validate = value => {\n  let errorMessage;\n  if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) {\n    errorMessage = 'Invalid email address';\n  }\n  return errorMessage;\n};\n```\n\n* async: Return a Promise that throws a `string` containing the error message.\n  This works like Formik's [`validate`], but instead of returning an [`errors`]\n  object, it's just a `string`.\n\n* Asynchronous and return a Promise that's error is an string with the error\n  message\n\n```js\n// Async validation for Field\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = value => {\n  return sleep(2000).then(() => {\n    if (['admin', 'null', 'god'].includes(value)) {\n      throw 'Nice try';\n    }\n  });\n};\n```\n\nNote: To allow for i18n libraries, the TypeScript typings for `validate` are\nslightly relaxed and allow you to return a `Function` (e.g. `i18n('invalid')`).\n\n#### Refs\n\nWhen you are **not** using a custom component and you need to access the underlying DOM node created by `Field` (e.g. to call `focus`), pass the callback to the `innerRef` prop instead.\n\n### `<FieldArray />`\n\n`<FieldArray />` is a component that helps with common array/list manipulations. You pass it a `name` property with the path to the key within `values` that holds the relevant array. `<FieldArray />` will then give you access to array helper methods via render props. For convenience, calling these methods will trigger validation and also manage `touched` for you.\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik';\n\n// Here is an example of a form with an editable list.\n// Next to each input are buttons for insert and remove.\n// If the list is empty, there is a button to add an item.\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={values =>\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n        }, 500)\n      }\n      render={({ values }) => (\n        <Form>\n          <FieldArray\n            name=\"friends\"\n            render={arrayHelpers => (\n              <div>\n                {values.friends && values.friends.length > 0 ? (\n                  values.friends.map((friend, index) => (\n                    <div key={index}>\n                      <Field name={`friends.${index}`} />\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.remove(index)} // remove a friend from the list\n                      >\n                        -\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => arrayHelpers.insert(index, '')} // insert an empty string at a position\n                      >\n                        +\n                      </button>\n                    </div>\n                  ))\n                ) : (\n                  <button type=\"button\" onClick={() => arrayHelpers.push('')}>\n                    {/* show this when user has removed all friends from the list */}\n                    Add a friend\n                  </button>\n                )}\n                <div>\n                  <button type=\"submit\">Submit</button>\n                </div>\n              </div>\n            )}\n          />\n        </Form>\n      )}\n    />\n  </div>\n);\n```\n\n##### `name: string`\n\nThe name or path to the relevant key in [`values`].\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Determines if form validation should or should not be run _after_ any array manipulations.\n\n#### FieldArray Array of Objects\n\nYou can also iterate through an array of objects, by following a convention of `object[index]property` or `object.index.property` for the name attributes of `<Field />` or `<input />` elements in `<FieldArray />`.\n\n```jsx\n<Form>\n  <FieldArray\n    name=\"friends\"\n    render={arrayHelpers => (\n      <div>\n        {values.friends.map((friend, index) => (\n          <div key={index}>\n            <Field name={`friends[${index}]name`} />\n            <Field name={`friends.${index}.age`} /> // both these conventions do\n            the same\n            <button type=\"button\" onClick={() => arrayHelpers.remove(index)}>\n              -\n            </button>\n          </div>\n        ))}\n        <button\n          type=\"button\"\n          onClick={() => arrayHelpers.push({ name: '', age: '' })}\n        >\n          +\n        </button>\n      </div>\n    )}\n  />\n</Form>\n```\n\n#### FieldArray Validation Gotchas\n\nValidation can be tricky with `<FieldArray>`.\n\nIf you use [`validationSchema`] and your form has array validation requirements (like a min length) as well as nested array field requirements, displaying errors can be tricky. Formik/Yup will show validation errors inside out. For example,\n\n```js\nconst schema = Yup.object().shape({\n  friends: Yup.array()\n    .of(\n      Yup.object().shape({\n        name: Yup.string()\n          .min(4, 'too short')\n          .required('Required'), // these constraints take precedence\n        salary: Yup.string()\n          .min(3, 'cmon')\n          .required('Required'), // these constraints take precedence\n      })\n    )\n    .required('Must have friends') // these constraints are shown if and only if inner constraints are satisfied\n    .min(3, 'Minimum of 3 friends'),\n});\n```\n\nSince Yup and your custom validation function should always output error messages as strings, you'll need to sniff whether your nested error is an array or a string when you go to display it.\n\nSo...to display `'Must have friends'` and `'Minimum of 3 friends'` (our example's array validation contstraints)...\n\n**_Bad_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  errors.friends ? <div>{errors.friends}</div> : null; // app will crash\n```\n\n**_Good_**\n\n```js\n// within a `FieldArray`'s render\nconst FriendArrayErrors = errors =>\n  typeof errors.friends === 'string' ? <div>{errors.friends}</div> : null;\n```\n\nFor the nested field errors, you should assume that no part of the object is defined unless you've checked for it. Thus, you may want to do yourself a favor and make a custom `<ErrorMessage />` component that looks like this:\n\n```jsx\nimport { Field, getIn } from 'formik';\n\nconst ErrorMessage = ({ name }) => (\n  <Field\n    name={name}\n    render={({ form }) => {\n      const error = getIn(form.errors, name);\n      const touch = getIn(form.touched, name);\n      return touch && error ? error : null;\n    }}\n  />\n);\n\n// Usage\n<ErrorMessage name=\"friends[0].name\" />; // => null, 'too short', or 'required'\n```\n\n_NOTE_: In Formik v0.12 / 1.0, a new `meta` prop may be added to `Field` and `FieldArray` that will give you relevant metadata such as `error` & `touch`, which will save you from having to use Formik or lodash's getIn or checking if the path is defined on your own.\n\n#### FieldArray Helpers\n\nThe following methods are made available via render props.\n\n* `push: (obj: any) => void`: Add a value to the end of an array\n* `swap: (indexA: number, indexB: number) => void`: Swap two values in an array\n* `move: (from: number, to: number) => void`: Move an element in an array to another index\n* `insert: (index: number, value: any) => void`: Insert an element at a given index into the array\n* `unshift: (value: any) => number`: Add an element to the beginning of an array and return its length\n* `remove<T>(index: number): T | undefined`: Remove an element at an index of an array and return it\n* `pop<T>(): T | undefined`: Remove and return value from the end of the array\n\n#### FieldArray render methods\n\nThere are three ways to render things with `<FieldArray />`\n\n* `<FieldArray name=\"...\" component>`\n* `<FieldArray name=\"...\" render>`\n\n##### `render: (arrayHelpers: ArrayHelpers) => React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          render={({ move, swap, push, insert, unshift, pop }) => (\n            <Form>\n              {/*... use these however you want */}\n            </Form>\n          )}\n        />\n    />\n  </div>\n);\n```\n\n##### `component: React.ReactNode`\n\n```jsx\nimport React from 'react';\nimport { Formik, Form, Field, FieldArray } from 'formik'\n\n\nexport const FriendList = () => (\n  <div>\n    <h1>Friend List</h1>\n    <Formik\n      initialValues={{ friends: ['jared', 'ian', 'brent'] }}\n      onSubmit={...}\n      render={formikProps => (\n        <FieldArray\n          name=\"friends\"\n          component={MyDynamicForm}\n        />\n    />\n  </div>\n);\n\n\n// In addition to the array helpers, Formik state and helpers\n// (values, touched, setXXX, etc) are provided through a `form`\n// prop\nexport const MyDynamicForm = ({\n  move, swap, push, insert, unshift, pop, form\n}) => (\n <Form>\n  {/**  whatever you need to do */}\n </Form>\n);\n```\n\n### `<Form />`\n\nLike `<Field />`, `<Form />` is a helper component you can use to save time. It is\ntiny wrapper around `<form onSubmit={context.formik.handleSubmit} />`. This\nmeans you don't need to explictly type out `<form onSubmit={props.handleSubmit} />` if you don't want to.\n\n**ReactDOM only**\n\n```jsx\nimport React from 'react';\nimport { Formik, Field, Form } from 'formik';\n\nconst Example = () => (\n  <div>\n    <h1>My Form</h1>\n    <Formik\n      initialValues={{ email: '', color: 'red' }}\n      onSubmit={(values, actions) => {\n        setTimeout(() => {\n          alert(JSON.stringify(values, null, 2));\n          actions.setSubmitting(false);\n        }, 1000);\n      }}\n      component={MyForm}\n    />\n  </div>\n);\n\nconst MyForm = () => (\n  <Form>\n    <Field type=\"email\" name=\"email\" placeholder=\"Email\" />\n    <Field component=\"select\" name=\"color\">\n      <option value=\"red\">Red</option>\n      <option value=\"green\">Green</option>\n      <option value=\"blue\">Blue</option>\n    </Field>\n    <button type=\"submit\">Submit</button>\n  </Form>\n);\n```\n\n### `withFormik(options)`\n\nCreate a higher-order React component class that passes props and form handlers\n(the \"`FormikBag`\") into your component derived from supplied options.\n\n#### `options`\n\n##### `displayName?: string`\n\nWhen your inner form component is a stateless functional component, you can use\nthe `displayName` option to give the component a proper name so you can more\neasily find it in\n[React DevTools](https://chrome.google.com/webstore/detail/react-developer-tools/fmkadmapgofadopljbjfkapdkoienihi?hl=en).\nIf specified, your wrapped form will show up as `Formik(displayName)`. If\nomitted, it will show up as `Formik(Component)`. This option is not required for\nclass components (e.g. `class XXXXX extends React.Component {..}`).\n\n##### `enableReinitialize?: boolean`\n\nDefault is `false`. Control whether Formik should reset the form if the wrapped\ncomponent props change (using deep equality).\n\n##### `handleSubmit: (values: Values, formikBag: FormikBag) => void`\n\nYour form submission handler. It is passed your forms [`values`] and the\n\"FormikBag\", which includes an object containing a subset of the\n[injected props and methods](#injected-props-and-methods) (i.e. all the methods\nwith names that start with `set<Thing>` + `resetForm`) and any props that were\npassed to the the wrapped component.\n\n###### The \"FormikBag\":\n\n* `props` (props passed to the wrapped component)\n* [`resetForm`]\n* [`setErrors`]\n* [`setFieldError`]\n* [`setFieldTouched`]\n* [`setFieldValue`]\n* [`setStatus`]\n* [`setSubmitting`]\n* [`setTouched`]\n* [`setValues`]\n\nNote: [`errors`], [`touched`], [`status`] and all event handlers are NOT\nincluded in the `FormikBag`.\n\n##### `isInitialValid?: boolean | (props: Props) => boolean`\n\nDefault is `false`. Control the initial value of [`isValid`] prop prior to\nmount. You can also pass a function. Useful for situations when you want to\nenable/disable a submit and reset buttons on initial mount.\n\n##### `mapPropsToValues?: (props: Props) => Values`\n\nIf this option is specified, then Formik will transfer its results into\nupdatable form state and make these values available to the new component as\n[`props.values`][`values`]. If `mapPropsToValues` is not specified, then Formik\nwill map all props that are not functions to the inner component's\n[`props.values`][`values`]. That is, if you omit it, Formik will only pass\n`props` where `typeof props[k] !== 'function'`, where `k` is some key.\n\nEven if your form is not receiving any props from its parent, use\n`mapPropsToValues` to initialize your forms empty state.\n\n##### `validate?: (values: Values, props: Props) => FormikErrors<Values> | Promise<any>`\n\n_Note: I suggest using [`validationSchema`] and Yup for validation. However,\n`validate` is a dependency-free, straightforward way to validate your forms._\n\nValidate the form's [`values`] with function. This function can either be:\n\n1.  Synchronous and return an [`errors`] object.\n\n```js\n// Synchronous validation\nconst validate = (values, props) => {\n  let errors = {};\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  //...\n\n  return errors;\n};\n```\n\n* Asynchronous and return a Promise that's error is an [`errors`] object\n\n```js\n// Async Validation\nconst sleep = ms => new Promise(resolve => setTimeout(resolve, ms));\n\nconst validate = (values, props) => {\n  return sleep(2000).then(() => {\n    let errors = {};\n    if (['admin', 'null', 'god'].includes(values.username)) {\n      errors.username = 'Nice try';\n    }\n    // ...\n    if (Object.keys(errors).length) {\n      throw errors;\n    }\n  });\n};\n```\n\n##### `validateOnBlur?: boolean`\n\nDefault is `true`. Use this option to run validations on `blur` events. More\nspecifically, when either [`handleBlur`], [`setFieldTouched`], or [`setTouched`]\nare called.\n\n##### `validateOnChange?: boolean`\n\nDefault is `true`. Use this option to tell Formik to run validations on `change`\nevents and `change`-related methods. More specifically, when either\n[`handleChange`], [`setFieldValue`], or [`setValues`] are called.\n\n##### `validationSchema?: Schema | ((props: Props) => Schema)`\n\n[A Yup schema](https://github.com/jquense/yup) or a function that returns a Yup\nschema. This is used for validation. Errors are mapped by key to the inner\ncomponent's [`errors`]. Its keys should match those of [`values`].\n\n#### Injected props and methods\n\nThese are identical to the props of `<Formik render={props => ...} />`\n\n### `connect()`\n\n`connect()` is a higher-order component that injects raw Formik context as prop called `formik` into the inner component. Fun fact: Formik uses `connect()` under the hood to wire up `<Field/>`, `<FastField>`, and `<Form>`. Advanced users may find it useful to use `connect()` when building custom components.\n\n```js\nimport { connect } from 'formik';\n\nconst SubmitCount = ({ formik }) => <div>{formik.submitCount}</div>;\n\nexport default connect(SubmitCount);\n```\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub>Jared Palmer</sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer 'Answering Questions') [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Code') [🎨](#design-jaredpalmer 'Design') [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Documentation') [💡](#example-jaredpalmer 'Examples') [🤔](#ideas-jaredpalmer 'Ideas, Planning, & Feedback') [👀](#review-jaredpalmer 'Reviewed Pull Requests') [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer 'Tests') | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub>Ian White</sub>](https://www.stardog.io)<br />[💬](#question-eonwhite 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite 'Code') [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite 'Documentation') [🤔](#ideas-eonwhite 'Ideas, Planning, & Feedback') [👀](#review-eonwhite 'Reviewed Pull Requests') | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub>Andrej Badin</sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco 'Documentation') | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub>Adam Howard</sub>](http://adz.co.de)<br />[💬](#question-skattyadz 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz 'Bug reports') [🤔](#ideas-skattyadz 'Ideas, Planning, & Feedback') [👀](#review-skattyadz 'Reviewed Pull Requests') | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub>Vlad Shcherbin</sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin 'Answering Questions') [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin 'Bug reports') [🤔](#ideas-VladShcherbin 'Ideas, Planning, & Feedback') | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub>Brikou CARRE</sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=brikou 'Documentation') | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub>Sam Kvale</sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=skvale 'Code') [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale 'Tests') |\n| :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: || :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: | :------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------: |\n|                                                                                                                                                             [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub>Jon Tansey</sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey 'Bug reports') [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey 'Code')                                                                                                                                                             |                                                                                                       [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub>Tyler Martinez</sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler 'Bug reports') [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler 'Documentation')                                                                                                       |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n\n[`displayname`]: #displayname-string\n[`handlesubmit`]: #handlesubmit-payload-formikbag--void\n[`formikbag`]: #the-formikbag\n[`isinitialvalid`]: #isinitialvalid-boolean--props-props--boolean\n[`mappropstovalues`]: #mappropstovalues-props--props\n[`validate`]: #validate-values-values-props-props--formikerrorvalues--promiseany\n[`validateonblur`]: #validateonblur-boolean\n[`validateonchange`]: #validateonchange-boolean\n[`validationschema`]: #validationschema-schema--props-props--schema\n[injected props and methods]: #injected-props-and-methods\n[`dirty`]: #dirty-boolean\n[`errors`]: #errors--field-string-string-\n[`handleblur`]: #handleblur-e-any--void\n[`handlechange`]: #handlechange-e-reactchangeeventany--void\n[`handlereset`]: #handlereset---void\n[`handlesubmit`]: #handlesubmit-e-reactformeventhtmlformevent--void\n[`issubmitting`]: #issubmitting-boolean\n[`isvalid`]: #isvalid-boolean\n[`resetform`]: #resetform-nextprops-props--void\n[`seterrors`]: #seterrors-fields--field-string-string---void\n[`setfielderror`]: #setfielderror-field-string-errormsg-string--void\n[`setfieldtouched`]: #setfieldtouched-field-string-istouched-boolean-shouldvalidate-boolean--void\n[`setfieldvalue`]: #setfieldvalue-field-string-value-any-shouldvalidate-boolean--void\n[`setstatus`]: #setstatus-status-any--void\n[`setsubmitting`]: #setsubmitting-boolean--void\n[`settouched`]: #settouched-fields--field-string-boolean---void\n[`setvalues`]: #setvalues-fields--field-string-any---void\n[`status`]: #status-any\n[`touched`]: #touched--field-string-boolean-\n[`values`]: #values--field-string-any-\n","readmeFilename":"README.md","gitHead":"afd992b8b1a432ba210ea69d45d17d3cb54fd41c","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.1.0","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-SH5HwIrUMyGnCS0E5B+y8pUzFb58ed3UZb2sjxqwASXbf/yT/7kgMUvY8pdnPIzjwZ7njxO/F7GXP3uQzZfnCQ==","shasum":"6bd1bb27271a50715e28f6abe66a561db19492f7","tarball":"https://registry.npmjs.org/formik/-/formik-1.1.0.tgz","fileCount":25,"unpackedSize":1389569,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbgAAvCRA9TVsSAnZWagAA2JUP/i06sHc6eWYX6fj8SceH\n4/ov5fsMi39Iqpk4MQb80CPhUOAUBTgbbNrghGquPCVMRvJqi/rqRzyA/mTU\nkgVYc9miKGDZmwnatDTv3Mz7iLc2IB0ZYZ3zK5eziLsU+aPbNVnlr/ZhXwDu\nD/prhyX1BnylgET2/TznQI8nOVMG0jslBQfaFQMkEq7B3SABahyf03QI/eSF\nc5hPyZj/XQB6dSvGg+nE1L7jaoi8pwWRkBHcmF/gEPqXlQKSBaDqson+6VVa\nfQ8Z3GEqFgv6RmEGq5idvCb+I9ish/P6X0WQpwHYVaa3Jkyr7Sj8O/0dpC1X\nbgTS1xaG/+8OnQznDgkdgZfpE32jYOMjXnYYjJu4l42A6kPli+ow9MIe7B7S\npYQxALtPWyPNoQYEqSG12dCyWkytnfvdqWEYpoJtNH9Kl/i+KgmkwxIXBDjA\nJ39PRE/O8ZW+tZORFhlXVw5HObVtGoykLUB6iZdF6Pxo/9sJYhEjCovtThav\nksC9Dvq/Ii8SDjnSDjfBZO6ZQ7c4pnNOwERs47cvmkwD7WVBc5LjBIbXbagg\nvDo/56ZZrJevTw2MtHx9JfaLx78tRhcGZU/1qsVYLcxWWuTrwjRBgmMESKKS\nkAYeVtozAmF0q330qU1T4Rc4PlHAuh9Hj4qFk2krmqk3KU2A+bPC02+YKeaO\nuH3h\r\n=Qfaz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC+WU+NYkJehXEhCX3pnuNa+oMu4RL588KxL0PvGxeuygIhAKYu3T5ihUdkroEZkDRmf66kvezBtxRUrvsr7q8qo2n1"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.1.0_1535115311079_0.7614081424775092"},"_hasShrinkwrap":false},"1.1.1":{"name":"formik","description":"Forms in React, without tears","version":"1.1.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","files":["dist"],"peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"a35fba4951992e7af8eb37cbf73dac83e2817fe7","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.1.1","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-B1uCqH7+FJn+q7DWp4nBQ7xYoICh01ll4mDPv4Y9emne3IMPmAWj7UR92Td7jxmd+woKkD/3lxJzzb9gWv54HA==","shasum":"078e6b7ff09d040ad63a30058e1ce8f1c0ad59cb","tarball":"https://registry.npmjs.org/formik/-/formik-1.1.1.tgz","fileCount":25,"unpackedSize":1389541,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbgAIqCRA9TVsSAnZWagAAA2UP/2swIxAPH/TiF07RGSGF\nxHjrkT5VZOHXzcLXI7vlkAk5QaCp46Wp76B9Hu/Xr/+cRQf6/oZoP/tObqJo\nYf08/GiOJt3k7YOg0/a9muDlKhM9z4FF18OrzOzdBFBodli6UeTH4mB1NcAE\nhcCdwFTTtk1rlbFKjee5gthFMMzECfqBvB9K5n1zDQtRq8I6tudND5CNEsdo\nqxMSGL4fydWBmx/e0tSJCnfSt/sGidw7HSqZOKsKSZOGwKIk7gN9rJ6XBdQ0\nG9xo/dm5XGQhZJnMP/uaWv7uruGxFmjYIupt7MpUMqTSX5SIaM2x30pJOird\nrvtm+BHNc1xMEuFFjzsrBgkVJs8kbccI8ZPuqc3kKoeVPpWfZ+oITRW2bYq8\nBAzHZXJTJptSSweo+KkpJCzG189LmIPXIs3mVA+yizgj6L1z3Xlr/LRQa7B1\nJzbl+yks6mLd7V4fBkYMlglYxvkoKQqev5pSMjJNhHL/Fz4S7MTnw1uxaKmP\nSjqTXVmEOz0ziekAk+8aNCfaV1fVQtScWYpj38IpXAwwNinYPB1wHnp7nTax\nkNOvXCvag4iNyociLujHgzcrSQ3kDjxxmhNp8fa8+qbZe9REJbi5M16p1zO7\n+25uGsP8PzUWfHBOzGpwdcdW1Aa23FK0W2cZkpO9eF7QbpHgjPVoaQoUo3KM\nrpc2\r\n=lHaE\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDGGazBQN7jYHSELSkKJOYWW+tQLt3Qp2laPtpU2ouZPgIhALfNunT3AAmy1DtwcJzDIaeJO6LbHaYxUMz0FpuNq5OE"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.1.1_1535115817401_0.6761753449769996"},"_hasShrinkwrap":false},"1.1.2":{"name":"formik","description":"Forms in React, without tears","version":"1.1.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"53ef1c42f49fc0944b32c4d4041258369b63ae03","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.1.2","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-A/0gEJh+7ya52QQiB/VWG86+oy2R6P54VXMU01NKZSPioDlIkTjy3wA8tOqUCrDafnxVIfOqZNRs13SMlj4y8A==","shasum":"7e3f99fdff31d975e5079bd8159c4846dcb4b8cc","tarball":"https://registry.npmjs.org/formik/-/formik-1.1.2.tgz","fileCount":25,"unpackedSize":1367883,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbjvtuCRA9TVsSAnZWagAA0soP/jSpxWH0iDcZnFMPr/SD\nnqFMlCoa2nzwXJXXYPQusLHQDD4OAx8/rxkzqzdFZT2Jxbo1knVNKBEjHe6b\nsdMM2bBjXssrUsFighQWVq1ZuIGj8yBR1Et+RSQik2QK1t2C4oUmqW37wQ4P\nV1/Zcxf7LMHQdX5XYOqyTNL74O99DMINvkLTZnxmiXHXhIuHmGKE+kz18zsF\nQMd2ehDPOjbkplqJBhueTgJ1NCnzNqgF4YipOvqESfqK/qOIC/Ujs/L24lw3\n+yV1I9FHJ5Z5a3SCRBKMzDSNK93TaMbaduhHM+Mf6Lde5fVYL3WAiKBzvQm9\nFegoEY/shS54dewGzbjlAYgPyLaBI9CG7t1mFC+kD+13TZ+sgQe7RLVV7Req\nVFJ8cO68vHDtWioQKIbd8hgloIYJP5rBtYY3fpwO+eIFxhzE+/K06kXQMFgJ\nMdav4RU1YVZ0UlB3wovrbQTtJhqbBUf8ekT9vdaWp2O7gwUXBSwYYmXzecqp\ndlJr8nBJMIBc0ePg8mDcuKUKh7JfSbJO+d7BtZECgiUZWsHT4yQjmkai/qOK\nWvZah24ZvnqtJN6u2htm74B9MDJcY+2PcUYWT+oqERxLcDAE7cOr2Div2YuW\nYpkSAWHH377LF+FfQL+T1d8BVgWzamiwOlpvRXP+75zWTyLwM2FOVETLX6a9\nlHsi\r\n=a/gR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDqesSki9/IhvPy7jDudR694OBXLuzl7a2ca73Vr7ZXZAIgQoAUZehyBaiXPr6CEiBkE/cGmhFenYqr/YnkYZBgRt4="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.1.2_1536097133609_0.7692732752258544"},"_hasShrinkwrap":false},"1.2.0":{"name":"formik","description":"Forms in React, without tears","version":"1.2.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"2210e84047c0ec3420048b29b319570720e3c3c6","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.2.0","_npmVersion":"6.1.0","_nodeVersion":"8.9.3","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-WtVCIf5LrFdv2lhhReWPVbKkUai4BEoHCKTjdIklKAk/MjhrnAXJkOJMFq0aA8g8B2KWNs/oXBTkIeEWCIlVuA==","shasum":"a0daf8512ce2ec18d88ff59a5bb172b0167e85d1","tarball":"https://registry.npmjs.org/formik/-/formik-1.2.0.tgz","fileCount":25,"unpackedSize":1293769,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbkFL7CRA9TVsSAnZWagAAljAP/3VicCqEWUs5WRJ8VQqs\nsjuuSmMyRcGl9GAfuEKPZSOSnYjQY6pGI3yYdHfHkaxIV7H3Mf9N+Go+NHIt\nHdwKtmvvoZnB7l1vRdKAUVQvij6I7AnEhh0/q7ianYNg5b4CgMb7r6NXwpI9\ntuVxrPT5tcK4RCSaoYywPmHVH/HFnKcU4AX3M1DE587ngPOYScy1eLiZGG3R\nWMCZfN99jLcysxCGFZEDYgYjQbhOWdy4c3+cFm2rjb3K76lGQPek48Wp+pRQ\n2xrg229vBxCLStf0LW2AdM1nfyEwWnt4pjLgyDu5oJA6X+5iSfz3NsyV0qA7\ngq/k9NFOdBjO+e8Un5tAR9souORExxU+nDdcQvuUbBh4MpS+Mh9P7PLG+av7\ncuJz+qFQfTIYZBm9B8wXYfygOuB1q9fOKQH3SzCEqaSgYrYnVo12V9foFhVx\nyGCCwALS59rE+yraqQICCXenP8Indi6Y4MMCJQCHGhO8hI+sdsDZNP2Ktna+\nQU6v3YCi6Qnb0YS/C7zbaMeO+Gepydew0+CoYGk46uhgwzle8oCO4kjoteiU\nnVFU5bRc+M2eK8KQOX7M/1Q1VQ+YJZBILjFc5ANCFu8lYgDmfUctn0TEhBVQ\nYAsJj5RB0WR6Va0ZbrmY1C8dZUSGqQlxiTKcOX2GXVtizJ5mK+vE0JY7SFxA\nD1ub\r\n=kcLO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCAW6deliMd6SFaWO5vByMOwvt4z0P5ao55Iqo+o/+gLgIgaFPeJi+EMBDKtZ4trOr2rNvBSMpP6dt4pk0RB6xdbLo="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.2.0_1536185081891_0.5154613642926538"},"_hasShrinkwrap":false},"1.3.0":{"name":"formik","description":"Forms in React, without tears","version":"1.3.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"16.0.28","@types/react-dom":"^16.0.3","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.4.1","react-dom":"^16.4.1","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"5.5.0","tslint-react":"3.2.0","typescript":"^3.0.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.3.0","dist":{"shasum":"0ef20938f40c3b4bd46003c0b069bdd2d5a90118","tarball":"https://registry.npmjs.org/formik/-/formik-1.3.0.tgz","integrity":"sha512-vW72DluHwQPmCkkSQGlFRAsuVaNElO/zT71FApr7yFHSEA6qBf1socKWcw0muQDp6fvD/Z6wo2itlQLnggP4UA==","fileCount":28,"unpackedSize":1254603,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbmHXtCRA9TVsSAnZWagAAwpEP/ifE6YqcwhrIpb0y6zsQ\nO+XUeIPQWkpubEEwNQfaS4A8vnqndx22AUjdEd/2pMtP4ZSCOHv39ikY5//K\n72FAfDLTWYeIVRdS9SQ108hLEXMlW9ZiKBhS0ltUUtiaD1kaVIvssgJBmnva\n200K6cjNaEeB+NgaSSDXFHYwnhbP4n3WDIo4z/NeTFkM3UoQ4p6Ccqeid45H\n/3hjDdMBvZKPv/wOe/Sojaun2/deG7y0lOms3N5n0cmItzyFeKONpIc+AOWY\nCspB7rnbVkKGuSEGZfBefa5Dht5X+5g9PoBjv48TLcURJmdPxOwbl5ErLmX6\nWSH+kK1a8lySeu88Lvi9ld9LoaU0Zfg9ci6K/pY1u3+hfQ4KklB1waXVLnfe\nj4xWIMrVL4qKrg0GDrCWeqTv5Him3CJTFvRO1svrPjuk2fq7JW1RUQBpKDKf\nl7vilofI2isqCQee/GdWmoGLwfpdlop4Vht9/gqyqWGeA2gAFEC5e7fLksh0\nJlAPiJbqf/2iDfAPEbYteIdd/elHsycET7cqBxNIfNwV1pss6IQUZtWZmuOF\nqd6J1fTED3KUI3HKxoeb+VGFJ++k8JPGeqOi6+hBcnGLf6L8q0r4txQN9ibY\nQFvqMv1tWLAeMPsXL+iUREuV5JOURll++fTzvSx0/xXCLcnmy4y0isyFrypg\nN2n0\r\n=Aak5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHjTMavzvGYfXXje62o0X7W7PSfCBqSWfw8YA3QF8o5oAiBb9QCn5oNiofKSsGSUxVzOIe0haboRSxXGMvtb5S3/WA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.3.0_1536718316772_0.1654658400692579"},"_hasShrinkwrap":false},"1.3.1":{"name":"formik","description":"Forms in React, without tears","version":"1.3.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.4.14","@types/react-dom":"16.0.7"},"devDependencies":{"@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"^16.4.14","@types/react-dom":"^16.0.7","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"^3.6.0","enzyme-adapter-react-16":"^1.5.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.5.0","react-dom":"^16.5.0","rimraf":"^2.6.2","rollup":"^0.59.0","rollup-plugin-commonjs":"^9.1.3","rollup-plugin-filesize":"1.4.2","rollup-plugin-node-resolve":"^3.3.0","rollup-plugin-replace":"^2.0.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^3.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"0bf03e0d110223507844690eeddd8bd439857fc6","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@1.3.1","_npmVersion":"6.4.1","_nodeVersion":"10.11.0","_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"dist":{"integrity":"sha512-cOTpwP4vy8bj7HhEGC2IWFFhsztBlZOJoTRgGa64NxcM30rV15ub5nTliQA3Vs8vqWSlGEc6k67SR8YZIV7pew==","shasum":"ff2bb4c0144585297cf9a371081326e8d816fe6f","tarball":"https://registry.npmjs.org/formik/-/formik-1.3.1.tgz","fileCount":26,"unpackedSize":1258437,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbtBPtCRA9TVsSAnZWagAAL4EP/ApZaskbmlM9SJQKRtbR\nQyyltm4ld8Rt+tsUZJEEj/sAwzQzJpJXgg6mNeCiqV0YHT7KjEIg908omGvf\n2LlCbIvlci4lxW1h4ol3gYzc8cp9hOsZJS8Fb9byqSWsU7kGaiMVBDdBwuKu\nam6ey6lB3u3A2FuGG8rv7y1cyWyiarXvR1sjmT6zh9Axj7DYXScD0W2v8kic\ncTKVTbJ0EmpHgGaLOxkHLR6CaBuBcOdFcwfLvJcyu0Sw8yP4slcL/7G9OTne\nWOLYYOSVpVbaIE1C/vfW77/7pOLIIox5Jw2e4NPwapXycXLrojkaEYrhVpH8\nEyv9Estnc8uQuzs+b/Fwe834ODZXZTOaDQp3lA/Rt4TpRhjr98en0nSSHoBL\n32nO7o5uu2HV7iXkgssayldB9Pa7stxWgnDiH59ZUnUH4slUjhcmD0jKbpSl\nsnI9H+jhZeERTFpcD06+n6p64KVRYw3HuSNhDjg2oQoigEGncgONFiJBkt9l\n3PfqSRCVmIK/Uc2aGVbrqK1UK5vlb2xAM4v/SL+wi58QEO6IgtXtt11Z7fZZ\nQSEFLb5C1IXUiUpr4WaLPl1zLt57iUF22voGFpzrBd7pGZWqodyYHXKOMvI0\nPBEtq3zNH6OSKmENZ2SR6G+sbNGEJHANz6du4RDrTUblVGrbV1u9MAGOz60n\nXZ0c\r\n=qwbe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCb2m9AAhfME3fBAyaDc//Si0SUk6m+lAyOpswNS66zFgIhAMPrajkPemFAb8rYtmwsbnwsbl2yAlI5sy+JFiG1YobT"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.3.1_1538528235905_0.7669150129642623"},"_hasShrinkwrap":false},"1.3.2-canary.3":{"name":"formik","description":"Forms in React, without tears","version":"1.3.2-canary.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.4.14","@types/react-dom":"16.0.7"},"devDependencies":{"@babel/core":"^7.1.2","@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"^16.4.14","@types/react-dom":"^16.0.7","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"^3.6.0","enzyme-adapter-react-16":"^1.5.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.5.0","react-dom":"^16.5.0","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com//formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.3.2-canary.3","dist":{"shasum":"7ad2bc34e08bbbdd86f4d1c1aa2ee46234ec0644","integrity":"sha512-Dhs7xJBhAmLaMDHn2W3pdIoTANqVmGcHiYxIaY4sCYtr7f4Mpnyqep1zEcTXIFXKjntoiwnbQ4zsSX2RIhDrqQ==","tarball":"https://registry.npmjs.org/formik/-/formik-1.3.2-canary.3.tgz","fileCount":28,"unpackedSize":1167239,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbzKy+CRA9TVsSAnZWagAAMpkP/AxtPvon8EDcxANDiNIN\nNOFQDryFS0xgR/gl5OxpCzXiirSpAkCw7S+1SSGLwya6NxpotSsaeScZW333\nPM1isN5MV85XZMwPtdDF6mJWxippXONkzr/0nE1h1vLFIIulT5y4K4fJ0xJI\nGNP4l4K+eP0dZ+s/LxM/GijBM/0dvMrmA+wzgOirXEtJF0tEf3tKZSBVu5Ff\ngLm16DLvH2rudiB+V2VjDxQDcrSxZpFeJwtmqbxFf6lHVIoBTxeIbswMmS/W\nP/ijb8luo9fN0hsyNI8hwsduu5cJu2PQT0uS3L34tJS9+Ojna49wlceR26rO\nLf2FxYJLMikKKeUttrwP/eg+ZeYu7sS8c+zHCc11h483Yww/EMil7WTvW5iU\nHY9rGTBJBECCta8pgpU1/yTB2E4jNMgbck6l+b1lqHJ//BeoyL8wsrucNUFT\ngiJjHgiVMCZ2n1jQX+WU1bTIcubTPUhNrdkeUV74Jdbl0cYMcqI7pKPMXirY\niJBqL/eQwEmOyFAjpaMlmF9XuXL1mhr9wZpkR1BWQ7lytIlzmls4Sl5wQXbf\nb7Zc48u0NS/9LeM9v56iX4Mo5T9sfjeCSJjUeYQIRtpTJkuy4KiuHCW+2INo\nNiVWtMZubfHE2uQ5sdlYMiqLm07/0aerqRGkQPxU/HNbPepLzL9RFEcyIYDU\nY5Eh\r\n=A0SN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDE6BgFsN4dBj9Lw/eJ/lPm7yMu2GHp6ilHx5J59oFE+AiAiLRwH00XW4dwiN3NKDYYbR7s7rwidI4pFkPLYPc5AWA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.3.2-canary.3_1540140221750_0.7871720146004841"},"_hasShrinkwrap":false},"1.3.2-canary.4":{"name":"formik","description":"Forms in React, without tears","version":"1.3.2-canary.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.4.14","@types/react-dom":"16.0.7"},"devDependencies":{"@babel/core":"^7.1.2","@pisano/enzyme":"^3.3.0-pisano.public.1","@pisano/enzyme-adapter-react-16":"^1.1.1-pisano.public.1","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"^16.4.14","@types/react-dom":"^16.0.7","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","enzyme":"^3.6.0","enzyme-adapter-react-16":"^1.5.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.5.0","react-dom":"^16.5.0","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"setupFiles":["raf/polyfill","<rootDir>/test/setupTest.ts"],"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com//formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.3.2-canary.4","dist":{"shasum":"3346302aea2d562ab641b1755461122229b50390","integrity":"sha512-l9RE1tc2aLMDFaxkgPc4FbF1JVZsoZ2PNeQ1UBgrz+q/xINqhEZ50P1PpSRGtSGk71sZezYBHauGXTDAcrmeuQ==","tarball":"https://registry.npmjs.org/formik/-/formik-1.3.2-canary.4.tgz","fileCount":28,"unpackedSize":1184021,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbzK/8CRA9TVsSAnZWagAA3MEP/3e3qe4S9xO8QYyM9TL6\njf5h0pHpNy7gtKeAJ1Ad0imLV0s9kbm+ShdBGBn9FTJjdgdKE5u5wUfAkXWc\nHe2FTx5fvNxTOpHP2V6JXi18z94tx6Ov8q3rRqLeP2RD8RRrFZhf3o1jN9VE\nYiTbApkA80f2DEqYCKhfXrvYMh5o9SwU7dP972LuSomsljADWbomUNTs0jws\nM1w/peCchk0OWNCt1hSLxXh/vOmwL3VFfmygJbvYtOptjhigAozVad8B5kpM\n+Nd21DMHbd49cgfcp6XUlhsvLgEX/YKjnjshyymwsRHUFRTq1GMDzC3+Gd+7\nCMTKAxgXOVTJ2UHfT+Alk84L/kaGXBIdNZsnX5BC2Aj3iuGWnc8VfxgwsgvT\ntNZ89YtWM7LwdcVBR/rRpxN+YJFjUVcKURR4yfNk0rx+UfmZr6SyQz6fx/xX\nC3Zk2tLaQLC+iLDfdwPSRygAF+WqZtALOz3xhKBK5lnxy20E/g1xjBc6qYRK\npcsTRX/7bv5MlgEQ+CTBySHQDMQ1B7jOZk3wUnNns/MuxnBQ9MVJbq1GvDAH\nUOHJr2IVOj3YUjtekgFiozJtnotXKPxjMtwIKnD1T8+V7KdBHKfhkIJcMIcH\nbum1TIbjkOGdGnhvf2Ikl+KMNKVFi+d4po6SyOfnPiJq96lPX/pIA4FYo1IH\nlDII\r\n=9+DI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFjecFZpl/VA3hAni9dscW9mA3GdbdjACDLffEtjY4ChAiBspv+6dh93GJXanznkt8CJnW7lYQ6uWzEeyE/K9My4GQ=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.3.2-canary.4_1540141051540_0.8636963584341857"},"_hasShrinkwrap":false},"1.3.2":{"name":"formik","description":"Forms in React, without tears","version":"1.3.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.4.14","@types/react-dom":"16.0.7"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"^16.4.14","@types/react-dom":"^16.0.7","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.5.0","react-dom":"^16.5.0","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.3.2","dist":{"shasum":"f97b9e71084db4a51f7bde798584c094b3696738","integrity":"sha512-WzKX8MGfSJTBF97oDDeP2meb2/I1bi1dLdkICmUfPB2KJ9mcdBOmsOPY8cE1cfV25ML3DzLomYsUezH+yedpvQ==","tarball":"https://registry.npmjs.org/formik/-/formik-1.3.2.tgz","fileCount":28,"unpackedSize":1167395,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJb60tbCRA9TVsSAnZWagAAW4kQAIimkBO9FYo+d0Q13uTV\nErxx2MvnY3qMrz0VcKMwnHHBNW9X+DDFI7qBI3zHW6Ovv4WW4rQm+0YW6FjS\nG6mhMGSXGSDltd+Xr9J98VKuBEkTk1rgkOpdspDJqc6JaK3yPfEVmBvdeHWe\nNsOD0sjENdx/E/GUdUEYKP4kicBXe0GUe7XJTgB0mmTEaE4rQuhsjK1ryUOb\nI36QgvUGbkhJ2Mi8tQbq2h4LBxNEeim4ulrNeOWR8WzmPk1WjJFrBcjUZ7Rp\nzQSFYg7om7e9NdL5QYUm0keNN4H6RNbkdH+ucDlxX4HOzhzlwzcJCo4filEg\nnjTPsUrPcgyKeRzknDsC4/OVKVlTJBJPsZPHzrMVWrXqguWBWockkkJyulZS\n90szCGkGZ5Zqu/xGeJrJ1cfOkk2pNMpxwnppwttvU5nlUiVkrSFV2bXnSyws\n05wMRGnUL4z/g/DGN0q+xQgexd2auq6XwCz2NR+w1fRiu8NlhCJN3niiARoU\nSrAovDifhVlhSWkXetwGedzeTuQpmNtWbQ14EGkIWI6Wy/rq9I6Mj6RQL62c\nHwCw+yPWoNSr1vmAU0nXSCC7BeCrEn00LwTpt075EgVV503gbPIXtxVoPIo0\nfuitwzBQpLIDwBwPXPmhNXYLHBRAFGdrFpI997MVPDhlbI506a8SSCkbmtjT\n+rVu\r\n=J69w\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDQFKrxkqnwlG8IMbVBgE4Z67LUD/2NV4QPw/jVXFyaTQIgDPMk4dxD75aNuzHkLiKzLOVadFwD21r81VWSNATut9o="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.3.2_1542146906916_0.24734096119051374"},"_hasShrinkwrap":false},"2.0.0-canary.5a8e912":{"name":"formik","description":"Forms in React, without tears","version":"2.0.0-canary.5a8e912","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash.clonedeep":"^4.5.0","lodash.topath":"4.5.2","prop-types":"^15.6.1","react-fast-compare":"^1.0.0","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.7.13","@types/react-dom":"16.0.11"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash.clonedeep":"^4.5.3","@types/lodash.topath":"4.5.3","@types/react":"^16.7.13","@types/react-dom":"^16.0.11","@types/react-test-renderer":"15.5.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.7.0-alpha.2","react-dom":"^16.7.0-alpha.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.2.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* [Working with 3rd-party inputs #1: react-select](https://codesandbox.io/s/jRzE53pqR)\n* [Working with 3rd-party inputs #2: Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.0-canary.5a8e912","dist":{"shasum":"b68001909a7a9e0bcec2b8220fe2c28a7f029a84","integrity":"sha512-VdcHFzfxlrhyUVq+81XVny1+UWWYjgbH11M+S9ghGjvTxWVg3M1ZWmh3GOLHFaAgSkHqgSxmDQy6VIfGu0iIdA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.0-canary.5a8e912.tgz","fileCount":28,"unpackedSize":918472,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcCFY8CRA9TVsSAnZWagAA1ysP/0k9XzibtFe52ZV7YYcT\npANYbQ1jfpVdj28NfStUbmQAH6N1V72UD56iZlIfLoT5q2a92rzbWBz4oYRZ\ndud+BZZOn/AsAJtInrqz71T5+bloOGIgbiylR4GKcmezNharffq1W2c1YsZ2\n5N4ikUGgwN8mjMhoiEfGwDH/vIAz9BV+lNgRRaRy07KyV6yU8hsUbUlOFcTo\nK3a4+u4CtPp6l6f/QM3kYnoe0kDfGv+r7PPlAHQVLDa7lUD3g0hVioV5zNFB\ntR+7zytHbEcUHewej7OJgbI+FtH5CrHE4tl9tDMJmn8AmecNo6ldLPUK2yGl\nCff5w+wCTZFsEt7GP0decnl2AH73GjJbsIvHA9qAToDNm5LMArw34GbmFEnN\nTvLgUWm32n6Djfcnoyr9WbehZ52jKr1bW7+ET0VXr3lFFGkwve3Ci1E1+kbL\ngGEKHJjMJYykcUHauVcA+6vNhuqmRS5XtxB6ixgInD7YWFuGGASfkWrXTAt8\nHtOxA+bTBbL8kO+R61M9S7cgAFn+I3JfWUEpT25uABv70W+XMQ8fFLVDj7kr\n8D6MvvceULBk/6U2bBXTZu0MMTZwbd4B5BgLuzOcGAz2gGc/zx+6yXiFy+IV\nwjWB9uEx6eZb4bGmUmaRwzHUBqp5ea1j19qV7LmmMudtSBySImntFmpHLiF3\nc1/1\r\n=xSsO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIF9neIkX+1lEWIO3MdXNOjPfXG1MxZK4v8jt1FzncYCmAiEAiR1ubPRr4qNvlXFGYxX38zdyLDI+PSbXR1aRmy4vW9I="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.0-canary.5a8e912_1544050234980_0.5191536338543419"},"_hasShrinkwrap":false},"1.4.0-0":{"name":"formik","description":"Forms in React, without tears","version":"1.4.0-0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.4.0-0","dist":{"shasum":"4389c8815a62bd20c1d8ae4c22eb1188b2551aa0","integrity":"sha512-FGPxuJCyJticJgyT4zZMAbFWUmoJUP9KiCvaL9Hjt8BXWxARValXS81K1D101BAuKlY8P/3GGSyXHvTQdxJzug==","tarball":"https://registry.npmjs.org/formik/-/formik-1.4.0-0.tgz","fileCount":27,"unpackedSize":1048133,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcDEEhCRA9TVsSAnZWagAAG2YQAImKJkAuJ8kbE2kFFXFI\nWzRTku6HLWFAdmSJXtlE+4zAqWAtH/r2Qm0oD/yuF7m/gQ+uB5+ru1NYCgra\nJyYUD47iamST/lQWhmX7voBcg8o7E9QwxxnZHHiDZTeXwPCjzcj8nUzxKS84\n7D6ZbVpuClfGPO3L4ybrYQVY95W16b9ZSomyHqI0g9MB86/SshKDh5x9+MF9\nrvO6jQjLnRvyjVzFJQnCpE9oAoYdZTkmXZ9DFQj10UYfA2aguU9mMbWZmE11\nh9/3FfP6M8IQf8SWmVUcR1gzfli55IrUhPxDIRoScR1EeCJgmAtLtHb6Ij0i\nU88JHVOB/IrohMZ1K3dhvpPXWb/2h9wPDZ88OmbzUjok1kbcfD4JnaR5uVRo\nG6NdL+m5pdgeUzCBX5CTDq7QyjPOjpt+HDUMoejxn7k2rwvWJ5apmPTRGDdC\n/FGpEU9Eb3riTLytZn8CltVI7UC0y3SKVrN6KvkkrPq79gqtx4AQjHUNL+c7\nuW6SAYBtzyJRRYxG6OlhyXCfJRwDHOl1l5IRgn006hdtED9WrtyDIXs1kYER\nYCkgbDOVpLSUr2YYj0wOkzHi/4SMlG6vfj1WBxZRvuEeAMJgOSn8u/VfNwpk\nDRLY1cFnbTZ+m7ByMo/p9ztzP4Xj1HJto3+XGdLA89v+alI6pJ3IvuMPgQxc\nxFJQ\r\n=7eBo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIHsOrcF1/vAW+BccbJcFRIS/RdfsEZ6y3RSoFveNWipGAiBMw1aLOiXt0UpLyGqjsXkAmVuqzZZl3KSNQ4bG3fpvVw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.4.0-0_1544306976528_0.45984334596018117"},"_hasShrinkwrap":false},"1.4.0":{"name":"formik","description":"Forms in React, without tears","version":"1.4.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.4.0","dist":{"shasum":"4261769f765dd41b7e791958fde7a08516d5920a","integrity":"sha512-HOlb4cEgjTZ+5VMCYDlXt1r5Bt9wLhIH6uvJCAhJaIvqehmIM1RdzhYel8tCFPXzCcCx8QeZh3UcWKye5rsJmw==","tarball":"https://registry.npmjs.org/formik/-/formik-1.4.0.tgz","fileCount":27,"unpackedSize":1048131,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcDEe4CRA9TVsSAnZWagAA1vIP/1tXWOzmo32u3Z9edGAY\nw+MqtmfmTPfKofHIqcxqjSir+NvKvJoD28owME9pT61zw61q4jENwAUA2Jgk\nmF9EkfuVk3fYjto0eDffl8VVToiE3/apbXad5J9RT0AwgFGkZ0uDX4Fmqinc\nNCwsJToT0+oIGiecTC5rc3TEDVriL/f17rPOfmkFHEMP3+y90WLM7Udfhp2A\nXnbMRE1Hla2HjbxU9kwNSV2+l8m0dxYZjdknphLZVK1XwftzlQHLt3SpAiuX\nKuucvG3XMXr9sk6mi8Q8WP3ph4p8yK1z65JFYTI1rd6m6lhWe6Jis8DTfq4/\nvVmFMMaGZTgwSUiu/FIMXaiyV0OcrklkGzOk0LJ3TjjFjqCKDOODJRzGR2Ja\nkVzaowVb+1OoSmKRxv3B6SIGixRepLjhhdSuoITg4o/hlX6LbY6VeMbN77dW\ngcE7e3QDgTr/JTdr13c7ctX+O1OEquw9YpuGppJr90S1B3TPrmmRv8/aCpTN\nGsJtPQYY8M3GxT5CbAY9MvitZOwCYZ8D8YaUxaouxVutwG+AV/v55aS/U86S\nensndOLO1zmFuXBqlu0V9jrKxl96sqwdVZCL55lRt6c9IjvTXvMB7tkBHWBd\n6Xb3qFGZCrKU1zIx4lYs/M4z5zfihOtvF3bLreLnFfdxqWp5ugDfPG6bR74m\nYAUu\r\n=T2OW\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCBdoeoJW2ZXefW1tpFucuVC52gTr0E+jVAL0E6jSd9fgIgVExbShgDJ8DZ43sEfpUurbqLHkjiUzw3A+zyu8SPDLo="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.4.0_1544308663593_0.9674330534768145"},"_hasShrinkwrap":false},"2.0.0-canary.effcf9a":{"name":"formik","description":"Forms in React, without tears","version":"2.0.0-canary.effcf9a","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.7.0-alpha.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.7.17","@types/react-dom":"16.0.11"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.17","@types/react-dom":"^16.0.11","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.7.0-alpha.2","react-dom":"^16.7.0-alpha.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.2.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.0-canary.effcf9a","dist":{"shasum":"25fd94e52cfb8dbbc309e636216dd46ff40974bd","integrity":"sha512-ktRhCWtjszMA5seQaIZC7YnJdp+7YWc9q0ayA1eA1iHuUC9a8fWACbEIylPutm1vIkNUcDMp42i9kMN5Zbu3vA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.0-canary.effcf9a.tgz","fileCount":27,"unpackedSize":853189,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcEviQCRA9TVsSAnZWagAAcdkP/jKIoardmzzAGhxrJ8Es\ndyBcYR2OoQcTHaqzx2KZ3wnksaKhO/lVa7rI/BKfaLbyiY95w0KI+nsli5FD\n0VW597/jEk0iPRctH8XcDC6U9uSIL31rkvl5sKy8PlBKONTKk+/oWXNykncD\nNnVz1Dmwy+uODnByhfPCoS+vB3O1+8d4FgxiL0dUdAesH/fip8bKAVAI5P7l\n0NJbnMZel50AgP7lrcBRi5Hlev3KSHUhfcUQ3f8qFLJogoyVOk9qU/LmEXXT\nrUTigoq18nXube3HgU/49b71tjIGdaicm4BFZ7UBF2OWioOJD0aUo0XKc66T\nEPNtH21UI1ivsm+fA6s33U4WzuhcqnZxAUMNHH0Id3x4cqlAaztw/Jea7BgY\nzBi+p/3uQJ54hoSk0eM10OYJqs2VuslDS4UhEwMjSjQHaowJB7duq6s6rT0w\nTQsJ+7zN9UQe3mN2B38/CoSzLN4kOihqDDDqJRoGzMoT28ijALGpb2XPxx1h\n+n/HzYDy7NLf+q8TEeJ563dGngxT0m9EE3q9t9nXw676XcxU75WAf74+RzuR\nQB62pBKlXEyEdz4S9k9C+h3c2IhtUAq7syFtQ9kEcZ/ua8KgcFewHpgxMm4L\nLaCURo1ZEnSWW2fY6A9zGf/eHiab+/ihZM6PEeQl0C57YQbdu7JxZo9sO/Ed\n7ZYs\r\n=bD+g\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDEFfFiJbyLRsjgbI2y6iHk7ojbQG8yvrAEWJf0eGyQ6wIhALv7qNb54q2vHcP4cLa4u3bFc3vsTIg70TEmepAv8nCT"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.0-canary.effcf9a_1544747150259_0.9376711677849003"},"_hasShrinkwrap":false},"2.0.0-canary.effcf9b":{"name":"formik","description":"Forms in React, without tears","version":"2.0.0-canary.effcf9b","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.7.0-alpha.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.7.17","@types/react-dom":"16.0.11"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.17","@types/react-dom":"^16.0.11","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.7.0-alpha.2","react-dom":"^16.7.0-alpha.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.2.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.0-canary.effcf9b","dist":{"shasum":"d441a1bab68284a4d61303cbb093f7d20f79a7e4","integrity":"sha512-YN0pLlejJ71MX8kbysWgflPCdy+GDXzpQM+07xQlQ4alhrXqBL8XCfb0gqQsK0QWWC9aHjAJqUG0oZ80VeGh3g==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.0-canary.effcf9b.tgz","fileCount":27,"unpackedSize":854098,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFEIGCRA9TVsSAnZWagAArKEP/111BbrKH2mrhMODtb/n\nby7hMIOSb1WjfLZm93hzOlgVwARSv3+YCZ2xacVzDBWnAwQnYzTdFOV5ffQV\n/qRkurxUbVC6Gawmw45syaQON15HY2CC4wOxMOoytjEZfCLWzvTihTwlrK1M\naw60L3otp/3BpB0bBs3P+nKN2G35MjLXVRDxQP2qfVc76DtG4NtcZzDtzh0X\nq+M6IE/vGqIVw7FfjrWHpl+Au2c8fhuv71fkWxsycEPSqrD4UfmcECbXM4wW\nX83EP4Adtlw6HgkkxFDQQKHqqtMtYHUTxNM7yMEu9k5DFq14WlHCl6Hivght\nYBFI6E6h8JV+aKPiWTSzDCKOfF3K2PBmDHhakLM8fUm8Vrs+bqregPj9MRWs\n4KCbSQ0j18DEwxAz2+A0OnTOrstL5LhnhjD3BwtM8TYjPeNfFoz+c7xzhHKK\nE1JwjJ2S9ZbqTWujcMzeMNmnZwsuOVeEsfIyYen2l2qd5LohHuz5IJrRY2KZ\nm85cIfK+YTudmEOUxTnpD4Gkvc3bkz5Ijvrx9F3b9LeUw43BqZHECqwvXKgd\nUPsf49TeQFJCgh5dO6WByDVzLXmC+ob1Bu8XCYa40dVTnXnvFJ3JszXa8Jee\nMwSa1FjFqi4VB4+gAr/IlgpPxMZ8zHbLAOcTl5lQp8VDYmP0VD5zSTaOPl1g\nR10q\r\n=e3pq\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGjZNVCXRN8W/up8lRrooykGnVjItNgO1pzMoH4HfP/CAiBOSr35O5dFkX3IJFJA4zV44spHs4h8pBxvbv1KiqzCVA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.0-canary.effcf9b_1544831494262_0.49376789520148945"},"_hasShrinkwrap":false},"1.4.1":{"name":"formik","description":"Forms in React, without tears","version":"1.4.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tslib":"^1.9.3","warning":"^3.0.0"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.4.1","dist":{"shasum":"6fb3d18c4fb59f70503734f40afd91dea4219f72","integrity":"sha512-1pjcg65Pn4fuOgQv4cQOn9wDjCQ6f2J1QONDQaP4GfaiRYN/pQx2xtoyGo9ibNr/zR/cmayr1ew7EFaeAPLvsA==","tarball":"https://registry.npmjs.org/formik/-/formik-1.4.1.tgz","fileCount":27,"unpackedSize":1052201,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcFEKVCRA9TVsSAnZWagAALEQP/jtjtLbkg6Smq9uIK07D\nTsV0UUv1aghuj0Vp2W16DoTY2QCXz2Uavyfji3ki8AsjOddg31gXvqlsHmjX\nO0Qc1ymmyE+ridJZoMDplj5kuYsWH1WIf03BdhealmaGFliMZ2MAfza+rucU\nFezBFhItN3yorcXbMwVYHhBjPB7NH2tVhnGCk1iSeeqHEXJwagGUORtRhDRR\neqhVyNOnsyE3KMdNB5epYhmKTEBRkKkCvWAa4/knjzgZRSsTNaRjjg5SZiHX\nnMlgj5LeFbDKrh35FcbRvMaj704tcXtn3LDW55CgxK/Oy3S5mO9VXjjI1lBN\nzCLfooBWzau4/pEPjzfWeVUq0kYKM3YUfWDHljvm5CXXSOWBpAPyT9RnFghh\nNLHk8+J8cBSCheqcwOffJDuOxcGJHRL4qtjWT+q3Cb3xU6P/wA6Qr8d9AzD0\nHKWO/gONbhlo++GDXLlftQMcHcAiQWzutJnrMVzErcrlfF/TveSo7A9iCoc0\nTOzEcfkdQ1NGF+0NkXKkXiQhxygoQKoR1OMMMoheR76BQ0u34J1oBNmTOGd3\nardeWewS8XkcDVeExhyxRfMlLyPZxDQOn87Bu8/YL6XyKTuDFsYJDZPU9xUm\nfTPPH5MpE4ZZGLuaEG++HRT9jWdH9HvMVM3QrI4oeJJtQQcgVH+rm52XFrHC\nY7nB\r\n=Xm/s\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD7zDV+L4emR4hfPM9kYkmYfi00beH9M1ZHu8/gqwGOvAIgcYJotQ3y15cEPhw3O4igMzBuTf+THoxCVIp0UGuQfdU="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.4.1_1544831636591_0.6585601686952864"},"_hasShrinkwrap":false},"1.4.2":{"name":"formik","description":"Forms in React, without tears","version":"1.4.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.4.2","dist":{"shasum":"684e6e9fb0c8309a17b0d8f3f57993ee83bf96f2","integrity":"sha512-ZssZJmR15wEE+gepEUQQjNoyUIfpc+zwLFZiWNnC4ZolhBM7EQO7wjip+gIC9y/1k3c4tDeEite+CMCwk4ti4Q==","tarball":"https://registry.npmjs.org/formik/-/formik-1.4.2.tgz","fileCount":27,"unpackedSize":1048329,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcMqFDCRA9TVsSAnZWagAA+y4P/RTVQSwL0FBIJTDF8/np\nC1JMS3ROiVWzN3W22dllKwsaBfHgm2GEwkBi0PLiVQCknjM4igZYjdIyNk4j\n0YNVwEBysM7ez1Tt4opFeSaebkDmzEVd8kPeL5su7z7iDF98PAdMNaJhcfX0\n7dBffm1yE+eUkZUEx7A8s2+CnxYBM5VNNJNiSG32bT5WgANADWU3MrtLT8eL\naEQ2YiXKnuexHWzbWHeiaSMGUryBTIEU8BWz7GGRBnUeBb3JC42S0cSIE2VF\nKRdOubrTi1PxsKkFHkvIoT7BnpIvxPoAmlsT86hnH4u3csy3KL+bYa0R6pk7\nJBFWF4obw1Zb6cSc54QWeXyH69kFWHja1mlR4YkU6SElRZyQhbb7bqxtCZJP\n3gvCkvnZd79XgPjhFGK3frA67ZionYqRzMI9S3PvI6LpvWmAGZtnRuis9L28\neUa/dKK7ET156ZBcFQsTvotINXIeGd8qR00MFKlJwczbwj1S2Bd3JuydbHZ2\nuZYFd/8urTJEP1iK+BaB8PGVoW/XWjcGIfKAMALMR7D3wHKqCQYVXDkFhfjK\nkBudLvPnSXMbCJTj+5Hm/HNOrK+gbNJ2KI+MrxmGCVEA1X6dn1TxYLpUSBIj\nVAVtgQP/FftEvmYddzxlmLe8auTY3mro4T+4hDyeSr3+VuD+e/jhrLBo36pD\nH/fY\r\n=LAJN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHD4RXfARBMyLRbrMcR4pR3ZbeA1YYmp8t5BGrPq3t6jAiEAoNsyC26rO6EtC5pxVtRrTT7Ghb5QSABmYH8uDobrrPc="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.4.2_1546821954082_0.8656778816094641"},"_hasShrinkwrap":false},"2.0.0-gamma.1":{"name":"formik","description":"Forms in React, without tears","version":"2.0.0-gamma.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.7.0-alpha.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.7.17","@types/react-dom":"16.0.11"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.17","@types/react-dom":"^16.0.11","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.7.0-alpha.2","react-dom":"^16.7.0-alpha.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^0.66.4","rollup-plugin-babel":"^4.0.3","rollup-plugin-commonjs":"^9.1.8","rollup-plugin-node-resolve":"^3.4.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.7.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-uglify":"^6.0.0","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.2.1","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.0-gamma.1","dist":{"shasum":"074d977125b081976d74cecc8688752e3a48fae4","integrity":"sha512-UCYirtoGnUDqU0NNfzUh9mda03BSqeKiFRHJqh5nxZJ3IAEZKXudOFBqcTfX4ajXLEzyoMlS0hgNbQt5bHcOIw==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.0-gamma.1.tgz","fileCount":27,"unpackedSize":908266,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcRMd/CRA9TVsSAnZWagAAfE4P/3+vChd2pCLgQrBcTUVF\n8rwld/04zaa+QwQCNahdJn/aCYYRNq7zTi8QVaFA6UGQMlMDgi5ggNHn22Co\nQWotBVWbn6rtF6KuEbmcGcnQAAKaUY+k7Mnd/AYS3W2MrK1toBpWnmm6s9sa\nxQLR957IeL/Hr4o6j46+0Yv+YtiN6hlqTldksxDYrHoF+mWaOW9xzG0LF/XJ\nbXAvA0sex2Bf2rETwHJLt5CqpWDnz5BXaKAd1wGjYGgTBeIJOQFBih3IqlQz\ncv/JHQuzSCWaD4867aVYZC5v1VfwEcKPaZBZRyKGd8s8gyk/JFrmFso41AGU\nABUtpQNP3zk4IsF7OtX7alsm5ZjlrLqheOIurR/Rde3ljKP9U86GWSfkRrfD\n8HDouYZp2VYJ2RBKiCOtDXpfBj42z/zhqZ41A3LTDnR9utqVzLxz4WaNrpfk\ndl8mpguorLzWCUZEUKly1/P7RAKVIu+77/HiTf5kBwNCacYARh78oP3Ef21F\nao5sDBKpSW1n1JaVzd5/1dhb9bPAZzh/UWIveg+iIfIwYhoAE1HMU1SQKhl9\nOGfrP7KrFrK6o1FWpdcTIaGooR+5d76QGEzJ+ff1FgZ1yghnnIXxdwSNDtvu\nzhQJbMkJPGvgRp+qao/ahWULysEuNtt5J/Vk8DfMOq8vL5Poje7LjY4GkFnV\n+YH0\r\n=qaIv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDE0lDQCXU10oebRGyXxQZ/4iCKF1/wC9iqhNYo+5XWhQIgAatSuMPaK5WXtf63A55QBCVv3piLu6K9zpCsEp3o+wg="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.0-gamma.1_1548011390915_0.8075718861781023"},"_hasShrinkwrap":false},"1.4.3":{"name":"formik","description":"Forms in React, without tears","version":"1.4.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.4.3","dist":{"shasum":"a3bece72f545981f8fc825c21d5292d9aac524d2","integrity":"sha512-rwwcCPhidgiACnh1RBY8vp+Zp9ompHxezuGeIqmOh9RvmNCB8GCupoCWdDkWB0DZ1MBoDl76swB2v/FbMxeEmw==","tarball":"https://registry.npmjs.org/formik/-/formik-1.4.3.tgz","fileCount":27,"unpackedSize":1008276,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcTzdICRA9TVsSAnZWagAAmAYP/jJVzxdrJC37wjnaNpcE\nEbnAuhF1GGcGMWQD57Ep6OE4CYlk5/mdaCsikQC1c0ETPJkpvqJLcAcst4Vg\nRvvv+52++1kMB8Vblu/np88Dy3Xk5sUXGsCur2oteDWR4uJkauwfW9ray8aK\nbVDpC4BboGX3su9H2lmJhq2qxqeXGr9hSeOCqxj6sszlORfKPiqHuIR1wdnw\n2gj2zVYUy5wN+iuHgYKajlh3shzIsNCeKR4GCTq4AOBjRPdGBb5LHjN9ldLN\n8uzeTEHIbLgrN146a72WRhd12EDXjKjl8mKDCu4YqfCmUg3cUMOQ4LrxRmMV\n2SR+aKW7sE+hMysFC6R9EHRAGuDzJ/jiK5H/2hspBrYB/0Mfj/ENWSBN6IOS\nmwkq1h6xW71ZmzzJBAhnOM5JSiDkPI7hHCKrj4fapff0jwFIk+b6tVlWuzBF\nhaxItvLhP12r//8EKlmGGss/KYoXvnBVrb0O80x60uz5NOA0iDFUhb3FVjBQ\niE3lOeHqU8kwaXJmZYnIfjOt7wK1+wX8b/UmZ06kQlJXQRPaWBrO5D0XHKtN\nlHa7JzOejFpWTwHXHHQPpC1lqNGf7ukvLe/5TziPzUMd2fdl3U9Y8R4G/IQt\n4e1R0yNAZfxVscm64uSwQi53/rCRivgSR99/0TFdr03+27Z9nmJaK+f1fDyb\noQuO\r\n=WQ/N\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCRKwyUDcG/a7eEbzbH0VGdQNo38AZh/bzt+FlRImdzTQIgcLp9nW8UkkUOFGn+1WezQ9+vThO2nuNsGwJhLClp47A="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.4.3_1548695368259_0.6505093431042845"},"_hasShrinkwrap":false},"1.5.0":{"name":"formik","description":"Forms in React, without tears","version":"1.5.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3","cp-cli":"^1.1.2"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.0","dist":{"shasum":"d2d31086834fd1b788077e451deca2b6fce14084","integrity":"sha512-xSrikKwW2lcnOo4m0qe0GJZo4owclEHAsRzfYuzHL6coeAKDE80UjVwaRf5SdOhA3ac6/w/0jelzh5zDeJMZdQ==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.0.tgz","fileCount":27,"unpackedSize":1017677,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcXfPJCRA9TVsSAnZWagAATw0QAJuh3R6DizIEreKTyPsv\nqY2O53IRIgClxi7CpWNTP7icFBvycAgaqA6w1zeaz65Lb9gNQRhRDgbf1u3B\naAWPZ1HIZJqYras6G5jIKjgy5QoH6sbM9Vh7qIh8q3TxA8K2QPN7GkBZTUvr\nLvc9zW9swJSJVhRqc1lviNNkjqKeI406hhwxk64vZ1ALWXS2GdMO3sNJ7GBc\nG7ZMXvQgSBT1irjcHwNYW5oFgwd/Pcf/3aPJNifpPKibg8tlYGyYGwCJA//t\nlg3DVZy8k/4LsbGVFGc/hhkT0G4CdgVV5juxrdfhb6PODXbLKKEnrWFUSQbX\n5eKpMA8WiO6/BNarTB4+Gb3Ph10zT++wJXhS/4y/tFtNQfnPhcVgqSA9Wpw2\nB/Wp96Zyfs6mC6qpSSaz1AyJGPiUdEp0+QDBB4lfrLbvSmFki05UpbCy91eP\nYFALdW9Y0EXVXsiK5Tr2cZlksXP/zswN8klCWHR8cgr/zvcZtnJZScJ77klJ\n1jGrmFZr/clLdTnIZyOOROS8efI93L01uVEiFAUF/oRT1Axju4jAAPcISYS1\nxLwy8ctvKLJZvfpLyAspFX3JxO1hpVeJ3fjbI0p/CYdHQQ6tUB1e3JhE9WB5\nFvk9H5vB0WhJcDFSSEiqNrbI7cLlZY2AEwcpTR6UM01F98saOk9s0hFA2zeN\nTlTB\r\n=HSxQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD+SBSWGr9xx3LCr2aRe18D7Tfiwe/Vl3wqsXifXaEW9wIhAIAmMH+JoBM2JAMUqnU0xvY600ZfsxO9U+jnMC1lQtyE"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.0_1549661128397_0.5926511196323518"},"_hasShrinkwrap":false},"1.5.1":{"name":"formik","description":"Forms in React, without tears","version":"1.5.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.1","dist":{"shasum":"ef5687e1ade5b1fe5f1d51435b422238aad107e9","integrity":"sha512-FBWGBKQkcCE4d5b5l2fKccD9d1QxNxw/0bQTRvp3EjzA8Bnjmsm9H/Oy0375UA8P3FPmfJkF4cXLLdEqK7fP5A==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.1.tgz","fileCount":27,"unpackedSize":1018924,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcad4mCRA9TVsSAnZWagAAMBIP/R/6KHS2N7EifXAwsW/Y\nhhwIR7FSAz6quyesQdNDgDyWXzn2fN/LT7f3dCc6NteAmEvAhQ5txiiX2Eqj\nYKmJGx1GVZPFLaQSq55VEOzgAsLnI3JlAVaaKbWUNkVWYNpFqfksn75hD7G4\nbL07A/7v4k97Dz9zn68WrbVGj6PD3457XZ/C9F+8FGpD/IvcdRqOTeDnHWo9\nOJsDhcsl7GXzYqf6w91j/RFnYPQst/Mf5TvQn1iZjF2PGsu9y4+NWSQv4bi+\n5ux9FC3tQcv+5AHF1YWpShhK7PkHMJa63SdzzeCm2nttIaAqRd0bQXHLCfG0\nSyFgvXM3Sf1stYh+ZcZf4/YhN5/ikwQfQlcfLlSGseohA4SoeSeC7KmZYJGp\ndo3wQ913obD097hpHmssFUW9z3wYU/4zkJG0CS9HLwygEvynU7+Ub2VeVFqi\n2AanZwm/kzmtN/R2AYJLbWW/Z0BVbaI+6+xns0AOIL5P5OigPDILj+9ncGew\nhhNXkyQhdK7bZ+jMDq/G6YdxlH0hCGzZWXnIexjcnX2HhpNBf8gf+cVHecfO\nbHJGdNb/FQcdFt6awj1xhxRVnYUxiiRI7smqoXZX7UMNYCX0i1lGkvKwerJ2\nJ5cCGI2YEpwJ3WUs3ve8F9VvhEcOR5qrNbhIpzhHDyzh/vFVRhdOBfKCdHQl\nyFzY\r\n=b02v\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDplEzjwQIgGMKDo55fcI3fbSapva5NNYVr3f7VzO8QXQIhAPj4Q7q+tV2lHi6Md17+QCvjtG7E/gKh7kSKQXiU0Rvy"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.1_1550442021423_0.8169244795772541"},"_hasShrinkwrap":false},"2.0.0":{"name":"formik","description":"Forms in React, without tears","version":"2.0.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.4","@types/react-dom":"16.8.2"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.4","@types/react-dom":"^16.8.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.8.2","react-dom":"^16.8.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.3.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.0","dist":{"shasum":"138263ff31559a9f9e9962d997bdde671926c2bb","integrity":"sha512-S+Ghr9czm2rWwYADfyTPxRVQiRDS1eFSIiIFQIjL4q+Tx4PQXY8MDLH+H+hEFFa4ap44Uk59Sfp+iwQf3xfZ9g==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.0.tgz","fileCount":27,"unpackedSize":888109,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgnkECRA9TVsSAnZWagAAb0UP/0Qx0q+rve6myq43hXWa\noURRudQLiLCWxmSVqeRaPgsQZmh1x3jfHwUH2NIOnIZMnZRp/+/eUoF+h3LX\naJC4Yk7xv25hg1YCYltStxDCtxmGnHluJmML3FY7G1KdSNTwM1Db22XmA05+\nfa6wdxMDujnhSn9QHGyUvgOM1CLBINdP3YlYBx3eNdEESraZRmpUBAql4hpW\nZF8n/3e38xPxN8xuGurEoa/mfhPlEIP+CqbuxMSQRLexJ/T6IyBX/libKlOs\nyk84ECSUTKy64nhMAs77SqEqlVlAUO38Dp4rJS9Gf1UWr5JOojLtWH6x/Gqs\nWeiRXBLWB/WxBAxVjBhZs/nXSOFvXGnA05+YWlMpmfzR3rpA73cXxH30i6X5\nAXSYkd4UxWJ5vWSwKo5m8GxsaTJ3Uew+5/DsmY67QG4il0aG0KKrgNhVYfL2\nI2/3ptfq9BBa22EnHPpEVjQjvDLoFfDd9yVLEy1HQAh/KJoOq1TdtdLiLAqU\n2Akkn3wGVanjzwjsZwOZQw/BD0bTJhkVkiiPJtJ76Udjfl8VbnchgZcuVnc7\nY0iCiQq6pSdiwd2W13H4CAniU5sSv6/jGIgjCWiXtxZteZAlmM95bb3cWJHR\niWdzApW0hgJf41O9kcf/1LpO9gU/7RH1I8kHgL87M5bZvopIJ1rMdwMdih4N\nXjWA\r\n=/VWf\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFiBWJisAaBAEvWlQ7+gbx+BbX8PJiWRvSYY6qIZja4MAiBx2EGAM4p7Km0Di6zIIWCpyFx7Ky9C0tmUyt9XIs5zLw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.0_1552054532273_0.7728108843523269"},"_hasShrinkwrap":false,"deprecated":"This was a mistaken release"},"2.0.1-alpha.0":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-alpha.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.4","@types/react-dom":"16.8.2"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.4","@types/react-dom":"^16.8.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.8.2","react-dom":"^16.8.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.3.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-alpha.0","dist":{"shasum":"6f6ff1092b799a65cc42744c069fd11823202296","integrity":"sha512-Aa59DE1p1XAM7XTS/G9Z3xVZUT6v2D8Fe/9Rfcx4NEoRozpeET97UZ+XbtFWIcS6bN0QG+OBb0T90+GpBaQzQA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-alpha.0.tgz","fileCount":27,"unpackedSize":888117,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcgnr0CRA9TVsSAnZWagAARX0QAIVk19EOvwhEptWE+IyP\nwvbK2e4iq0OJVefeBCeN1mcDT4Z7yf9y4mIlBJrkvd6k9GAgvOgcIheZf71h\nhatBBn1hDDyYsWnf4glYet62jcfj3Te37eSXROYpIaqqLCZtNlCPU6VRRCbs\nOiBeImKVA0/TKZPKGqVyLmkmVL2/tXFA+r08ETlkjoW+Ik7B4ejKxujfSJk7\nzzZ1X/TY1ArIXmmbpGtotQh8oHizPPrRMWNIyU+1QU6Cc09qf0grnRtaWjoQ\nobA58cQVc44LDQ/h/ZuVCsr8LnysRIEK8HbPkO3NzBD9mU2Inm8h6F96cSxy\nZ2Wyqc76z50irA2oOqffnGWlmeVQ1pPqNYiF7zjELZga3SQsUIA08NmF5RWL\n8wiqPIh+iRxNoLGIr0ozCt5Emb8JTWEgpBrBu03oBlVhLODdjtG4yCHlnOv/\nQDn7HMXZtQswznEzkCw3oEWJ6P1UaZr3WXzS4u2KUtalGOGXl7LTp6GVih1u\n9A0xVJM9Hy59rU1XifxkolvBs7EYUmDU5kj7nOTkDBECZxxJa4oyl4ZxHUfX\nlaGt1e86PeO0TIwmDDJqR/v6KLPOsHMXMQNs/1VFWhhHWUubXzIIrX9/hN9+\n1z3MBXd0FV9nd2rf51we9n7X83RjG/2Sl2a91ydchcD4+xuEPZNMHx2bcL9H\ntqq+\r\n=/N0F\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC2sWoaPOvn/28TvZdpfRtagAfUCFBvZrpbTwenHyFQ3gIhAPPqdodOR/VFOxhjpNnRUPKHKdnvLaKLagOAJoSnycas"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-alpha.0_1552055027365_0.4143511716940207"},"_hasShrinkwrap":false},"1.5.2":{"name":"formik","description":"Forms in React, without tears","version":"1.5.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.2","dist":{"shasum":"bb46853f10433f6f0a83415122c2a8e7e2e285fc","integrity":"sha512-gVrNN4OmxvtwV4IvoyQJk797D3ptl3X8C1lJjbOBX48EFxxFTzchtUX5XiDSmhMIhtsg2rahT41VEbZPpgM6lQ==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.2.tgz","fileCount":27,"unpackedSize":1024586,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJco7p+CRA9TVsSAnZWagAAmeUP/2P57FG3JbhsdQqZ84j7\nW4csw7/k9E5vHZSWZZtEWxld2j9bthZtVAovY+31W1X/TtycwOfvv4xwZAcH\nSDOcZf3/g2TSyelvxZHHSf+2iJYsZlIuh7bk1uhOjvEZ2MZ5sN+R0me5BOxX\nzP9UFLAI5GXj4iP+k5akZVmnN9Kzj+o4OGKGeJA+FGffblpb7qYF0NC+nz62\n+kjHeAd5wkEnygfFALZNzRAUgwWVknET0WbrYsBfz2LyEBOYXlmT9negjDjS\nbqYsX8MICNlNHAXKXjidRcHT9QRTGCBeDEXoji5L6EtbZAwKPT2D+/yejNCM\naO3OrrLJFK62+bKZsn67JTYSRnIWmRzEHEpb9zOSzAnDqZf7EOp+DQj36rsq\nWrvaIEbG+5wul85cYUT89i4q7oOzvKshr9ojRzBt66LbilBSZCvMjzndiOgV\naZRCpFwt+Psh7lv4MZwrXdBteoslhtEUpxDkbo/Pd0nT30sDjeDeYPmfkWzZ\nuFJcJ6fzlmKSzgezMamSQSF4vyEdLWg64+hnRzQpro2q/e+mRJHlztEVBCjk\nI4kZxn5D163170DlLVKgScX2kIleYqvy547tYka6D61C+Gaulkdq87VEglMv\nOlVDFefXlUHBQIe+1zRRh6kMITkV2FXq1HWc6nZKfPhBDQLwAKkcInIf+6IO\n6qOV\r\n=G0CL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIB6RJTOal6BqDq7378tiPuCpqR55G8DKfPFJbXL4P3HlAiA12Jk35Y+mIVbWoBnRcZLUIPxGjFtcsLyg9JSwMgR31w=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.2_1554233981644_0.8930726459321336"},"_hasShrinkwrap":false},"2.0.1-alpha.1":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-alpha.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.4","@types/react-dom":"16.8.2"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.4","@types/react-dom":"^16.8.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.8.2","react-dom":"^16.8.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.3.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-alpha.1","dist":{"shasum":"87828e5d94cf48fd8e965f177dfdcd4a59da4f6a","integrity":"sha512-33QRool7oupFUirY3oo6rweLGltwMB0I/0I6IpntvFu8FEwpF+fh3pqV2GcFr1G2Isqcc5dxOzNJMwe6tN8KLg==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-alpha.1.tgz","fileCount":27,"unpackedSize":896149,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJco73oCRA9TVsSAnZWagAAczQQAI+W/g3XAKzgxPIUZCPc\nQ3QiPUJoxax5b5qzg0dW6FW9ULN2fFxpUhONjnTQ78tFcNkW/tLoD0pq9hkw\n5uEeBHevB8Mtf12RNI4saiTB766Q4LkWMdRSO0h3WZTRalvsXhYZ9NJVl+Vb\n++4M+Jb8jduVorcYf0tpgS/viWfi7WEl6j/iImtdy3ox0SYKczc8rN6py25b\nkvhLBggmxq2kYviartPuOwjpXhVQM46kjo3jB8tqFaAe2lTG61WkVYUUZrNw\nXCJXSAW1xonUhlr9vbDa/9ITzdapsmVQ7CUvpZoDqQjXQvm9yItWGxEYgy/0\nwxk52HSQ8oa4WdPv4VzUgvzUZJWYo8Eidzqw5r8ucYO4MPKR6zwIV+KfWQsR\nYH2/RYB3WZoDQCY2NQbeBkJFx1h/CAq6ufSAkhx/zdfMLglUx4a8J1wy3RcE\nIfRFaVfT3M4CWDcZLIshdZ/dn7Na3fGwa6haQBihdF8/GjdZL/6QIvFPTami\nm9pknNFSnbM/QMZnXzhrgS2BETdyU2wpxUlTVm3ukfLqx24oYbiZ7ahVD+3Q\n49bwogRSkcK0Pd1HDec+DwqFjAETjE4tIF30GFZ9pamG3qKlK1qj842NRY9A\npX+yqO+7Ue1PMUYoxVacGqaJiKbOBP929G0OA+Ga6ZGEEp7r/6ew4Mw3K2rq\njDZg\r\n=kRQe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC3Y+NKe5ry1xQJBb4O4GrpGJQ7ry7njbfG8VUyxTrcVQIgQe4Nl7R5nZpxdon5sZCt22M3MJzwSfxc8TgOoQQw8AA="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-alpha.1_1554234855892_0.8412364839541577"},"_hasShrinkwrap":false},"2.0.1-alpha.2":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-alpha.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.4","@types/react-dom":"16.8.2"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.4","@types/react-dom":"^16.8.2","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.8.2","react-dom":"^16.8.2","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.3.3","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/Bk9pPK87X\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-alpha.2","dist":{"shasum":"6751741d7ae2532b2a8ab683d074b52d9e4e3173","integrity":"sha512-B6gDeIpAb1lQ6ytsCsK/UkvhCN7NGU4DW4aP/W280m2Fx2urk5FwotX3+xAsg9YpKLEHRBoesdpgyHJLDKhHKg==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-alpha.2.tgz","fileCount":27,"unpackedSize":896825,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcpQ4UCRA9TVsSAnZWagAAOl4P/j3OPoLwBmNO8DqNDIE1\nM0jD+dC4GKH7P+lYBmBKUuPkBTGCj45hiTwA7aMB3QeXAnoTcNDoJA0iA/JL\nM1fBcW6UIpOkvWxuxrklz4WVPICEtfuXgj/FlWtRkZu0rqfy52FkW0AJ1xrg\ng3+cQH5fvXme9kOCJH5pRIK/thG15qhDQbOe4JfnXSoJCa5RQYAZAJirzNvv\nfPvjgpAA4+pKSPPetFr62FIEtOA0ZF2S+SAZLBkLE+lpd3a0kPBVIZjVFZrj\nMbSgmiP02VQMOKtlq4fmjNiyCtMd5I0cCybbG1QPk6PMhBtPF1+3L/AGOd56\noEhuGi244rm7jTnNPuCObsyBgIftn2CHU/CYhI8Evqcuc41oRPd88O9SpIDw\nrsQ+A9zDgfdAvLgJPqc5H4oTq2iVtttUD/4/yH4lleQi/F6a5wEv2O4KdhkE\n8m1wCOXKeAhyLmWQRYOW5Rpw39sS/eAfNNvFWLKJS7xzEYLYu+0yRWOzkdpu\n0D5kcMko6Zwgpf5v8XW5W1Zl1mmzZzzCOtj8kQ+5X5iKXDiS3xIqSIyyY9qQ\nWByef131Z3cStsxp56bZhZm4HF2f6uA07zBEEBIIgWxE0oDkw2jVvRPVBRfj\nT7XyTgNNslHMnPh5GAq3Tsyqt7cI4CuSpab0cvuiOcK/gDX+ZfCMzq71Ym2t\nz97E\r\n=FI1A\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDCDfax/y20pH2f6XkIPj9V9nr7XuKCYmbLf0qzHoAFUwIhAJmmMrwaV4bDxflXXebKfLjghtvPlBwuSsQAMvNCM40K"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-alpha.2_1554320915350_0.3720313328470448"},"_hasShrinkwrap":false},"1.5.3":{"name":"formik","description":"Forms in React, without tears","version":"1.5.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.3","dist":{"shasum":"f6e2dd84370a3b4ca44f7f963a4f23b7e0a2ac88","integrity":"sha512-SbNbAPbCD/aR35nJkTdu+JdTHw3sILYCC/ArJJoeHWlkDT0sY82ACFRx2VYH15odQ7zW3CCYN1adoZ+tb6QsOA==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.3.tgz","fileCount":27,"unpackedSize":1026454,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcwlAsCRA9TVsSAnZWagAAQ/sQAJAREdyeCh4KyuzH8bH/\n4Mf3Bry2ZjIV++P1InxhoK1uM5PL8W5jbFtnkqlb2JmnEN4aq3CC02TGUQpy\nI5V9VuazOhPgMog7PtFQ+3VgM9Uy54uMSE2VVxX+M+O//nNK2SqAg8T6P8H7\nG2sN+so3ZvRCEt0l7Tjw/elwkDpYBK6x+ULCNoZ0KHpNliQraaI+FXmpC1ny\nNBkAazrs7NCxNL7NpavrotyTG3fEVhdJ5c8Ur/nvtVFKCciCqQJOY9hBBqsI\n1V15hX2fuylbICeEUylIdTKJBB1F64kqssFFG/TpahWt5p1QxQYEsHUXn3e9\ngy85IkVTeG79GeGYS1HaP4WuHcnPnjv4yWpHHAmJjQDFtwhlr3zAP/pAW0sV\nepAuCoyATktn4+yQfupa8NlagasDSaAC4Oc5BrUDbmBic06tcoOuxU5rh+LE\nEI404S98RTYdmWxShvZy7EJrf+AMuIzewIkODfAvMOXwuUHksccQM/4IbaPn\nCDHb9Mmv2y2k4jOMU50aZSkCIvLBV0sWSM2zE8RK407BMthvoeec5nCNz5cA\nSx5nNBkjIZAj4SsMtMqPiKmAaN5qPaGOrQHZLkxflCRtuVVA7W3bIH+1RTsO\nn+YckxgbFOCr1L2alyJxP2J2UUfrsGoouAV1GMaLaGcNP+K50zII42vk4WlJ\nv2LF\r\n=WN+w\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDvmQgRHvJEcaWyCxS7Ugk4o4huzpREKGQOvqyL7iVyaQIhAOUt6Yi6V2G+HtjNI0R0Pxqgjb4G0RfKW5ynT49XfF+p"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.3_1556238379277_0.41214669683656235"},"_hasShrinkwrap":false},"1.5.4":{"name":"formik","description":"Forms in React, without tears","version":"1.5.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.4","dist":{"shasum":"e2e3182d030134a1bf7fddfb394290660212475c","integrity":"sha512-m7Tboq9O6MntCM8+J/b3jGGKXNXRq1dTzLvEdujSySejlewqVeYLy/goulrvr152wPe9ycKV0NlFSQ8Q1EwycQ==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.4.tgz","fileCount":27,"unpackedSize":1034239,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJcwybUCRA9TVsSAnZWagAAZtIP/1lwn0Saml2u9obZajJD\nFeT7V8ld96l25vvL0Sjnvdok1FVj38sBZ3sxRSSjfX8etmEDcePo6c9sfDoj\nXkeOH9OxlTXrwpqk84dWIX+D7ghaYoWHsy2+06l6CqQ5bPFPpLA6c8SyGTr4\nh1VVyi2CsDfjTT0F31mCOxdav8EB6pCDVabfDDq2QENFMrqTGohmQn5Eg3Gd\nVSu9YLnzOecTvE3go51ieH/cN9anRepJSiAJk36pyde8xpolQ2UxvwEzGwpi\nNYGvIED9b1AsdHTcdj9ma207Iwh85ziNjjeBESBkRfWcDe3QTMx8Gm15H9rb\n364Ol9hTdGsvs1sF/3htdIsTrAY7p082imQBcWfjO7B33A1wVXuVYL44Lt95\no6tq84KmcIP+63601G0LAoihy578Pl3EmmL9gaRcr/536gVGYn9T/nv5PfwK\nn0PvtRcQ19rZ4oaBtHo0moAo2qEbeEYu8jw6K/Xr6JcluJ5Fq7MtRekAlSnU\nahpwR2ciS/beNhB7Vwx/u2+LIdHbkkFWyxs7qG269O9+h/Dn05Y2gAU0bLSa\n7Yoflzo8f9sjzVAFYqI/pdZw74T/wXO+wp8tK72TN4U1ykueC/d8BcW9oAWk\nFgHCJQpo5S5i4pPQg58ESNOt2Q+0XPi7her9EFWgB9hoowgHb3n6Ltq0/F0B\nBV/D\r\n=UG3T\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGXy7/L8fSD9RYFMC2vHa4OJjVSAl1Wu41Ta/dMFFTOnAiEAiws9EFl8g/lxJKB/H+r0OURAkYsgl8CZSZ90hJp3ugI="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.4_1556293331124_0.849553842483054"},"_hasShrinkwrap":false},"2.0.1-alpha.3":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-alpha.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.14","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.14","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-eslint":"9.x","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^0.5.1","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","typescript":"^3.4.5","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n* [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-alpha.3","dist":{"shasum":"d6fd8147ae212139d0d1f1e07d8a722cc54521f2","integrity":"sha512-cn9qPWf2VdB6jpMqSkdxjrKneI+Wa8SC7xE3qzjSqikYDTLdSYT8RlRX/noYwAb0RFkRpnIsHcTmX9X7AQanrA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-alpha.3.tgz","fileCount":27,"unpackedSize":949682,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3ccDCRA9TVsSAnZWagAAESUP/jTKAiy9VUL0PN1fPGJ6\noL4VwwbARlCdA2hWi+lVZP0D1Aomqys2vtpiOKTDJx94q/jeVVP8x26JomGA\nUqSpsk75sR6B58M/qzQ3om0gADvzDlHQVRESf9kptMuNHr53pKb7JCPDb1GS\n6QKilnEcC2JvTDr9+/3cltk+35BqHpQ9bmLZnTy7sNvGmvMICWrygpmNQSPX\nnkWAhDnXCYYsiwsVEp7CmSPT9ThQPN3OHpPosbxTtO5lZTm04X6SAe7MHeHd\n0BQ7286ZY8/+bdvPANpCSMtHnNRM3s+kSNadf7FycFd3GowKIkBQqpACeOiV\nPLDB7qvzPaSZwRa57bKGd9nxQ3k1tvIyk28nPAY3hHxDzfAgI7ciz3GwM4mT\n4qv2nhFauUOrYdhmTL6t2VynWIk1KNPFhm/bPNgOld2V/Kxu5NLeZOxCtjJX\nREO7YivM08yXE46qTRsUi5AYFZ2p2QBenPf4V74DDV47MDKIYfhUNa1I6xws\ndO1seqQBRyktIjZI0BEJAn9ZSHr9scMljGGmtLvz+NQ+osTPstMdslcvaAHe\neGyang/meZB3dBWUdj0XTiNiaUTecAibnDFAfKGeWL3US9Ili2M3tdiLIJ99\nR25mbpFBxIt8FhxG2A82zddlZRGRQP1N69mfjBcsHMOoZrj7x6KfQmySc/Il\nKNJd\r\n=inr6\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCduIaIecHm6I2CeDaVcOVp0qz85eP7LdOxCYNxMi353QIhAJYADKM1G75T87oEQAye+ZDMwAKf6n7+4imTQtY6sRaH"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-alpha.3_1558038274935_0.49148203416255587"},"_hasShrinkwrap":false},"2.0.1-alpha.4":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-alpha.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.14","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.14","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-eslint":"9.x","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^0.5.1","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","typescript":"^3.4.5","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n* [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-alpha.4","dist":{"shasum":"41f707a704f9ec0baa5155e1595c23f42f93321a","integrity":"sha512-tqiPuZB70asaD5rkaU7WjTIuhBU8LiCK270ygG+CKKu8uGusl/446hubNDNrPftMnyZYTb4MA98XSpY9jmNzOQ==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-alpha.4.tgz","fileCount":27,"unpackedSize":950057,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3cocCRA9TVsSAnZWagAAc0gP+wXkGYvStXUgKt3Cyqm8\no135wy6v13QF4KXiFVefiAlcsW1gYJqVNFFTIk6m/OdcfovddtDkudhg/Ba/\n1aMDWM7CNEOuMpP1wJYz+7Gd/Ot7upp2Alrx+O4a6uyjAegHjRz4hVWNXoh3\nH0XEidkrjbBFmS7cB6hTWu0SCrE0zXV3AbjX4Gh7gtdCv2P/XuRLq5A9G/ZC\nmD73dmFPocSdZR59wUZlQne4Lo3o6plhHP6niqTxahxhiieTmpbscuKs97n/\nNUzyhCJAG7pL2JrbYGzm+ryxCDsahbY+xcTr/FRBc/7NYl8UZK9kNh8pQLlp\nj6xr4bwq/cbYipWGIAsW/EInv1C2cY7FkpDcYld4vFtTEnnVGIrAcbXNuaKi\nw/at/f4UOoNeJ65iXiZ7X1zNCNAgkvKMc/tplBRVrGDFYaAQVduvnL0JnxNL\nsKA20dUzRg6leVCu5OJ7RwoZbs8c6S6jz9WG0voYOrtI8C3IGLNYmPF2rA6f\nQeR87JIPD31+TycK4+2VLfpW2R7k2X9DTgE+KQom8HVB4EzssRhEPZfqCjCQ\n08UB0JJvYKortqI8DZKqIxamIm/JZlhwcf0tqTcqPPuC2EdfFz+PTNvnJRYc\nFNRnNom957hOsQ70ecrKS++pqJL352DK4D5S5AukDqGcxmt9jDwOMhqaLkqW\ngH90\r\n=6uEs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIF+OFr3G6oklM/DFC+WMQIrpV24z2Fl3tLRuHVXtQ26EAiA3Yt9Z/4n6CBvhrCzHSmz2b+x7eLvVSgJWa8LLPLtbUA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-alpha.4_1558039067766_0.3464712131253631"},"_hasShrinkwrap":false},"2.0.1-alpha.5":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-alpha.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.2.1","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.14","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.0.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.14","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-eslint":"9.x","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^0.5.1","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","typescript":"^3.4.5","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n* [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-alpha.5","dist":{"shasum":"0ddb477328f0ab291d155e80c7a75d0076f8d750","integrity":"sha512-33/afHKZwM66llB5VUYthePMUbHukdpDJBRl732e8TMObxvPIYMaN+z5A6anNVXk0dX8Zq6ckCqXO/+KM9gO6g==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-alpha.5.tgz","fileCount":27,"unpackedSize":952872,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3dVACRA9TVsSAnZWagAAUuQP/iz0/C9UT2neSKZ5CpAZ\nrExf2/5IxOGRoif7ilJGbiVJWyoGelyduVg+Dnj748YfqeEaHORp6+fvbXNm\nnMMfXwXHbWbCFCPWw66SViL/ZPViB6+BRb3+mEkRhcAHvD3rCBx63npnZF2N\nkTLw7fWOM3LMi02KI3qbHlEVmYsbpWuKt7Y0QOl5poPAAJARS1hQ23ewFTpV\nsOfoFMIoyLJAX5c6e5iXABgN6heFpKGCuZ7nC7OpkknjCNIzqNfMcyyzhbqE\nA9dZyU6st9ZulZtpPc/OptgYKgJiLmxivRVhSmkvF5yr/nf45wDtbOz+sMsB\nh6m6rqvWpKChQFujYP5X4mi7zlp40OkQmUvnVdNHYTN+WmtD9uynJhU7BvVo\nl8NQfoxX2OkKsnpkCgIbiZwaN36575IRpkXuuAeglk4EPI101G0hsyGUvZZr\nAaiLEewbCcy2XZcJIuwoaAjNLWxOgov+BAxvp57mCaXxucdWYYV7rVcckUog\n8RxkUkwKnSYvrql330Y68g+IMRV57p9IsTah35Cbg32SbJ4734sGSUYwOlXF\nRXivqjxLXgIOoL05MyVd8eyHxugLCsQaGHNMQnDnPa72zNAJADLkKgDXsLmj\nE7Pw97K5uZosc4+lJ4kaEhVL2RM9JrWF1uwyKFTYzjUreJ5cOivmQXvgtqSx\ndjaQ\r\n=/Wh5\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCZVZxBpKXL1FCU2gb0wZ8IKwoxBWNVnow4l0A1dCTangIgDXcfm9xRBiAKxyyCRzJ9OuCLB4Nibc/YMQXl95+hm6Q="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-alpha.5_1558041919800_0.2238160122810613"},"_hasShrinkwrap":false},"2.0.1-alpha.51":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-alpha.51","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.14","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.8.14","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-eslint":"9.x","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^0.5.1","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.5.11","typescript":"^3.4.5","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n* [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-alpha.51","dist":{"shasum":"347153514a0734c6a6a9943c2ffa473c20475194","integrity":"sha512-MnCHxvq4lqENFgKi4dQ6Uc6wwPKyaAl3IeKPyYqsZLC6DGM1/LgLKkf3znJpjtLEHaKGeSBaNTA3qk2d7SvWeQ==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-alpha.51.tgz","fileCount":27,"unpackedSize":579344,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3eMRCRA9TVsSAnZWagAA0eYP/jDQs4sXeyzr7A6mfu6g\nzgrGT5FfaXW9PCcKIFFyTyijq1ZPSpCXi0UfKymCcVIeMfEsTMoWp3aQ1sGi\niqUdE8TKLbZLBen6Fwi9GIumHAlGwewt8gaDN6uqErVc/hg8SWB/U1a4NeCF\nCAfwlPx3zXHIjE3dq/38qSrWlxAQtGdrc+9YGrtYXIqBGHhHXTa18D/+9KXK\n7EZNwiI3Cmjs3XJWFzcLsOaJVVrvRSvxdeSpZldDHhloHTF2oJAaqHBsDGwz\nLTpup7ijAi7xunaP2iX6X+Kh30JGhklF4l7lANSeMNHz4T9gX9nLAZGn6CJs\n6oX+x3NHpYWM/vr8mSc1I7xueB7/frJJtoI7/E1knkruxV/KjINpWD/xhEY8\neTvn+iRiZCFb4pJGxzQl+sFImTLBRP7S7vP6LW/uoY09yC5yXb5C8Qtw54wg\nkVC2Nr/3iRG/AOQJYX4dUA+itKuFdmnkX5z9ZW7yxUUwH9Qj4zDAIAK5whUt\n/hJfbp2g4uYyt4l3iz4LZF7b7aiJwYobnEjftUFodFyNbOxrwIK4UAvK7b3c\nF11XzkJX13Mly4SOibyOmA723SZD8XfEt0U5Xq7CnITkIBD68SiYE2X8r8yn\nT/Ohbpx/tjehy8KIySvSDgo2bBWL9FLmSoju4qYt6kCp/85T/lQ1p0E6zxHk\nGNUd\r\n=eFwK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDDjWxVujus1jEvWuOH2YkwSPjXT+X5vSSWvvYZ4V+KZAiEA0Lxr/uR/3HhPfmQzi4AohLSRlJLxPRy8hCDnCc6diZE="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-alpha.51_1558045456492_0.16562469656685508"},"_hasShrinkwrap":false},"1.5.5":{"name":"formik","description":"Forms in React, without tears","version":"1.5.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.5","dist":{"shasum":"fd20ded576e532c5ff9b7dc249229faf6d17aeb5","integrity":"sha512-SV+HrJRYc/B/JG6m1sdgY1QTBWztSktcc6jZMuF1ZPUwziwQ5r7mQcb1ULjli2H2lRMSVPY2jtyceoTeMMn32Q==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.5.tgz","fileCount":27,"unpackedSize":1065460,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3yWACRA9TVsSAnZWagAAEpMQAIVZWOy76SZUG0WqzSu5\n42jWr4jif9xxPo4RDj463A4QvfAofdlJMVhy6T/1HglvcQRsLWOgIvofklBk\nFJPrxnMgxfRyamTpfaJXzLVaMNn7WWa+tpEhgG0wFA/w57LQ6/84Dagvk+fH\nVXxncG9qrTV23gOw64uL42NYNkeaxzJo1xP3QTtuAQ7AoW2sRm/2kgJeYQsR\nWZZfHyOkYXM4Tnq2tN8mt4U9oP/wFKb79bUgUkWPM9G4oSkRuXO3BE5Ut8uH\nUExxBxgdruBsqyy39OirUt2AhAAc7S/8d6VzykOrW/mJbk/3psKfakm3IwDW\n4zQ1h4ADv9sTgxvyhhqjX7o9ovJICqY22R+MhyvGzG06Jyv6ouaqa++x6Sd7\nsBhOsFldGp9YmtEYe9oY8AusoiGqfa4fgbFb38LIpylGyyvUXNoUWcR6hzU7\n72ouVQAfJMk8fVcjA0mYUkUlMGJwcBYoC8F4pQMSQFFnEefe7cSkJWDz1tsD\n7fF9hTzw4Uol5gMwYifP1y73Q80S8RHa8p8Pz51vNnD/srZfuZpZRoHgNbxC\nwOsE+xVK1d1BvDuAupYrxq/vvrUrzamb5hSs91o5HZVOn/M2feeA5l8rv89n\nz+qmyOb+xnfmLkJPMzPj7u16JInkimXjdosyiwk2tZWSmsT1aLAxiLGpn1b2\nHcaP\r\n=Y+Gg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDsaLytMAkWPH0Plne/Os3GM7xmaqDEpJ1Lv7WGyfPk2gIhAJPMmuGbBJZ0DbTMmiP3urGUfbqMkmhysSVbV62bLWnt"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.5_1558127999860_0.07996062760775646"},"_hasShrinkwrap":false},"1.5.6":{"name":"formik","description":"Forms in React, without tears","version":"1.5.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.6","dist":{"shasum":"60a00894fe9c162f3631ded83ca7cb866c74d939","integrity":"sha512-gP4eh/GS173RV/K1dmG0zL0T+DoMVaKH1i2+yKFmG6Tfdvd/HlsVcVY28bgvHA/IxdHPmcVVTr2KVRe1tSRj2w==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.6.tgz","fileCount":27,"unpackedSize":1070342,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3yqKCRA9TVsSAnZWagAAmsQP/2zCo/NysMeVQFHtiYsQ\n/OBSZbRIOUEye6fwyDvagjx9ZYjK8yyMUQu0DtQ6Tb8cuMwSpzVfKhudvGmq\nhBAP6fBdIg3Lk3QQKApPSQV15K6Xn/wjrVDlKtVo+G9dIE8Tc3O4ZbdC1JHP\nxNiAUyDpK1vUfz0OA3Nh1r/NRcRbyn7GZIPIl3wV1ppUT8zYonfNBkQ+RWUI\nuQolTbolvt6QaUbSD8amgi4AZy6ALlwi19v18Pww08xR3xv9/XXpM8CHSx60\nQ0lCGjoBEiyc4lICJ7Wde3LlWo6irKMupiwbEXXhqNSVNI1Pf66+kbWaijRO\nkwmLDKVv4SbapOeot115cQum54W9KRVXlQ2ZTrenCOQQQL+DhJk1QdcTY/p+\n1PVsmHDeB6H+Cts7ErbURIqxZS/02IlkLlvrOsmrDypy22rgX4n2S/x8T3ZX\n19HwJ187oHNvI0CRqGJiTIclpuMfWVFXk7HcwwX6Jt74NG+0K+edc3xEC1Wn\nJsM0j0is2ZQVMXRPdQsj789sYUyfIpWqSVnennryHUsAcs0ThKxTuaWSr7gw\nYMvHHGU2XMAtl2zDk5xMP/bND6TiOpZ3tcOTMT8eIL7G6Vn4NhU1wndFNbTc\nzzod2gVR+qLTpM9ySI1bWT5nRQ9o6Xq2cuvK96gjVK08dNzWVkUSoJJMtoRv\nHurC\r\n=2bHy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCNWeQmQ/i6FYSsC+pj2behBTFHUu6y8FVdWZOsU33TIAIhAJM5k5xbPJD3P+OsDfp1q8aGjoNx4yN7GTQC/uKTV7KT"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.6_1558129289839_0.8066970653131402"},"_hasShrinkwrap":false},"1.4.4":{"name":"formik","description":"Forms in React, without tears","version":"1.4.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^2.5.5","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^22.2.3","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^23.1.0","jest-cli":"^23.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.4.4","dist":{"shasum":"e03c25dfced28a4777f30d1440b4c0b200df6ff9","integrity":"sha512-WAMhBezeLr1cpCZqK0jjNsJY5/+mUsUnyQm3oTq0krlXOgo9oOZd1P+RjACJKF4cW7gyb54x5huoJz0dX+IQcQ==","tarball":"https://registry.npmjs.org/formik/-/formik-1.4.4.tgz","fileCount":27,"unpackedSize":1008226,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3yzcCRA9TVsSAnZWagAAzD8P/0BmYkOujfaXUk6XBLhJ\n6BcUxccpteSzZEe+UH+3qCrm/Q/VItTtQgMerCUBVjC68EA39O7z/vUePTZz\nE9CRRp7CqqoYhLH6MhL9nklELI3rLKQ0bDL/Zm5ljR3q3jJV0axA5xIskzeR\nCHyFAj20aOHns0wfTOR1TpaQX6aQrZow3SfY964Dh/M7Y3HTHQGrA8UkCI1K\nUKrfSDZy9OvMCqFRSM/g8hePAgiyTxdXUBuq3AhOLmk0RZf72N0/jvjP/Vus\nYzb4u5GxNzHHPRQA1VIb2+AhQWL7dyFsXI7zNGWiQwmOwVuFQUj4nSFSw1/v\nsWeCI8ATzogOTua7SNhuaZTX5WiNObS7JVUXFzVMOcl77hS4diIFwvBH73Ks\np7ToFDk5F5pYpG4oo58uU6ub91bQm7jqW6a7CmHTTYCGc5fg+QE07VnrCJ91\nv0mgrLuxn9T96G+DCcoKR4rwQYRCm/c95RbBpVZfmJX3moc3pRTRiDrGmA1Q\nw4LZp60in7d8zwmglsu8y4WcE8Q3hXGeBP3xUttMZQKZY2CjppjPRbvTK3py\nEgqqbkmdoc5G//ATWVwc+8VZX2SI/zgV72LF0K4BHVYP/TORmRoNNhVsqfr0\nV7vlYq3iPo/xPnBi9DTCqY3PRy/shyOP6HZ7d2iAWiROFKDmAXHPVh6ub7cv\nKGp3\r\n=MyYA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGj7RgNy9izanlJ/hQqt4Qj3XoXTR00OUDHpXmthnkqnAiB4pPIrphyR5zChpQANGdGJqEXupBnrllt6X0u06FFKfA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.4.4_1558129883958_0.15127743004807592"},"_hasShrinkwrap":false,"deprecated":"Ignore this release"},"2.0.1-rc.0":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-eslint":"9.x","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^0.5.1","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.5.11","typescript":"^3.4.5","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n* [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.0","dist":{"shasum":"02a1cf3616654578a25628d62e0dbaac4a9b2180","integrity":"sha512-8v/CAODLAASE1Im/xx+UpbB4cP+VWEfCziMTrFnCZLvw7oqnCtY/uSeT3r33LWPsoEbhOj9ZZNHTzfehlR2kNQ==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.0.tgz","fileCount":27,"unpackedSize":578718,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc3zCGCRA9TVsSAnZWagAAEhEP/i3XhTZPb3uoZMvB2ujt\nybIwEfrtzxwh5dhufpg+ofC/aM8qZHfwdORI7OXrT/gonzQRKhlZe3XOqorA\nGzB9c+ETvbQw4g9hcWOjIsDKOhIi2bDPscHXla3E3E8UTCgUUGi4m15rhR4A\nf4A5IbXjoLKJdLQjgH+PteN/3sOtxFVGfbw8UIHYMn1nfkudxRd+gcHrX0lR\n6mjZrzsPhsKIjs7PnizOc3FRYfsotzY9SypO1vms1o6xe9EcBMuQp9uBgAWS\nbGzlpP9N7GGFcbJdh59btGiktJlnKUDjdYmofdtlxHLX6cyy6qpoGkv/gPUk\nZBRBmQVGK8kNK4nnL5vXwD5YsySZ35m+NCXB/kFLgCKuFWFavNKSDdmazHE8\n79xRTk/v/hebwzbs4XRpX0hcczKy/jOGU6mCCLkHBJozLnL9hipy7nE0xuYf\nrhQigPdmSU95BBD9ERhOg7UpZJ15yxQuvpKiN7XgPPkKUob6dhIND5Mh/72i\nn520by60LdhD3kIgMUnO0680PqUjG37j8TTmyb4+oljQT458UCRHNpGrUFIR\nX0NoptNMKbB9xznN6XZt9q/xXu57dnTZNBXUvHsgPKXe3k6PWzh4kHWOWqTu\nDCKjuYZfG0Nv4/+DOBOg0q/hfiZDlfhVof6ZTdaKy72EV+V9anFml2HpZpLL\n0Uve\r\n=vaFb\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQChim6WwEqY8+Zp6t0iDgaBBxs3pDsGptlJ/6cYETCM8QIgE3RjVKc0rzMPskVQY6sWvDlqQutCllCWMlGWYiubdmI="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.0_1558130821698_0.8323902454859367"},"_hasShrinkwrap":false},"1.5.7":{"name":"formik","description":"Forms in React, without tears","version":"1.5.7","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.7","dist":{"shasum":"2fc5fc2f0c693cdc4e8c9dad3a10eb4c4e131ff5","integrity":"sha512-kZo8lS4WzfC2uivnSkE9DOuX9x+jVjCtIZOlb1A4lHGeURyuLt6eDfwGJzNlcP0lXIwmpANKzegiB8j60B54TA==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.7.tgz","fileCount":27,"unpackedSize":1070362,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc4KnxCRA9TVsSAnZWagAAE6AP/291Ar9By9/tHtHhXdOh\nF6prNO10OiSBVpUyvDNCV/AoUkB2ZifHGpzm8sUdjBd4ZVx9GrbnY46QfVHJ\n5S+dRX/86+Q5V6MOsCU31s0r90b86zNUaYmwARGfxdHc1uM5y5/kyiy/8Mva\ne0om36o2w3iNmAqP1eM753L4fcCceVRTQAOK2ClG2WWwCJUegU8gd0BBTYn5\n3aiqWVlQPovSTTRRiiqnRVHCx0lzJAcIURFEcsx+UVgyhCYP252OTHCFvHW7\nkgHMPJhiO70UT7JDJy+eqQpAVBOwdk6P6lLdCCEgGBeqhK+uVGI/8qDPhko9\nvvUExay9v79dNg49TT8xNDzwwh6/tbiEAt8edmE+8kHJtGDCQ1psKg1eRc6k\n+fzp+WrHDxbS4cBhfOatBG9l7YfbM87y8sNA6ACy42TkW3Ar7RzyDOdwYmHT\n/mVdAdv6sD7hC6tIdCQ0iHiIXsfviLy7ho+1eGEzAzaW3+VH4uSU6TMSiki+\n2tl9/9r7+qcjMJIz6mnzSfpKRzFAum4olNNEcvI0xjPykdaRfPr7ewFgtzGp\nNhCaraBe1b0196aKTKX/JsP4DZHMBBo9USF10yPUX9h35/Y7xJ8CRyWZFT/B\nbomsGcXfNZa9IYermMKRAIUVkRDgdQnYepq/qPoi6cmZGJhHe07qcQaFda4d\nDveT\r\n=D1fe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDseiYkf52i2wyKe/FRXcL36v35c37/GvkXBRqW3mRPLAIgfJurN+H8e+oBkzmisSoMHfXlkMolvyQsYwv7D3R9aZQ="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.7_1558227440853_0.79595674355462"},"_hasShrinkwrap":false},"2.0.1-rc.1":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.5.12","typescript":"^3.4.5","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n* [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.1","dist":{"shasum":"5025b1731378db1c9f0560f9ba748e744854e086","integrity":"sha512-mFIjzOtvyCPE37xWA9XSwMtMxXiieBNnQARtZpdbP2DMIzbSMcwuup9WIzeO16nNROMBqKzb+Swd47t/HOSeyA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.1.tgz","fileCount":38,"unpackedSize":598485,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc7ZTdCRA9TVsSAnZWagAAWDkP/io9xJt0bj12/YyLwoUA\n9kFpWIhRIaKRu4XUgB9eym6WN61wRn55xcggzAvvHLNYtCTCRiOKcZ8SIJ14\nffEmadOx2y26arT8eG2iojCxuREWNYxtDmUbFGj0WpJ8XVU+N0/9tZ7BlwPu\nR3CISUEb6URMQ13DcqyEqatjM8enUVSPeMo02L054Y+6oZ28PR/w1bW7oEkC\nLLFqlsvfPf7L6LdgqVydDVSe4DiK7cPxNMp/djpc4ZgNjijXrdy1jy1NRqus\nl/zs89bQ/Ql3N5bY7QzgOa3FVEct9hsDw+AwJou+XVFGFFUPKWVpb9M5gyd3\n9J2rmhEFF8QUyLw1nKVa8KLnTwXKV8T8Kjn0HQadaJauT6B8WE3o+3WfNCdX\nSHdmYMmo6GaDgDBVaGCwSpSNZzrz5BI3t9VcpYXjSEMLKz7tjANKAKJC2HW9\nA5NKmUOehxjz0VMwft0JKkaRB93uabkfnA+XKAMkPvzbI517H1ttr3/5Vwui\nq1FpRhzoZ2+47RT6/wKvXn3h3bGeDqh0G9necJjLdM6oTJkFjQXtvf7FeROy\nEgKkx1TGIrlTKsYTgusvhB1CR7PnvUOtu5fzCenGVWwK0tV/nul5vpceqH20\njE2PwtjYhzLrS23E2f4pxqVWDSl0Dnq/XNCayPWP6w3T9E0T3wsjfW1yFLyN\ntsrc\r\n=y//B\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCkyWg0/gtvG5bDtmfZCdhcuJx5FcsTSAzi5I0eI6v7CQIhAK0iFmonVTRs1ZL1uwSCrMjij3xLhEVr9khiu5KVlNj7"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.1_1559074012911_0.706399326076528"},"_hasShrinkwrap":false},"2.0.1-rc.2":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.6.0","typescript":"^3.4.5","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n* [Get Started](https://jaredpalmer.com/formik/docs/overview)\n* [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n* [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n* [Get Help](https://jaredpalmer.com/formik/help)\n* [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n* CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n* Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n* [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n* [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n* [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n* Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n* [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n* [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n* [TypeScript](https://codesandbox.io/s/8y578o8152)\n* [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n* Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n* Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\nMIT License.\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.2","dist":{"shasum":"21ea55b915ab921e4a27ebf5a6caef5f299776e6","integrity":"sha512-fAh0pNzajnjW/z4mrR/WGlfSP4zjuDPi7b1Hh4blZSPXCHIApL5fOW/aK7FIgAxHnBFndxmBebON0up0VcqUhA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.2.tgz","fileCount":36,"unpackedSize":596622,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc7tufCRA9TVsSAnZWagAAEA0QAJ7RXYrhU7R2EjUSKTug\nplsAahyNbdX47rdqGNP0dCQihP/MheFhae9OqZVSwECHkIcjxf8GSJ5K1NJh\njUh7psei748SiROVL/omaTR+OEDEoUiqZBxspM1zDMqq6w1wX67rUZKOjUf5\naxHWEBz69aYKb2wwvQCLExYHqqNY8r/OWHyy9zGUVyH9s/E3/Y3v21ad1Xu7\nYN5RMJ4WQ5+WfdOWTf8SaVYcBEwDYXOLPqibMVOIKMZl4uSIWDyrdW7GK4N1\nqUac1izTlBdNIzRzxijM2aXfr0I4NzsgBz/+wPdO7MxP95A4yWuJWFqg8T6z\niHbWa6BtM17R7bMaWj5SEi1IPclAXtWHWHpkFsjQGWnLSK4BdiqkmQpi8FJ4\nrMSz/NhZTSJM7U1wFRlh5ioXQSB/FF4ch/ajYH1H9/LNds+NpTgXoUaArhsl\n1dhH3sjw+689rBdzFfU8pY6Vx1YYv02eLeuW8Z93yMXPClmz4H3xGh6/x8n2\nUDN3dA6Ec4EaZc3k/mPemzy6uEXRlOuOch+MmehhE5DHw4sZoTSX9uzTqDhs\nmdW54//ZMXOYrdHChyu4B8iQKpLI3FT3xosvvU2lWUa8MXkhjjhNJavRQYWT\nEu6ZEmhZw2LDmJM+s9ugy6Lmsl9saG+dsDDpfyPIqg6MYDCsRHlr+0QVRBVf\nWdfm\r\n=SX3l\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICUrAB3Eg7d4TUAFT0lVY/NjbCzPEUuahPxHl3T6A2koAiAIEBQ2AEHGYA1ndctEe6Gbta7ws1K7h+jqwwrrk58b1g=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.2_1559157663104_0.413530756460897"},"_hasShrinkwrap":false},"2.0.1-rc.3":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.6.0","typescript":"^3.4.5","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) branch. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.3","dist":{"shasum":"710614fd6bfb7812b1bb03f354c91612d227cf1f","integrity":"sha512-3RYWo7G9tinQN4DXJE+Wi4Ej0TL4hFTMdi0a7u0qMragpk7CQk5yiG86QN6D3ZkwiX+RcYuCDx5vbsZB7AMLxQ==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.3.tgz","fileCount":27,"unpackedSize":600327,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc79R4CRA9TVsSAnZWagAA7kwP/07Y7APSME0dMlAtcX0i\naKuax+BXq9lvbUZkstMUe61okJAHCbCJt/uEbCqG1+Oj27gsBo4IhG58Q3Vh\nRm5Jn4VE2VwDxKavJwIB2KXZRA5hiHtzkQdgvNHa2cldrVJ09622AP3GGoq0\nHMYEHQWKshySuMXG63puNxhuQdHJDE3P1IAdaexoeZBCCNlEm0gJvjecG8RI\nvArEMcrAHUmVPaKlATd0XykYy9gV3rlOn8pOvurDGEkFhjKZSlsQ9XWZ/nI+\n1R6FQ3Nco5WIBMWLYjRIr7/y9iL/oins2hSmFiDdAXJ/VEGoDHoeBWqD4AEV\nxetdYOo2TS/zqqRczvOGtMergFIJQGSA8C2japg1K1w6YG792gZxZKmM0qod\n7nc5KmZNXCH90CCimMhIcCIG4PUu4A7IHkCZ2L4++wmr4VHAxTSMFDaDGeJ6\nUehpl7pwPPDNiOoLT476ALnAJYVIwf9LGL/EOqAj8b8/2d6XsXJiXuD/y4iL\nuY8AIvRglGu7ZFPpZMQVuNysVIhbPgsLk7Pi/0vNyChS0OXG9tOByy9oGHcj\nRjNkBomPw7s+L+rqTniW24eqHLYyDxAO/eSmnHXVzkQL/Q20CQ7CsxOgj1HD\nF8kPxegb+RJYsBdEIZdlKZxGBYzn2y/Vx6SbeHq50wgFrUDKkvqgP99uplSr\n2K2h\r\n=9crZ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHLeEmLDy1QPSBBB27hWr+83dy35XCMNJ6lGhjsX7VX9AiEA3uuCcg0Y7zX2H/l4xBkD0doh4HYxvHE18bCUc2+nWdk="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.3_1559221367501_0.22941333131381136"},"_hasShrinkwrap":false},"2.0.1-rc.4":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.6.0","typescript":"^3.4.5","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) branch. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.4","dist":{"shasum":"0e282fe2dfdd03c7adf2e8a3f0720c700bc5f74e","integrity":"sha512-YdB2CO590B2l1JWzHzAGq7SXivwj/Hn1UlWjeknbK0Nv60VKVAgAInTIHgw6qv57LbbuQRAuSy7H2rbGdIntOw==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.4.tgz","fileCount":27,"unpackedSize":600337,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc79lHCRA9TVsSAnZWagAAuQYQAJSQbBNeZBNYfLOqwxqz\nr6GX13GfwDLBz+MHYmClBDuwXYw3VW0Q3qHEomjsJqxfSjSautSO4I3QKjH8\nkUGXBzcYqdAkhACfN3FWJXWZ0uWS0lVHG6rvkQXRCWHvtde0K/cKoo2pxI4g\nlPpjSfVCDMGdlmZSZUAxKm4IOIEQwPv7BfKFc5M7X0llvDexJLiKJw1zYw6z\nYVY78Gxq8pegbdc8dbKsOOOvMzG/c/LlfaWO4qkvsOUDaOBqwGURWguxu9V1\nXXcokVKW8beqeHT3QfmAeNJrMvCU0zWXvQb7VG0Q20VxXnkZHkdscox+4VJ0\nKkRnrv6StW/I6l/O0t9shtdxlXKKcGMMi0ltHsxC8+A2DP30OGMJwalgHe5v\nJlCYVGO5Ts3uhrJFkan/TxkU5yFz9TyDSwKBfimQN8LtA3/3ZEihYZLCzPOC\nVK3MMRAlqS29zJJa5bs/VLSaGtxec1vTFFHWIEBrfV+Q1cHi18S8qu4xWGfs\nydQ0FIGd5JRLlXr5BmtQyILI6idq9YXtJedt2ft16HYtvoouMRFU6mwy27uZ\nez0BVvCV2zVxfhqR3panUNY66dAevgiL06ianjzfX85jJXhsPvIpT4G7UshV\nzES6L4VksGbvNA7oIx91FaAmOdnI1m8gCljxEce0WgCVlvmXIi986OLBKFgb\niMz6\r\n=GLp/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC9c/bRXhhAp48+72BoNw55SseVM68mONiEKp689o0AmAiA4A0MmwjFvcBSPLjRa3367uLjwXR6EZPTLD+2P1Zn/+w=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.4_1559222599005_0.11861815930506348"},"_hasShrinkwrap":false},"2.0.1-rc.5":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.6.1","typescript":"^3.5.1","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) branch. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.5","dist":{"shasum":"856a36036fa27d707aa6879476623b4a7753e158","integrity":"sha512-EEz+CLL5RYh95di4gdnlfrfCJrsC48Eis+kZhcqhanxlkA2ZMBmMLo7XxUZjMx+8aTZjEBOR3GQZstQ2/44chg==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.5.tgz","fileCount":27,"unpackedSize":634145,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJc/+ocCRA9TVsSAnZWagAA8KkP/2OXxFig2P6fI1S+aObB\n5ZDjIPwRqAUWnUwh0tUXG57tJouF96OgNxvISSQ8yL3LmCQ0E3YBtLoBpBfV\n283fDyXiEcEnPlO43EV/btVEM2LSy7PrqANIHCE8XiXG2FXsDtSV8INI5MCp\nVShxcNs4FUrh/tsoRv3T6r65YfbIHTKUcR1ujYCFpnTOSihXjg8bnwxDhD50\nst0augUcw2UK1kXj6Hk4j/xTlubrkECL8RUUGQyFlHFQ/+XwkSqMH2RSQrkJ\n+Bkrq7sOwLs/G0zjGaC27tZelIEri+Izm7UDpoFnRDVl/WgZUw48oHX4xmXe\nskoU/leuVqcia7sfeStq+erdoAEjR5qikIK6jiOtaoh61R3xV4wkPyFqE6b7\n+j+hZZr3kkmhqNeZdLawwnxzexyw14zwxk4NUjvw/9Hy0BrPuOi/l6DOuWzG\n2em9YPP8e6RffSb7HexkmdnN4NOQ6X4b8Di5IyTHLuX3wB9JnSXQgSS1fn0P\n+50kXRWpAWs6/e749Jh6NY+hFUsPdfSYocOk04Kyb38JcnF0mFpjvs+Lb5wJ\nTl7QjZ3lbe1BncJzSbFavyNKeJ2VeskmKjyeR+rv4U/cJHFaGz3e2k5wCSJ4\n6jhCaLrgu1qSOli8W9o9qU3n+1S4/gHC5Y8gGvc+QmRxZwHiCwkeX5pIGnZI\nRQAC\r\n=vM27\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGS8JxjILkM34H9LoaS7kei7+o5G5CasuJt/cmizl4+vAiBaDj1LmUZVAqHLi5jsCTzCv5kICgktNIF3GwBtO7bVxg=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.5_1560275483379_0.30258272834610356"},"_hasShrinkwrap":false},"2.0.1-rc.6":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.es.production.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.6.1","typescript":"^3.5.1","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) branch. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.6","dist":{"shasum":"3d5e4a17b694979fc7fdd36a748b64e96afaab6e","integrity":"sha512-o4KBHzUj51sZb+06fLU2fwhwzYMam0YyTtiMPM+uu2IpIbc20qeRvckv+5iBNJSYSt8OolBOLhyMApY3jnQfxg==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.6.tgz","fileCount":27,"unpackedSize":634208,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdCpMxCRA9TVsSAnZWagAA2wQP/RzrKqftPQ0sZguJicUr\nSDS7v8/kDvqIvV846L/E0NgD+bfMDaURvGwDwkzF4KH29fRw0GNxL+F/PJHW\nhaiYd5d0PJaFiPKM9sX7Cs8Ern3A8Q2OZ+gieln5MHzEcdDP3guyA5ipQU3e\nkdkCa99BLgcX3yM8J83CP988JdEk/vUKh/Z3RkTcEbohfP8BgjZWsc/DZK1E\nwHCLpUJwRY1awHIl4bvyzDYMq94O7QefAmZkQwMzeoNasiFBO+MV28bGC+1p\nuo13s1B+hRWqKuL4yJg2CnlFxEUaMcp/osRhU0LWs/l1Dd9pYUfjJNecb0dh\n1081Cmu3bz0JadVHm4igk1GEr6zEaSPFTSKhl4wUqQUeIzEobNv3mqzdRsUh\nKVwefwPahU/rm//FMvNYkkLqFGKVqEopZDN94tN16NvvvArfQKyD8KT1sNkU\ni2lp95TmXo3fSjd7DgPzHmRUphxvW58yzqI0WTjZgYA8zkFG0vVFS8ZwpK+x\nC/LWHN3Yr4BGzQl3u9x7wGFt4u0VvpmxNASiFIlabtb2kcrPvX6XiUQjMdCR\nRaPmOArDk+fzu6paR7/BoJvU4t8h6oSPX7kWQLM3TMW+o1ryZFIoYBp5gMN0\nxoLLOWUTHuKqzkXdnt4BaHZ6H6pMdPztz0CQSkSnXvjAN+kUjLTpNnv/2BDg\njR04\r\n=NrlA\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDnvg6CWbdsDBdPVDcufLJoiD8YMJoImZPuWDknm8Qm1QIhAJK6S22U8h0NWdBtn6N51RyAGwW48gx6CN7twXm32QVM"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.6_1560974128358_0.5686829631468886"},"_hasShrinkwrap":false},"2.0.1-rc.7":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.7","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.1","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.7","dist":{"shasum":"70a29c2413a3f67fb1684fc287dd7094d3a5a485","integrity":"sha512-BclxQJUP9l6jEdOSFFOhNFtjLgFUqib4jHo3cQAnJGINwb0wxF6YFzY8nDxN1pNROeYnZ6thy5iH2O0TG24QEg==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.7.tgz","fileCount":27,"unpackedSize":681008,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdDnOqCRA9TVsSAnZWagAAeqgP/0/J9J77yBLQv6cwI1Kr\nNqBCH16Z3I7Z7iWQlnLduJoSbMZWNyshGXFBwlnebkveaJDspxrNnz4X8BYW\nHzy9QUSC4RScO+GZGKvOt74H27LtCHnH2oxbmvVS+LCmd8P4JTw2tec6w++U\n0c3j8hy/3bCXvOh2As5b93uRCG5gPaYyqxsQjKA1I8/oztXtz7vd0OXw+Oe/\nE8utyU1xGc+MghHegmtWZjDgbJzWmuba+srj0q07pBLmyW99zE1oSQ9o8x0z\nCSl8p/mYFRbDk8TqWSkEBTvGUXTOQv7rkMXMM7N4uisU0cCF4LNsLxKDgHDb\nchruaFTJW8U2vMHItp8q0oR3sFF652LrfkeFT7J2BMjYlhiXxV03FmL2YTVo\n2c2PmrubsDIwwJW6WAFslfsZY1MI2VRGmX6Psc8oftK8o2pYqmEicQebl3sF\n9yR4n40t5LjBkMZQSKPC+K/Q08I00bheZBl2wcw0b3N9OBnrkSKcTIq4FofO\n6jWizx1ZqDHDjRRkdJef5azxCg2/W97EweNzdFAXZO9AgC2VRTdG+IGA8bWW\nBD/FoF7C0ztTgt7bwif3E7ehJ9LPeStPam9BS6RbplkOOYMeKy2Idr3JnjAK\nx9NhN/YBVFxNohPD5ePuhGeM0NpubxR6Riu1eZKWQno9yZOpCIk5H5NYswPs\nTuE2\r\n=rk+W\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHqUZxgSL0AjmENwiGCl1tNMYU2Cynjr88PiDlIx4QoRAiEA8uM2Z9P0xrxmjxxInFtGG0SayVhuF/cXBY4HH9+yfdY="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.7_1561228201405_0.9780911752604391"},"_hasShrinkwrap":false},"2.0.1-rc.8":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.8","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.2","webpack":"^4.31.0","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.8","dist":{"shasum":"8dc73d9f215d9d20817de2b455055c54348a121f","integrity":"sha512-yt9hajxozfcX7Godt1bj8C+4mZ6qYH5q8gUbGD8dpfh9Aypc6VhVD9c6X+jozBTusAKvQlVaKwe9W3WYKw8dyA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.8.tgz","fileCount":27,"unpackedSize":689436,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFNolCRA9TVsSAnZWagAAjrgQAJ04xL3up2zpq00FV/v/\neQpLk6CPxKh1sKlkI1h9X+oR2qEGXqornFPWF4545qgH/LMuDyDjN5+L1TaK\nMsrjVaiOYzvD6Q+4JagkBxOuPBLyHnEtodW8Z55I2D7YbIlz8yQjhmbk2kLn\nFjUMsnEvp/NmC4hEjcf2xZBV1du/rXiHBXEf0wvT8T+ocWuWHH+SLa/JVBRD\ntENMCiMQes9ntw1q/0FXL0bP2Mpt6o9jDrV5Uh7ECbhhLh+t8d+A2WyLOj/t\nruaehXYNqBGosIJ9yWB0xbH7uHJoVeKoS/LRmAhIqChGT5KcW7tF+6UkEvBo\nanQR6E0tCI0g3WqLmKMp/1arD78cwhB3mz52jzxxrU6fZHx+EJw9LpTvK6h3\nxnzuVEkvfX1yeTyDR8cdFI+eqkU2APRbuEgo/0h1z306j8vm5XoQp2jfIGMM\nodhTKetNTSpmeYXzQDAdZ14iOsVATj1VYHuh/d3Od2GGK9lx0yHRMz17mnLe\npOAJ3dTOiMNoz+ew4K/KfwSF8V8zLyc1kfaTRpio5JP9Ob3bO05TGwqAAJCu\n+VgtsuKmTiPrGV62UISA38Uvmt61LpCJhldBTJc4k82y9reTS4gTyKETUnj/\nAuBlcHDzvGLwr4+0/crDuFxpkGDDiYnQgh5WRVAB2KBlEET1dYRwe2gkHt36\nyEXT\r\n=8MQB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDO/55C/5R4M5XupQmScKFVrjzngqzzZLr4DicaFUwlZQIgTyoHbZEHWS+l4e4ooUgTxKjhh8GoKnjJXNN9572hVJ8="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.8_1561647652747_0.3276350160643382"},"_hasShrinkwrap":false},"2.0.1-rc.9":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.9","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.2","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","readmeFilename":"README.md","gitHead":"7ba657cf4b53339afe0b9816667842b5c3541805","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.1-rc.9","_nodeVersion":"11.8.0","_npmVersion":"6.9.0","dist":{"integrity":"sha512-bcgpy+yPzGqqKd0usH7f+g5+6/N6gz62VrJumiLaQZWtflgAo9JeX6a46tZLynYdNrMuDQRkUCaQKBnOSg5T3g==","shasum":"110df37fd933a8879238ad5dfb790ad8ab03ecc8","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.9.tgz","fileCount":25,"unpackedSize":701411,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdFOAbCRA9TVsSAnZWagAAvFQP/jIjP8RVa/g/99AgQAr3\ngjb3GXIHK2SEr4wHm4Ja0tTfjB9RsGWZp2mQGLmO0eusKJ0VEvarsDhgcQNJ\nHqQ8G5nbcAAIvMLZbEwBw5DAlHpNhC379PoOC4PpaQbGRrhiHArmwYNqliaE\neahnk+q4/a0bkuX8BMky5VJA63yGQqgFretURhyOD3FWkkuZ0S2JoKGmIWFz\n/8/IDxkrEGjA0kyPOTQhzb1ocerTaP60nVE4Ju7raYIUumAtvkQAxgIyDgGc\nBtqMb63XiY/JoJDtxALcWq5hxi/Ax2dULEuG2Rf+6CZE98L0LytIwG3zS7kE\nq5JTPFCOCnoDnpp6YNLc7nIYolUgKvb2VdVQRLCP1weay02PxY4+ASk0Q4uu\neDxPX14Kjxhf8DibS0TFG3wEx4C4TReB1aeztV4oceZQ9YX08Hx5vOrwc1Tf\nOfEUsWvMI9Jz5Sgrvno2vGGMaLaxDHXi944h5QzD1KQN2d9pdv4JXlVmvhKP\nHGWBjV8bF7rPqIlb3fvZJis1LK6TPrKtyo6VpV9B+vuzqBI9eNClGmU/uNqg\nFOLujiE1lUUAIBsi7TtKXcFkOF2svODCPoOoPt2styfH95ggn3LAoRzFaOKn\n0n/OeuzmDrvEjguuMjbeWm9cWRHWYfhB5vl7Ql//Hc28I5yaSQ8HJEaEXhie\nqOID\r\n=itDs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEvt4vTSAgOqK3ruqpKUug8tqJKzdhC/Fiyr5/pR5htwAiAdYb5tCXI7VFb/WEwhmiOxZva7/YgDPbXHCzjULmjnqQ=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.9_1561649178644_0.43912917070886603"},"_hasShrinkwrap":false},"2.0.1-rc.10":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.10","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.2","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.10","dist":{"shasum":"9ad3f2125b3dd16001241b2b6ba5c10f855f8db2","integrity":"sha512-nlgPk8OVwBcxNiuLOaOsiqA+GM8mTsdCnN486Kw+JKBqn3aA73/y8jNEs3jRuvHMgwjX8hM3vhNVio+5HP+OrQ==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.10.tgz","fileCount":27,"unpackedSize":700737,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdI5nZCRA9TVsSAnZWagAAYl8P/1j71zlqnVVoqGNRDnCt\nJJM+IZvW8cTNpTDst/ZRrASxTPJz7zOi+PR3ZZEP3C5U55Ck+m35qO6a4ZIS\nxTu26AziFlNGS3iKWt2c7cdPuRQgnOhxmrDp95ENfbX05W8NMBGnCFmKDvC/\nJcgJkSMjUJzSYCE+CQuvtUR2A+xXGnzv8KW1pIkGYbsd0dQRCYav7+ixQ9WG\nMzBufCxpngUtkZuI05rzNDrLu0ge3rEYiTrTioSLigiI3fM2aiqDSirkdPG9\nN16jwgXBEkDwJ1RLGm0vlt19KUz5HDWWR0gQqH9YACPuxKzipu1A8/d/DFTs\np0bbTaWsaIYmY8iU2KMlVy/80u278i53EEUCif+kXs+WYo/bhUCnrlrLizlS\nZgA44eN6NdK9Psfua8hdYqpHjO/TEmy9dL1Eedp7JNlbYplvIHgHMsK9usJZ\n1DvfjFKVudM07KqSj83GSW7OpSPh9YD2vRAdJPHzUJHwvaoZptf7yA8ZauFW\n4wylI+pVeRpeJdwYpbGcXDLl8Z0qLpUi+iIXLIH0o2Tin0qqVws9QI2osXWA\npBtA1p9/kB+jbBRINCeBK/K5c9IobWgCny1SCE24m8wHgoiF4Rs0Bfh5XrgV\nlTB5l9Y2VHKjQV7nT4QilXc9Y1M51FlfSKtJWhUUL+evVqwqf3eMlAoflmVm\nsW1S\r\n=iJTm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDepp9aKjnQ2tinut/DyyNy3PmNYvzk7dA0JFxWGz9bdwIgGhmX/4W/hJYLYD0WZKbmBdSxDhTSnsl0LqZ5FUs4APU="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.10_1562614231715_0.40862589190576326"},"_hasShrinkwrap":false},"2.0.1-rc.11":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.11","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.11","lodash-es":"^4.17.11","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"![](https://user-images.githubusercontent.com/4060187/27243721-3b5219d0-52b1-11e7-96f1-dae8391a3ef6.png)\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.11","dist":{"shasum":"7ce6723c0aca3082d5354afae5353cbedcf2023a","integrity":"sha512-bki3bfEDUfpz/bysz8J4L3EiBOQ9xZh0ryARyw20g+nc+dVcDQTEsewcvxl9zSGKigZ0+StyIUjCBosfpLQ5MA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.11.tgz","fileCount":27,"unpackedSize":688649,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJK9QCRA9TVsSAnZWagAA3lwP/0H8gJvjRzs/bp/pNLeq\nSM2bwmysJgfv9kLToMrKgUTObDYTwrPlEy2uVFevKvtpVFETVq99VURh2gxf\nVPNASP+Vn8kyQeS5G8MeQZ+bU3S+FN6b4FmNhDJ75g5VrKxi6AZaT0lDX/Qo\n3TSa9Q0BcpCeOKemTv08FT18hPLsV2ghxCurWSIPD1a4yKSlJ7fBV+yjLoJ3\n13SvA083wOqT5XWvzI97yeZcYqBcEJVDnEFspHOJbCcjl/zduaJ3ofgAMF7x\nkMykVinUuIt3rdbeMf4jpwAFUwn+O0CPwwzGKmX6OiAAXUMppF5ogxmhMxro\n5Xa8eSO23W8bDph/udFd45UR8b6jyRHnd4vRdxfQnWkEpbhNrfjISdkaiCJQ\nNshn9sQkcg8KtTngfxAyp7iximWWCcYBiwACa/bcFlpYQM7cezbH2sJQ0xbu\n+muvTMV+dARCEKQvB5FgmDMGLVDK3n23OnnsIIX3ISxxAb12eYTxoMn0+rCp\nBr4aCEGzV+2KKoXNOsITguqDf6eFa64YGn3mglHYaPqRXQl5YvXGk5Ix7has\n/Um0XDx2aB3fUH8lXXcky0xvRMfh2/QGjsd0luSCU8CB1pWorO+yFA8oxTKQ\nJqUwxXSzGEeUfzlFSk0XUtzADEGFfkJOWbNzpDKidpb9DLj9wtUlrd6GITCZ\nk3BC\r\n=LEBg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDD5PargsNn2aZPo74gG0Ao3lHn42L5EX59IrVLWkEsNAiEAtcUg/+FJUts/HCYl6Y45VP9q5zAh4CvASA2Wwzk9N/g="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.11_1562685263723_0.9380262000225099"},"_hasShrinkwrap":false},"2.0.1-rc.12":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.12","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.17.1","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![CircleCI](https://circleci.com/gh/jaredpalmer/formik.svg?style=svg)](https://circleci.com/gh/jaredpalmer/formik)\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.12","dist":{"shasum":"6cd4d98d125ba4badcbc70e8d22c1f0f1840f4c1","integrity":"sha512-V7eaOsbu+U+NWrPrAy3D1XUSYWpGjDMyES1COPGQHaTUr2e/RolUDAbBTqBSgzsMSSfHohDHGQRBQPMYVL3UfA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.12.tgz","fileCount":27,"unpackedSize":688801,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJ1EkCRA9TVsSAnZWagAA3LAP/1EZgkp1fGqCNtHvAPzh\nDx6dDVerOjAtsuwtRRM+I4zEECczez5xt0p1Ourh8G+wR2EWJwA5FQKPsHuO\npXssp6U1ofSJPHsE4wF6wJ0uMJcVi1mub9959mMtsqpX/o6MNOdNgj2CJWo/\nTaehQIqD/LITBAl/T57MthRf+sUM3/pZ+fxUx/K6Rgb3lTFDGUbAnhGOA11s\nJfYBonztHyytSxHa6XUZe2Mh5G52tRyflk7NxUxbcHQiQYovuvo3BRo0WbHk\nAVtEUjHQiYTnrQLLLrfW2hyC6I8wKTjifDtnbJ7s7rZV8NQChSKTb4xtLDFM\nWI1CfYE03wXuHDuNYb3eihjIm0YSdz3HY1p3AM39F7fgQTHY5C9Fu6WuhE9X\nByvLp4OEM1kZWVRnZWN27eeOTMuTvN2nR1al6Mj8erRTDLbGX9G1xy1H4mA2\nTtZr5Hew4dO4d0tASwwFnmDrhm9pP/9FGUiaViF7EHOC1f6mdKZRwWvGzwOW\nWuqVZS6qRjwJoZOUCf/KzT/7frosTuwOA56zpmF/qeDg+J1rw/abJsi5DFoP\n3R+Ak2iI/LyLelHtztQyS7fQ9ptAvmjIN6gcZAuRzfIQFynV2duFlO4ptIl9\naBGzUIzzoLgdTMK6xn07k+RIZ07e0glGfD4jjKxuLJSYphmnUSvsjlvCW9yb\nrx+Q\r\n=fJlB\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDyROZsxOSLOK380FeHlfHz5CAtmDBC7JovNEg8wK/HJwIgZr8157vWeZvZRv9/IlxA76Kf2eegQmZLAjAIoTxO/V0="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.12_1562857763266_0.8648930887243491"},"_hasShrinkwrap":false},"1.5.8":{"name":"formik","description":"Forms in React, without tears","version":"1.5.8","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=15"},"scripts":{"test":"jest --env=jsdom","test:watch":"npm run test -- --watch","start":"cp-cli ./index.js ./dist/index.js && cross-env NODE_ENV=development rollup -w -c | tsc -w -p tsconfig.base.json","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsc -p tsconfig.base.json  && rollup -c && rimraf compiled && cp-cli ./index.js ./dist/index.js","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"create-react-context":"^0.2.2","deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","prop-types":"^15.6.1","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"^16.7.6","@types/react-dom":"^16.0.9"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^3.4.8","@storybook/react":"^3.4.0","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.7.6","@types/react-dom":"^16.0.9","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^3.4.1","babel-plugin-annotate-pure-calls":"^0.4.0","babel-plugin-dev-expression":"^0.2.1","babel-plugin-transform-rename-import":"^2.3.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","jest":"^24.1.0","lint-staged":"4.0.2","prettier":"1.11.1","raw-loader":"^0.5.1","react":"^16.6.3","react-dom":"^16.6.3","react-testing-library":"^5.2.3","rimraf":"^2.6.2","rollup":"^1.1.2","rollup-plugin-babel":"^4.3.2","rollup-plugin-commonjs":"^9.2.0","rollup-plugin-node-resolve":"^4.0.0","rollup-plugin-replace":"^2.1.0","rollup-plugin-size-snapshot":"^0.8.0","rollup-plugin-sourcemaps":"^0.4.2","rollup-plugin-terser":"^4.0.2","size-limit":"^0.17.0","ts-jest":"^22.4.6","tsc-watch":"^1.0.21","tslint":"^5.11.0","tslint-react":"^3.6.0","typescript":"^3.1.6","yup":"0.21.3"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"],"transform":{".(ts|tsx)":"<rootDir>/node_modules/ts-jest/preprocessor.js"},"testMatch":["<rootDir>/test/**/?(*.)(spec|test).ts?(x)"],"transformIgnorePatterns":["[/\\\\]node_modules[/\\\\].+\\.(js|jsx)$"],"moduleFileExtensions":["ts","tsx","js","json"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@1.5.8","dist":{"shasum":"eee8cd345effe46839bc748c7f920486f12f14b0","integrity":"sha512-fNvPe+ddbh+7xiByT25vuso2p2hseG/Yvuj211fV1DbCjljUEG9OpgRpcb7g7O3kxHX/q31cbZDzMxJXPWSNwA==","tarball":"https://registry.npmjs.org/formik/-/formik-1.5.8.tgz","fileCount":27,"unpackedSize":1070106,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdJ2UNCRA9TVsSAnZWagAAP84P/09dLJHvrQ0a9OgzeVSG\ngF5u3cNTuRcxinwNN4NcKEDQNITgp9naoaPHAlLrs0KPfjsnsHrXLXwMBEpQ\nbLMNBOvAQf0UyoTnTmw0wBqHK4bp1p2f3O4/2Ql60NuIY1a/AGJtZCL82dYG\n+eRtzMetLYHfHEOrrgoN3N/PhIM413mmS/QD6CpKc7Y91tiKggLW/rOEWMiv\ntrasRwZRs8fJSX2fjwSewAFgmA+EmuEc8t3OCvE6/c5/5EE6+b/LaLz39D3W\nqD85V0h7vYbIB3YQ63uwoIoXG0ZdmGKQWxd70XiYl4VBfalEirnN3T5Rg6EF\noi4xlMRI/XmegXc3WMMOKtY2GF0Tw8ZB8Bmk+uJf4WU7Ad/5WV/NXVZL6iuP\nZQ7SFWXNjj+fOTL74AFa3K+iLiA20M9ruiquRmd1/zNcewMGd//htKWVqfUG\nPI6Uf785F8MTLVngbB4X/UsJi/ZtoBlsio6oRVabgEJIT+QnUa1v5gEhg1eP\nHi/Ks/q8SYf3RCSV3xbqtKbkIBH2e4v9EYjO/2B2CREbgmwTLWaV3WhaK7oU\n4SxQQIkBRPaH3bx+n97Q7zraU0eJOv6UyKjP76KBVhRgc9s06xFnye5rIPfb\n/++oHk5IOkxi/mBuGrEJb+Xs6XnP8fN8AjKkHfnNDJq2/a0ZS2yMtXhmaiMh\nZU/+\r\n=SJTo\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCQvwg11heKEKj0mPCBnVi9+CHb/SD3ljHXFPmZSBUg3AIhAPe6ZgE2YUd+zEuN0CMP//bvR+kLdUDzBY8qs5mzBhsi"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_1.5.8_1562862861045_0.4267056395883435"},"_hasShrinkwrap":false},"2.0.1-rc.13":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.13","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/palmerhq/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.13","dist":{"shasum":"4d06119a186ed5b754dfeabe72fcbf81157b849d","integrity":"sha512-WrIP9Rvsx7trfUAnvpHVrMmIqI6N8fQvK9GWHbP6UTAyyur33g/wEaz+ddhtjZ2JfupQ0Sdl4nVC3Z0tZtVM8w==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.13.tgz","fileCount":27,"unpackedSize":688235,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdXWPACRA9TVsSAnZWagAAb70P/1MkzwkNj5kXMUGsCQkf\ndSNL3HrWxC/53z4zG3GHLU0gAaoclreghGBMofwasWqPgKsVFFGFGv8J1tnC\nRTTrOLwXBiLUwtf9kKykWGcTtZ26w17ji34XSQ7Xio1qjPQuA5EfPT86zvVd\n+ojmqtJeDweHR1px3qsienxd0DQ45m1H+pAtl5NaT65/V+gIYukdVW1j60Vw\nt/o4NO8opq5F7tPncjfgfTqkcO8oM09Q0Fqqbr6QPf6nTYkkFFscye/im+2a\nfMjlrTdSM1i46dsg1QVaCz07gmN5wWPLnMCEXMrgK7LtO0LMEhFhH/BYFVho\nTa8zC/i3Up1kupYAOOvQeiSeKgWXeX3TjI0MJ+TZAwl6JHhWtD9CRzVNhQ8i\nRFByA9yr41rSFeiWVYqHyX0d1YqsbHVqvjSLyUpifjBOB+UBmkfGvY3f5gnA\ntaTDhBrhTKulAn+6vt4ihAEyzQFYtPd8KmwjbfYdXIE6wZe+PyhiE4QDx7Ef\nzXClW1ufGV2ehDNiSFBFjygxvUM1yOj4VD6HCsdN/3ggccc2FJCIwiHWCeQv\nYzMUN/J2fuJwlfdlwm5f/2NZQAwJbHmcq8ejQfdiEkXV/uJqMeuEa6E9D7Kx\nu3S/u9CWR6bNTSt31Jt5adFO/yt4zk7UqDAEhf1J/LOBKjiU5v5KY6xD2tWG\nFvWG\r\n=82xm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDCcRhIHmeQY/WemQXpmmO1UY6WPPpebMODFTp3OImFWAiAbAdCNrScPWoWYD6Jhfxz5iHZCtWa+qyfPxpMeCDZ6Ww=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.13_1566401471428_0.6548815959951433"},"_hasShrinkwrap":false},"2.0.1-rc.14":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.14","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"^0.7.2","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Financial Contributors on Open Collective](https://opencollective.com/formik/all/badge.svg?label=financial+contributors)](https://opencollective.com/formik) [![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/palmerhq/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n\n## Contributors\n\n### Code Contributors\n\nThis project exists thanks to all the people who contribute. [[Contribute](CONTRIBUTING.md)].\n<a href=\"https://github.com/jaredpalmer/formik/graphs/contributors\"><img src=\"https://opencollective.com/formik/contributors.svg?width=890&button=false\" /></a>\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/formik/contribute)]\n\n#### Individuals\n\n<a href=\"https://opencollective.com/formik\"><img src=\"https://opencollective.com/formik/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/formik/contribute)]\n\n<a href=\"https://opencollective.com/formik/organization/0/website\"><img src=\"https://opencollective.com/formik/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/1/website\"><img src=\"https://opencollective.com/formik/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/2/website\"><img src=\"https://opencollective.com/formik/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/3/website\"><img src=\"https://opencollective.com/formik/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/4/website\"><img src=\"https://opencollective.com/formik/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/5/website\"><img src=\"https://opencollective.com/formik/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/6/website\"><img src=\"https://opencollective.com/formik/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/7/website\"><img src=\"https://opencollective.com/formik/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/8/website\"><img src=\"https://opencollective.com/formik/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/9/website\"><img src=\"https://opencollective.com/formik/organization/9/avatar.svg\"></a>\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.14","dist":{"shasum":"e655a20ccb07092f9e68c1359d1bbe0830d54ce1","integrity":"sha512-48nlspbUsnHVaLwrOP34MElgMv+y6G5SbrjCFTiovn6ZNxWnLbif9cH66XyMpChrdAdY10V66wdInvwRQJ3zaA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.14.tgz","fileCount":27,"unpackedSize":727139,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdssKGCRA9TVsSAnZWagAAqBQP+wYeMl0pLnNQ2FbfQ+56\nwAnkjokDXaqMJJhFFQOJqaNORMp/Kn3Fn71AeOlO9o2S700yclpeTdWVOTv2\nAQ/d/dKHsF0jkDtNbrsxeKhr08JHhIjQVszdbuCPxJLu2pfcOT1PT1SiyJs2\n5zmIGSFadST1edDZzrRMKNwEazVJS1qc6T7LDNpXwdpZfwjdwNdPouWWC5Sw\n/MfhNINS1331z/VsyamKlRdc344ixlp/8c/QkAiuXq/psZ4L4D03ARACckHP\nfGAdiidCvCVYwUzbPP7/bWuWd14iOQ1IpWB5zBMX6wGpLzGVtTXcGo0w+yul\ndapgULHFsDv9Q8uJvKujLnhS/uxtv/F/SXEq9RhnYmCD7xj8+6pQzpxxryNo\nM/AUjJfDXyUulMYtDg2rHHV31OnrViaox4Xty+3M9KNNYyQkbA3Ig6BKnzCt\nPICgcIsEkhlBWF8ZYAygNeplNg9UkZiA3fxyLLdNj1na53HSbS34Je3iKylE\n8yN1ghqkjs3wa0qRudhaV6OCs+n7qhkLcINqlmyHYLkZukw69eaejJqxqLiw\nsdOwHjaxLNLleuVJ6zE2hA5OMmTaLVvGsz22UqlcvtMQMFAszhAp+5U8C5ml\nHsEAxE0YptkOfaRom+eeetrLqJLd5t+Nyr759MoQjPcaRPmPnLQVO7ulxK+g\ns0RV\r\n=rCXC\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEyo/Pfk8PujgNyWUtG9rGVcGwG0zDCCENz8PIrmUhjhAiEA/2V4qbQgDbSbDwHrlHVkz6Ed9eqSaBUYOyKAxmnXo4c="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.14_1571996293393_0.6933177278176288"},"_hasShrinkwrap":false},"2.0.1-rc.15":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1-rc.15","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"readmeFilename":"README.md","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n\n**Visit [https://jaredpalmer.com/formik/](https://jaredpalmer.com/formik/) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `next` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/palmerhq/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n\n---\n\n## Contributors\n\n### Financial Contributors\n\nBecome a financial contributor and help us sustain our community. [[Contribute](https://opencollective.com/formik/contribute)]\n\n#### Individuals\n\n<a href=\"https://opencollective.com/formik\"><img src=\"https://opencollective.com/formik/individuals.svg?width=890\"></a>\n\n#### Organizations\n\nSupport this project with your organization. Your logo will show up here with a link to your website. [[Contribute](https://opencollective.com/formik/contribute)]\n\n<a href=\"https://opencollective.com/formik/organization/0/website\"><img src=\"https://opencollective.com/formik/organization/0/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/1/website\"><img src=\"https://opencollective.com/formik/organization/1/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/2/website\"><img src=\"https://opencollective.com/formik/organization/2/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/3/website\"><img src=\"https://opencollective.com/formik/organization/3/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/4/website\"><img src=\"https://opencollective.com/formik/organization/4/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/5/website\"><img src=\"https://opencollective.com/formik/organization/5/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/6/website\"><img src=\"https://opencollective.com/formik/organization/6/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/7/website\"><img src=\"https://opencollective.com/formik/organization/7/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/8/website\"><img src=\"https://opencollective.com/formik/organization/8/avatar.svg\"></a>\n<a href=\"https://opencollective.com/formik/organization/9/website\"><img src=\"https://opencollective.com/formik/organization/9/avatar.svg\"></a>\n","licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1-rc.15","dist":{"shasum":"58d5be56405ba66ec1502ee242c7fbdc98212ba2","integrity":"sha512-cE9FGuFo0ohxQZ3DRsiMO390vtMc5XUClFrXZqQha2Ql4OiipwVukHyR7OU3Ri7Q4Afsm2BSN+Nuzws0wbrIzw==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1-rc.15.tgz","fileCount":28,"unpackedSize":810387,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdsviGCRA9TVsSAnZWagAAnuYP/icGhTfLF6s759qjgBVN\n6PwNfd7R3RGtBO5iEjOeJMoJfRd2+sBRgGUU6vzkZt9jC+VYljTC/iusYN7O\nl0fuAERoZq8Htf754WcrU0HbmJYPjohMAQQ3d1BJ3u8vRP0nPA/aBG9hqnCt\n73ui0XB1627+CKsaLMS9BwJ/b1GDB/E/7xFvqHcJvrttfYoIfEm9TuB8iIWY\nFQ8KPCLIJUgm0akPzdLLcUNX/tnmp9lv/sArfkqNkjdKjpzrhGa++AxcGZxn\no8Ke2dYAZqXeeaNnGFJ2zt88eHO39uFgM4QofcbLqvGuSCppwqVqvXFXAQXf\nMIpldgcJjfqJkF0Yx3wmExZ8s6+UheF+rnXoloXIhJnMAUBu8aLokGzvwH8x\nzqEXwacB2vpevi8kNY2nhwv2uvsWLBgYPsipbenY1DIk8niAwinyPa+Dd0x2\nfKafjIbh6L2RMrW9vAvAX9aJ1Thz0bSsFq4utGj0EdQB4YazYAKAAMImfmE7\nuOd12bQoNmaWVmmFD4n+v2Fvcatv/ou/bGhlQzKJtHosjU9Ods6X5C0DwkYQ\n0xy2UbcvdAxelvJJDpfTC505Z7NEg4IhicNelWyaJmALRySqOrJ/vZmOGC7g\n7qwFch9EFizQv6MRwnxwyIGOEyB37aacJERjob8sbwLXeZEbqbRCKxnBiNDv\nO0ky\r\n=aib0\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIARGCLfPgvW+EyxYqKfA80fbGz7o3DJ63Aaf8GmmMc4uAiBsBLqUOBxciKQO/dQadEL967Fgzgjf5HGL4W7CQswvfw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1-rc.15_1572010118205_0.846711611653095"},"_hasShrinkwrap":false},"2.0.1":{"name":"formik","description":"Forms in React, without tears","version":"2.0.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.1","dist":{"shasum":"a8cdb062f9d033c77c67b2c9738f36234bc3701a","integrity":"sha512-wU7GPn0AphITCeszH3hbURMeyOUM3bUNzTJDiOz73Sr+o5kkguEYAWhkcCdFZeDkQtxreQ1y/aaFdhq/MZwo2A==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.1.tgz","fileCount":28,"unpackedSize":810381,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdsyA9CRA9TVsSAnZWagAAVEAQAIigscLhi9TkK/8aDfCh\nOqvFJ+1cMZJlVISGa0z/CgrCL7RnU8nEQAov8TAvZwiBzUkXkUf4Hj81RODu\nM3T7kSfYobsoXjvB3IVytPOMIAw/PEkAaZuxwFb5uqExDL3JI/MY/9fNO1ht\npC4MXVymoA6jBtn7B/F1WZ6DARxUM/2gpgyEtUb0hmu0RKZbSsQsVUQkqHDD\n65PCFWlsOJoj5x05b4OcsiuADRxL+OzcKdmHo8ZpBUefSf0QvMRlXr34Mlex\nJf0iUfV2zSeU5Wxs9JoyMSRXVK9N9p3aoz9Zshz0Hu9Y3UAIa7xQ+A2LbeZJ\nO+j/wXOGP3wbNyUAZu9WMfWsTT+lNB/+5GGRhEPmulOQYioNiqhCG+GHbXVZ\n6ArkvpYpcj0JfuYJstmhCECfr0vi/z+lsak9w6oUWZknQSsrDQG7iJwHUzFA\nrfIyDiFJqF+J8Tkld5if+SZkhhdVDe6A7Wia7oelH28FBhD3ExWxejL8ukpv\nHEJ/ELLQog3GnBbj7NMOFAbIR0pWJTq3iU0HjbD70aHA+hCqqsCJIDVFdPew\nr3PcSc2y6z4aZyylexCLNmaxwMYj1YfuMekDfgzb1DdZYgnll04eNMpox3Y/\n4zwkIMvljdyfBGQcIAhlO8iWu9nv0WSO2jzNyeuRrjAKcbbVXYEeKeATy6mc\nxYF+\r\n=crBe\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQD6OhwBm/QuqGDITAdgOgQNgqDgbQetEEfxRHVikToQzgIhAPb+q43PnNi9tQwSTok9NI36uvT7phEIjPzoBjjMZNuJ"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.1_1572020284968_0.7002759611552549"},"_hasShrinkwrap":false},"2.0.2":{"name":"formik","description":"Forms in React, without tears","version":"2.0.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.2","dist":{"shasum":"c8d6637be5c1b72a27ff3d972141263764a9968c","integrity":"sha512-K5dHjebczKFPQd+TbJ26Otn/VtnDPKi067y5HLr0AEA5qa4PSdElAETCAehlk4j0y2eGkES6sEuVmL9myPxRRg==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.2.tgz","fileCount":28,"unpackedSize":810599,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdtYj4CRA9TVsSAnZWagAAL38QAJ1MWcCLGq4GwkoN/MQO\nTInHGmn+gGat7ZM3jNWLkvY54LwHa/M75MsNHWrjc8zHVv61UmyW3r/68OPQ\nBWJ/muQ3dTgfwyIRKmUY0oLoM0btfbMxaiQlQvktddyo6h5Kbkn08fcYcFFl\nJmX2HZteGcrlTi1QN6cYNjO/+3Jn7CnhJKl5o4BI8+/5uS2NijRsG+JWGlXi\nOWk7DQeitYVlUVHzTGkIhWK0Nr0ObfGRLhJmANm3mVGyl1FLgOeyb3V2IZ3L\nSzX2Qunh3QYAH/tRqGz8MWVi+MNV1NoWLamZi7pULRonkPdoQcu+n6BXOXbK\ni+biBFTFu/JS5SagH1QkYmRA2lMiFWU57xtMCnSPfRcEkm4Asw+sBE82h/Wx\ntZdgEJYsmL13L6iAJDHfuMl5h4Vo80V7mJ8UmSX4a8qa1EMK3Tc1pyR3vebg\nQoUYqQGxvPXDXw1RRuTGxhkAa+wr56A0V71agiggz3idroPkMPxfv4lRQ0ME\nlvv9+o4mFVxAoZ9rhOmuz5gbSaAQUE2h6VprQ+UVqa/0Fe74PKihS2oM2YWA\nd062rtg/umnlM6wwfxL6fSN5kXFfdjtw3OSgurvXDdqzQ2g+CuVGFGkFjcRw\nPzKllwmDfLjzEj89GmPE52jo5abaMneDZxOP4dUtQE9h2zfatghe0Wwvz6vY\n+OOP\r\n=gcuH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFI1p93RHZDB6RkDy+8Z4D0aq448Fb6X3s2+zD7P8zw4AiEAhDOlrMbWGkkb6rXJcKshRZ3CHkB+JL7EDynWIV+Z5yQ="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.2_1572178168403_0.4324511141162275"},"_hasShrinkwrap":false},"2.0.3":{"name":"formik","description":"Forms in React, without tears","version":"2.0.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.14.0","tiny-warning":"^1.0.2","tslib":"^1.9.3"},"optionalDependencies":{},"resolutions":{"@types/react":"16.8.17","@types/react-dom":"16.8.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.8.17","@types/react-dom":"^16.8.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.9.0-alpha.0","react-dom":"^16.9.0-alpha.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.5.3","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.3","dist":{"shasum":"7cf088b1a6e0ba21782b73a90453a78426959168","integrity":"sha512-kYBvcxlsYSncY8OiJHD49C0UmoWXbgmIc9V1g3N1WwBJ7SMLk34QpcJDgroYd42K1cH+mSJlXhB7PlgTXTzlWg==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.3.tgz","fileCount":28,"unpackedSize":815756,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdtvafCRA9TVsSAnZWagAAq9YQAIDDwNwv30s5xd/Q/JMz\nQ9bN9zYIJkkM6YL7xMas6OS7VwXMuObHY6u3XwjU4eBtcIrOW6OcTr/Htiwg\nDxDdDp52jg/aw851i2wbUie/Q08Z6NaSj7E3qJSFI3syTym2iiFF0zj0DRuX\nbdufT/0xi3UqXPnI8v8kIzwdU5a1IzW+rJ0Q4vjltWNZPyhqoTm/v0dgEmPe\nBXm/i026y0MIUoOcQ4QsLXtCAyZ0g3jPky+yrTiBHkj6X2UsKHQvPrWhodUX\ns6EdDTGynsLoDWxjjwTNxFsXvJVyl2AX0zJMc0qM6TnkQ44cPKW2HIqHLdWP\nXB/KwRCGF1lnydE4YuwcQt3KV4k0IJGIJ9V+s5EzX32GKscC/ygPgVQoh19d\nV4Et7p/BYVgFUQh74tPbbxU0XVFejiJbh8k2/jIE1aHdtDwRurwXUM4DfeAz\n9GESyCiUwhsNEXFKqalZlXrdxzgJTa26U/jhN5ykKlPBrS6YLDQJkzQmQ4Bq\n9v3xNAgpZbxJ5YoXxQ2bp+jFyDWJ7kyxlySh3Sl5EUcsWNhNGwXbXh/+8e68\nQR/ZORcpiIW7JS8opxzbx8mHHDiklx9e3/AHeoA1qjaQNAghwzomxug4FZWx\ngAqvCIFN6soYzbTNoSAjNJoUxJnNm7SctUBzwH/v8ceFasE6bhLXr2HxAKNF\nDzGN\r\n=fsLI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDApjVWLIEM4AWVDjB8zbT/t+Ehm3TeAD/nXNkxguVQJwIgWD8GHuxagCFztYECg8icjoTU1L8tmtHemiz7s0vxx+A="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.3_1572271774809_0.4137409454386789"},"_hasShrinkwrap":false},"2.0.4":{"name":"formik","description":"Forms in React, without tears","version":"2.0.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","now-build":"npm run build-website","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.11.0","react-dom":"^16.11.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.4","dist":{"shasum":"0743a9a5c7ab0a247d3fa2c072d599f221fc8e75","integrity":"sha512-Y0mR8PGRtq/U072U4tkX1wnS/geDYs0n7uPlvmKtMTIJS4g8xCpaccAerQFWxEfClMK/JGpmEyG93zItAdASJA==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.4.tgz","fileCount":28,"unpackedSize":818139,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdyyaxCRA9TVsSAnZWagAAuukQAIQV+5/sSsdlTV6eSwio\nO67Bnrap+EDfpcuXUbGgi7h8lThkAxaEQ29ak28NUpxUaurA8HnOBrBpvwIx\nsvyy/V1mSwaBDG6hmbEoHiePQ9U8K3B5IPbmN1DeGlzM7gEpTI0lrzsR/HTh\nDVQP6jrxJy9Wc0yTOr1B2qFTCFqvxCMBgwwl/ZAJBxFYuenBafr08/9XJzlq\nwsJxN1+8SBID5yg7e7jfPGciFdtLOmQKkguPbP3bT/PxTu3Z4hvazvrZC4TJ\niqiyO1AEFuBG9EAz/N8BQR066zs24BmDTjSzt5lCt7HVPcNghbkuDyyM0O4+\nfOxUrw66jXQPcxQAshq5urOfbKy9VZZNWMam5r4rLQXkYKFnMX1LYvudW5n9\n4VSzi8idxMlcX3OE3L3dfi8MqmhPCwxSrCIT4m3GKO4Cbeel65FUdLUoNkjY\n2hyyDZCmEUJ0CzUSUeDNM5Euc3VSBvY8qyR7eHWBzIcHDnZPyuPpYE+D0P5t\nFP5tviykfw7Gqf+L3R0jr7TO8shKXPg+aJrCixw5MgO24R9Y6C0kFkefY0OE\nltPCJ6+SvVJgDiQnY0CxVgxBTlJe3XmEeOY+A0hY+DR73qbGzWkP9Q4aP9xa\nrwT15YduF6Sfce70wGnk2mmT7JWHlqkTjnrh6nAdE4DZZwgPYikh7YS1850q\nnnNL\r\n=+bFO\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIC7zN64dELDShfKEEzz9AfcaHzU+DgRJVcnsVPMF2WVMAiAnlfmMi0onBkmtNJqQ3UseffDdBAE0amiZKEOAg4LAvg=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.4_1573594800576_0.886921803034064"},"_hasShrinkwrap":false},"2.0.5":{"name":"formik","description":"Forms in React, without tears","version":"2.0.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","now-build":"npm run build-website","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.11.0","react-dom":"^16.11.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.5","dist":{"shasum":"326b63286e18b0158272203d682242f900cbab21","integrity":"sha512-UhvSRSi9icP7312fVB7tzN4H/lDYaln3LJ1jVlC5rO4PhnqOuQVnxB3WUSLLyZu2H2kjxoAq8b1IvdK9xOe6og==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.5.tgz","fileCount":28,"unpackedSize":817364,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd1rVSCRA9TVsSAnZWagAAB5QP+wWUm2bjjvNBofbRw+0H\nMW2CUY6GvNS02j8/p4LB3LkuK/0xcCKNeNiJpg5BMEZ1L2Df3WIzzZdnjeCC\nhWN3581Lj/ahEMUn4X/SRXTfrzfI2pkzxAiNyO72vPUWq5hYTMrfc04VBSkO\nDPkoTgR6h76HdlTRfDuSx9QLlk2wrdECCmk7g+m7QnhlKRFGGECgBl4SmfDz\n6Z4DDOwS//Yb0QVyOCmyB08MpiAbLDsnn37wgwkOORkedj2odWtdiK50rEkw\nAKl9cd8wexCFiS1lgBWsk14P8ZJUCmO4UIUaRc8reyDMa5F12aUONP5ABL42\nhJKiz2rhYi7bcnHT9DWN88j4RWGDhcMy51JtR7oRpuZRfI2SO+tLAmTYV69X\njBZ3U1nnxNuTqxEegK1ktbMoJNdnFdn3KJgkAkIkqc1aI7T4SN3ToHKTYenN\nFOa1LOLgV/8/6J7wia/d1UHDOnKOOKpvWWbUh2CYGaRRGcq3HZN8vWnPTjzK\nyRVGC1jR18JUzWWtv73tSwTG/5BFd0EOP2pyGzOf4KTa3KTbdlTjCipeuE7a\nnzy9OCowRYpexBMKHLQq5k0lWo38XLKYdLW50rJ7P9rwXkwVBV+GajgSzh2j\nEQkLIXfXZH7YW5DZzF8XTGwKuscAIrBQmqPl61uYSvHZ6IvqB8viYIZZNZnF\nUpCW\r\n=yDNs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDG2rkkrVAZeW7P+Y7bmmffWEcI18ic7FDWKNWQWQC5AAiEAh02sDuA47k8GGRYedGH4L5l/3hmFGQ+Tj5b9OxZdTVs="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.5_1574352209797_0.04914349161514764"},"_hasShrinkwrap":false},"2.0.6":{"name":"formik","description":"Forms in React, without tears","version":"2.0.6","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","now-build":"npm run build-website","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.11.0","react-dom":"^16.11.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.6","dist":{"shasum":"e22e3452399a69ad057ba9828ba8fb0d2319df53","integrity":"sha512-x2fC80v8AIrGgpxWrLqKaK9hdV8WX4OSLK+Fr5lclqExA59NCuxdB3WiuxJQc9/g043BmfTIuaILrV9Wq0MPVw==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.6.tgz","fileCount":28,"unpackedSize":817362,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd1wI2CRA9TVsSAnZWagAARn8P/jMhKMaFdk3JmOi+1Dgh\nnCBZTuXRss7Hl+jcP8e50JhdkKu7avg9eVCHgyWinikvdSD5MpRsFDMKrmZL\nwJZzmScd23Q7Phfg22P4pxeDFSvt0ZtEcPy4lhd8xzM1lNqeI4c5JXZSz2ga\nUPneDoWM2kvMXbgdnQ6QvADH38vWKY7A1UNaRWVxE134Kl38ieEr/26I2DVT\n4wGUAfEk/X3D0Yc3VxXmtuSoiG5vxTeQhXpehMrejHt7H4GM3Q0zln1Vgzcb\nfe9EMSdHjGJargsT2HTe4L4oKIbfh6uokGtixECDB7CwpQ9WOX3ApvmujygP\nQKNdyTHC/w5iFIRscENw7X12LmKm5Zp0Et+kWMPPPTQDUgLdtyk/ozS5zTOA\nfIadjbbRy800rYCCsLGo3XwB9/f8ZpY8hYDpMkypn147F9A2RuNtfF7Chiie\nwoDChM5bLSuc3swE0d2l9Wo02JdmZt1p6UliE3FtmA170Sl+QygACCvM8BE0\ncoL3d9EBCdzMMYXkeaWfEwiCgOAvXRUJtIl37jsfWJg8YgPSomMYMZySOTT5\nx5Nbw2BZEkKX9CP9FPIuejmEiA3UOuGybLRClVjgosg6gXfe2kkCr1jfBz9R\nl6HEtlOYzk7OokV+ycl3CzbDlzBa35mAd4zWmGni693jqxdMjVt6MFfTmSIZ\noc+E\r\n=hnCP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIQC/YQCFwoDkRPjq+oJ5pQBSjagdCk06Wuo2o0jpzyNrnwIfahhQljjX3UoFcaz6T0vKC4F/MN6u7xRTv1LRA1izgw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.6_1574371894276_0.6373629359592934"},"_hasShrinkwrap":false},"2.0.7":{"name":"formik","description":"Forms in React, without tears","version":"2.0.7","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":"^16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublishOnly":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","start-website":"cd website && yarn start","build-website":"cd website && yarn install && yarn build","now-build":"npm run build-website","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"optionalDependencies":{},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.11.0","react-dom":"^16.11.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"licenseText":"MIT License\n\nCopyright (c) 2017 Jared Palmer http://jaredpalmer.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","_id":"formik@2.0.7","dist":{"shasum":"774c33e01e02b1cd241d65a9e86844d9b4793562","integrity":"sha512-gaDMCsbSu/foYTH/4sS4YkMzpqB5fFzR8BF9klio+ZV+FcM/8g+0HmpMCs5A8EJvpm/fj6Q5tpxxgcU5q9FELw==","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.7.tgz","fileCount":28,"unpackedSize":824363,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd7q8eCRA9TVsSAnZWagAAUvQQAI5xWERCZfHFZWYIqIlq\n0Q8hKkBC9kjWTtOs5yzpDIJfwO1fqhtxm8SIw19aGqa6PoK6G2WWN/qXcLF8\nPHKnHPw6cSp3KL7ZozAu9oH2XhPQ/ynQXCfpDr4x2n93l7JSavuM3dQfKN21\nWMFW5eVLU3JI22VfqK3bVDEqovHk9gVSVsFWbmJ4sL8zJyIl5p1avOJtqcps\nv4gvitfwx4DDlAN+Ltivv8jTLoCyeC/8K+f+WLvFhoruyzD238f2I0q9ZLO4\n4LD6J9eSsmlE0Ceym/+qtU1FB1CgAqj1pRv/jMYdmolZ1adej9BIdfShhZUq\na1VJ9Gu4Kbk/GzyhDCjb4Eo1GZHsWSuhsZi4rh35H6xGPgKXs0ApSsJkriLt\ncTRgmGm1F1QRy/C28bVpZXwP9HnsL2jhKH8LS491u+eXxEYOYvHVc2vQVw8Q\nOuVZFYD8+ssX21HCUtgp+JimtysmeOdga1IQ2LyZ414hNyhxd+F2IZVKS4ib\n59D8ZLE/wGAAr9xb2rerXUQBHbx8JqeGfsjt5cBIvlvdfwq1Pe6+XIglshbM\n+00+le8h1vG2Jhz5OFL9qcPwiudi7WqvFbHIFTbgKBWaZnVkrwsaLYr5pjk9\ngTbDlSAP53pxN+4gkHiUIXCT5u7y0WWVaewJIb/kk/ygVnc2bIK6OyRBBynd\nL3YQ\r\n=3/2q\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIBot+QUnBK5x1s7jkZjrAkduRnGiDahdi0BEJdHxY5V5AiEA8tsiNMU3j5jkYjYUoZcjN+jUPkPw+X0Xu0JPY6GLevI="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.7_1575923486199_0.9151087079478704"},"_hasShrinkwrap":false},"2.0.8-canary.3":{"name":"formik","description":"Forms in React, without tears","version":"2.0.8-canary.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"6eba226712d0a99747435680f76585859b43248c","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.8-canary.3","_nodeVersion":"12.13.1","_npmVersion":"lerna/3.19.0/node@v12.13.1+x64 (linux)","dist":{"integrity":"sha512-sLrKhRsF1lp5H/MLFK+6YsA+xR5keEdgbyRAhKTHkNfLXrzOvFuXFLsoQPjg2eFxv3+c005Mi2OXYJquKtYj8A==","shasum":"3b23814ccedba7fe3064c6324dfb1dcda27acdbd","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.8-canary.3.tgz","fileCount":26,"unpackedSize":876888,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd8nbwCRA9TVsSAnZWagAA3DkP/A/V0OruVq1rkqUwV9cp\nU78CZBBC7ELsL9x8qrrTbhXBHkloL0rHdmXIk1scBpreBP7z6msw/pTtxKPh\nOED29VLwTkfoDyqEeVFILAUl5rByVwTxqxHR3Mb+XTWMPSjIp+D7GOa5YcUR\nY8hG18cdBVBOIFTL1HQp1JHmOevdEn5Sw+EaJoEIHuR+xZAnzXLNWxrKDYuX\nSxeXTU1cViq81SeGMkEM8OIPyuMlPR5sQA4YevhgZaKRqL/Va1iJIKCfrW7z\nfSIjBmFE2VBMMbtTxDKCiCQxnV6VyE569XC86qP93e7QqIZpaZ2x2Eq8CuAE\n+HeFYQl38IdPKMKjHN2PC0IAyUjlF4RhSqnqvY8CJokFehNVrv0LecEZIu1Q\nYOglirJTjscZ6sLfS43Fa3sfJWiErRnaI1RARJ2Aj085EqczFK9N5sp2ZW7h\n3LcAgkqus3ikJP2p2EPdF/Sa/yJ3pD3n2ZyTBebqpqI+8aW7d5Vs3U2C9NpJ\nyGtzbona4O0tFWKAcXNff5iqYC2Yrrmq1yEBCoZaBjvWM6qEkKGRV9TECTKx\nyaV8eXUNrhkdZwYfnYW2WVvBe9CoR/5Bhl5v7+XIcc5b6gZ3ldr64O6EmmCy\n+SroiplTasrNCkLjXrGX4HgqoY7jf//wQUkjg7gsYq1HP0E2dbs40TodjLo0\nBA3H\r\n=xg/1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDO4mbmT9VLHnN2KPLXF7Ll0yMxs2hvdHHV3LIbZ319QgIgLk7/xTzVxpCO21nX5RlNtlXX2Jwxv64r0Up6M+sKSwg="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.8-canary.3_1576171247863_0.043760662941790374"},"_hasShrinkwrap":false},"2.0.8-canary.2":{"name":"formik","description":"Forms in React, without tears","version":"2.0.8-canary.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"351ab23cdc5d71b5f2aea1918d7873c82c2e2f63","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.8-canary.2","_nodeVersion":"12.13.1","_npmVersion":"lerna/3.19.0/node@v12.13.1+x64 (linux)","dist":{"integrity":"sha512-Zd/2Wb6mqUCmSKvui/yYX5JPIjQGixxkmuJTt/1XkHRrEZ8YZ+f/SKkvxvz9Ktysc9odHsx5eDz/9azi2lCh/w==","shasum":"eacc2c8b4a14ce9eb6401f4a5f6d615008e8cb34","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.8-canary.2.tgz","fileCount":26,"unpackedSize":876888,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd8ncDCRA9TVsSAnZWagAADD8P/RXsakXhrpW22WE+SQ8K\nMqqTHAgeSQtQK+pz3bXc+WeWAY20Wud/qpDKf4qTjctq7pUvFb1QAgK1hhdF\nKHp5wLaWBdfhgmyP6DyQKnfbg1s2LI+iYe5oV75uKaDf+7v+NJI1sQloxImZ\nodiEZKG9uWrvKqnCV9f4JwDBKJw5Tw4+5d2qBqcFN/DhRPk8qgYECm1ImzU+\nkvcLepmrPrNcBB18nCzoFN/sq1UOHlK585tAKfeom7JwpqYPnK9cVEl5yOO9\nmpro1lK4K9xGeAGG+aNL1TAmJTySUe307XBQJCP3Hd1At09tf56WVL7DsukO\n2UDoul28bdZQwkj3uK2qm61Fj4w3KkGrBdYitV+hFeM/DNgbEch4lV2+J1yL\nmfBjiSfdv1FfY5ChD0/hiegbz3p98XIEBSigLDqmwUx//uUjTulQQm/D06fn\nFQZmzpqlbuAyJ4FjDtBWZaYzlzo+oMdT1kK2W7vcH0vPfVDVFLDDDnr4dR15\nvKctggQAYrjNXV9eOU00WRHorYBouRhsDlZa2hnJn0Up2DG+Epw9YauhmchW\nh1xJR2LG2nJa8E8HXmqED50pRQJnWRlhUCZ4cYde/h6ZezUFUfDU3g5MPJ5z\nml75tGIN/p//3gkcn1trGpW4L6BPHbTuI8hm+xO0XGRFQjHGXUwKPOwm16tq\nviU4\r\n=pzoS\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDvUUfgYDpGRBHAE9q/FckMuHmV5oIyjLfC3br4nqGxKAiEAor0eNr5E2uFWrIzu8jxrXldJs1kof60mLADi2l1lTZ8="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.8-canary.2_1576171267308_0.23506692709852706"},"_hasShrinkwrap":false},"2.0.8":{"name":"formik","description":"Forms in React, without tears","version":"2.0.8","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"8092921e24d25edfc0d29cf378175f747e8be449","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.8","_nodeVersion":"12.13.1","_npmVersion":"lerna/3.19.0/node@v12.13.1+x64 (linux)","dist":{"integrity":"sha512-PxC9G6EvLdJzMv7z+bsvpI/Euplv2vVgTQebD5yNza4t3fiMBB+iD90VOVTLCyH5Pnv3bljsZiKsIqGp/UNKKg==","shasum":"a17740007a9a1394360142c128bb686acb5dbc7c","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.8.tgz","fileCount":26,"unpackedSize":876879,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJd8oIkCRA9TVsSAnZWagAAb3wP/1UbpjCsPG/8ppEevStk\nZcBmdLlqMwMWkdW/93zW8JEJxQzRea6+yf7zz35dw2g2m+8I6Go2vz3srxzS\nues0gQl6ERanavfoV3jVnVigICIaxMlxbIJjRcIU+G+z4zbNSN0KkfEJnfoo\n/FFVonNEJEkjvIOBehZRAgup0VeUOLH6t24TjK+aBLmM3AT5DhYtNhmUAfM6\nGr+p2QxRmzT7GpfR0lWmLwWgATgxExgK3TAvA7sqlPetCp9ljI2VArZn2cPi\nmUYthNMPIaEfmi1/yLv320S+X5QQUO/EWrLdoOIquRdD9Kbe1ISG4EeMBEpg\n9GBg4tzJqHDy1Pw98bSn/bW0bQG8B5UjGyxAV0Pi1L4q7WQQd7sljMHd8SuX\nV+ulQsRVasaIGBhgbSeVnyBfob5ogYTvTL9HlE5ae02njdNm6IfEKSdb87V9\nK7oGUQYuxZBvD0OhmnpGUocO5CFbE6DhcO2Ih3/mqlg3R71xG7yYkKuUkGCh\nD2AahJQ3CiXzGm64z7KYwxofsPYnFYgYtOFH9HStIA15Xs5zoipsxHp6/zrW\nQRpqPXkpaT6QSW1wjzCb4mc/+m9jbjqtc8U0EMJnDmnSXR9XlL4eGbr4jg0C\nUHIND41WKYqPY+9r0Lf/PbabdenQ0Ix/cHdIvX294rzbMRYFzNH6IPDhYniM\niCLG\r\n=slcs\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHhPF7qJQuvxQje9z9VcChOUCpSEdRMknJ9ZF3Ui4oD7AiEA/x7t1u1+nyi813CLl+D/RVIcnRjpUs9M2pKYH0rulRg="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.8_1576174115651_0.6088400745451314"},"_hasShrinkwrap":false},"2.0.9":{"name":"formik","description":"Forms in React, without tears","version":"2.0.9","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"e8dd093dc0d64299a3d4b26a076055c310a7cff5","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.9","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-J7Sl5319Gfb5QhDI0eJVFuAG130Igjj/vYwcXcDC20gvfGlPuygIzPUl2Nt/cTVau5eSzMZnnjnBCsDe7QVOyw==","shasum":"114838c586c37f09c26f505e3fa2d6230c8a88ad","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.9.tgz","fileCount":26,"unpackedSize":885943,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeCj5yCRA9TVsSAnZWagAA+4wP/jj7TJ4O7KoRFGSMkypz\nY2o1eYPP718n/qae6UNy2PgmMIQ6BD+dqNiZ8Zr1TJb+bkcHkt7Df4RZeb6t\nGn9Su+az75yHehfjckrNeaJl48bfU9h9ME+JZ4qjnK+f7W9nBOlsrxx90rax\nYlY/1oonkbnjd3BjvFufFkNDVf913e7t5N9hA0k091k27wQYi/4cVldKctV5\nZt4hglHS4wJApLbxWdZkuFMLnleK/geQ7DpMczn2avgkiVQ84X35yoDX7dIr\niW7b+R2m2Bm2+ZKJRXSvUPwkd0VdPubg659bUCWx5trOwdDTU5RokzDwuJt7\n5rBIdHrrv776nYZvwXe6PlvrqAE56jb/+fEkr7zrWNLKEP3PQQyLTtQqvPF4\nhRHAT9RzmX6TFFIjsw7PtuhRuWDq+rr1TGkw0Ec9VSyFc3/yg/hglAKcuRb0\nRICI1dQrdpOvYlBTRR+gUezAjYu/15J/QY0DD3gGlleLQGXjFgzmXJhTEccp\nSc5KGoMoz8U+MOeewp4cWXaWQtLiKoKx6mklabevY6HOZFhJO/BayUqZUpLx\nWSMaQW/8wHzh5JwkNAIkMi+a/wsRIy2Fno+tt1v6rNTaNN9T0/HyY94nBAss\nUAThfzqbWh3ExeJiBqcBV7CZ+VLTX5FTNoclNK3iJI3QwCu0JGU7/VQhbakn\nF5Z6\r\n=106Z\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCrAJIwMl8lKCejthFSsTlgIci0B3mVRm5tnysP8RTD/wIhAL/AxbzeI7XdjxG/qQAxClVgyWGhbZh+Jb6LgtydHKiT"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.9_1577729649498_0.868907472950907"},"_hasShrinkwrap":false},"2.0.10":{"name":"formik","description":"Forms in React, without tears","version":"2.0.10","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"770417a6aca45a34d9ffb64890b6e6540d93f9d0","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.10","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-a8S8oHkXXDrXaj1494yP9WqhpTtYivaFU2l20SmoaB9Xo5bHeRvelH2tngk3CzKPHpZqVkjlCLzpSl1s/Qs7jg==","shasum":"fa5009bfec4f739938a08aa9b22fed98adf7a745","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.10.tgz","fileCount":26,"unpackedSize":884386,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeCkGbCRA9TVsSAnZWagAABWQP/1tHB7WS3UT7qTwmizR6\n9odjro+bAFeBUV2Yknb5fpt+wmhwJc2nfR/z1ypk/73CgiyXakqDh1OBnlDj\nmK6mDAJUYB72NWMAt9d1UH6tHnXMqj/+bZ3IZp8p5UGB0vxAthlRS3/FMM/w\n2UbmOqytYNT1xhNEOIY7e7/IUAkNyTfkw37rEC7Lkz0Np0umA6NSWUWOpLom\n7mgrpkbZOOFh8tCKPzV5Gh5ZwUMoCBPYz3/TblovA+RiqNi7w02jcYat/6+z\nLLObkQacQfP70raY0KeucQlu00rhhQwun3KnMsKR0hG23+7BRiHBIz5zc0oW\nD2z+Q4K41zCg8V/dzGal/mHRvpYEm1FGzBDTW3hqN9PfqWa+c4YeawoR2FMA\n+QzMi0/8bGbAxzfYnIO6szxcpP3z92bF2KWJF3RBYw4cYB8m2K6kr6MJjua0\n4J8s3CleunNuvQ31/5VyOQP7TFD8ifS9z4oiv2vhdi0lxeq5rRymNvnshPNA\nsI8gZhCFxx7xEG4bNbdDS+/iUFuqbu9Yjc31vu/uZSqsOWZlpvzvaGqioQ1d\ncsO954YV55FNHHacf2ID/bcjyfR5uTRO/mqrxjra291TAwi+1dVXMfCkJ+LS\nl8bN2cNBthM7tokvG/PEUZRSN1S9YzJUhunzBwTQz3A7nr2+FaXPZY2Sx5dG\nFdAi\r\n=g0Dg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEEl+9Wq1uagE9eynLdhEOOzZRZDdnznOQHPNhqDPGDwAiBeq033PQchG6X5JlaGwzFBjA/S6BWpPZYADjkzOjEaBw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.10_1577730458671_0.17836859009345485"},"_hasShrinkwrap":false},"2.0.11-canary.0":{"name":"formik","description":"Forms in React, without tears","version":"2.0.11-canary.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"42def4ccefd7d85a831334637e0fbc06237d4ff7","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.11-canary.0","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-utqJ9itHIpKpAOXh35WjLV0Cx9oE3glZ+MZS3qKv0Bynh5hc1tDv8aV/So5mbif97JapUIWfjZdhzAZQGFMzyA==","shasum":"5449659072393a07a9781dc3ff697ccf10a04f7c","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.11-canary.0.tgz","fileCount":26,"unpackedSize":888756,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeC3d/CRA9TVsSAnZWagAA9Y0P/3QYPiL8DeaoIHupuN/Z\nV6gI20no4+TfszuUzJB7VdF+GcOFwa26EYSmiwqYRksbu7SYOiK2G6OV6HIM\n5tMZcrsTB1gtg8MilJXgwhcUaQ9XiI0fjW5Sed8hCmY2oRWrZkvR1M77qezU\nDxyzc6aemZHXYBzEPSAIHVGrzsT4O7/2UalGSXiQ5APEplleVXm7qm0CiSyu\nKPPkIddEOh+FukaOTPTTDu8ACI8owAWUZ7VZrLfmX810l2lB7IYSvxTnJKo5\nLJPm9cIyxp2goUQQBvyRWensJgYEVvtPKO1YEaKnXSgXHxhCd/1kK4jV7njN\nQdVKcQGAMAilHy3x86AD3O5qYWisv66REsSIRl0Xmr96K5sziCq5Ow/xh6Kj\nyLxt3rqEXNHMVIItu+NiJ3nw2iZ9fEQlvf24HQ5q1w9tEAyh/C1bSfXFSA8j\nMQKh44+5pxRZv9J6UHM1ts+uaJCe9YDVSQHfmqvejThEIOLAvGulEbBvE7uf\nwm9XrPHEa/1H9E2CwMPSHuqMltFpbfx2woADd6ZVBbnQenNxkdVVZ60NzYut\nK2QNWUlDnYgTyM+isOWWgkIM2Kd8+hF+FhL6lVPlCcILEirVeURsW+xi24aR\nxZYtLF2Ryc8me7gRsXW/A32/phtuKuuM7Z3VTw1LQ2Td9J+1IVrlJMKxWmk6\n55nS\r\n=Vksi\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDG7+IEounOyrQ7UyKj5LznXwowfFbvJt435XX5AhhV/gIgUK01/fXwupNHIJ8UifaIO1lbuOik6Tc5cLfSfdp7A8Y="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.11-canary.0_1577809791035_0.7355179254755513"},"_hasShrinkwrap":false},"2.0.11":{"name":"formik","description":"Forms in React, without tears","version":"2.0.11","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"f587ae895a9bbbb5f31acba9a41d3cb180df950b","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.0.11","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-6qXtkSdQnz9ErzqEaEOKMSFXVWTJWBgggMZdb6hZvcLRKjjcdZgaBbCulhr5nvqahTGoA1QlKGSmN0cEET2GWw==","shasum":"3a8fb79018b4d6580382d5f528413041ccbbaf84","tarball":"https://registry.npmjs.org/formik/-/formik-2.0.11.tgz","fileCount":26,"unpackedSize":888747,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeC3ftCRA9TVsSAnZWagAAAiYQAIPJghv1EH6ClmyuLwgX\n4pfjAxGKJQ1iVJ9UlIMfj2guD6hFZ0C2GJ+FzM4PRN9/ytG220uGBpSuG3Ou\nlxlfJg7N5pG1qw2kXjpKLAGe1wWr69kErkJ5EiZLFGrJ+HtiYo9sAjVOfUfD\nJPJRilBGjUxDY5vi07rZT/OLChM4DedBEZ+itgAxO/x0vQh+lLx1tR92m5i9\nuzxOPCKkmGHSLQEvfVBMij+eYdIuYoShCRWp+Hlom8Vf4nqznmFIMEbAmJUS\nPG9rtzok3znZy/dsFucnV8oSQLZF94fxBcsNUqnoRqU6loKxiniFLIL2EHon\nbEUgdaLhk7Yt7ojghb/nW/HHrAX81lII5fvmoW3sZ+G0ArMwBtkELbg/Ttnl\nol+BTrxRz+c41EUfNRfJ36755fglSynlXGJd7THsakwbEoRPBuK8aaR7JRx+\nmt7yDnuxwEzAJA66wnQuT3/xYacBBuNpA8UgKPwdHPI2e+ghoTb1WXCqEqnO\nDCrLtc3HeW0jkNz9DrrdSSMlQLN/A30dajnckkuNEFRiFg73ABRihHIR81u6\nz5H9xAQ1ubE3wey8+PuHh0de4eVI1J+EtxE2BCDPjccbHv+L4Ma+G5phu1br\n9qFQT89rLsMMJ8IzRPZ42V5w+s7Wquh615MLM23/FhrTdfAlJInOpHE2hXyP\nQsjj\r\n=RSh4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBVE94XyYrhGDDfQQgNspFKJoOMgtCZsRcJwBBfDtibfAiBjG3bhbsy9Vb3CrJuXRSpy5UzGLWqE/Kaw86/w7qzCIw=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.0.11_1577809901067_0.08284442639420919"},"_hasShrinkwrap":false},"2.1.0":{"name":"formik","description":"Forms in React, without tears","version":"2.1.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"09ee3ff897016cc7d6b1f34cbb692b83f4036214","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.0","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-GxH9uMX55UKQcX0hNBd/FuoYnYXKQY0nS9FH00vHyZzEvIfvvt+JMRWU515JbCvR9P2Sx3ZWMFgszjMugF3zNg==","shasum":"5a59b358170049cebcaf03e661f5f9c6588714d1","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.0.tgz","fileCount":26,"unpackedSize":895878,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeC3sNCRA9TVsSAnZWagAAnE8P/jYMnXc5O7ILxVfkyoow\nGN4XM13XblVpSLeO+IR4YKbB+4JMpIrKfVKhlx419x5i3jMMxuWIukDuYYw1\nyFdxi1AdMqBK8TzNDUUMbFMEpAhClDbrb+lYlXBgvZ7X+/NdTzmqn6Bx1e9J\n6jmqdLUkiCxca+PbOI/9ZshvRILvnkzZX2sphnx+BqM0+iKetRM6OVlbjXRI\nAnFrHwegmV6wmLEYOP7xPqCNNeJgFZCbJAVVOrS0KgSion7hfhEnFCy8vZTP\nRQld9P5sKwAhpWi9GACxQmspS7W5hOBB7+YH/N/RdGGq1QZ65VoitYud/w1s\n1sShhDDOND+zotgcdJ7EkzaXLSwyvzpF87dpVVD5R7CK1Vaaa8tPl4f9ay2c\nDQ1gfP6JcTewKyrkI9S+EJSzuVNIT8JHyWtjABBuDe2/aI+nsAiEaY25xDVw\nNJHN8MaOJWJy5tZP+2wS4C4YN5bfDWjjWCSavKI0z760g6LHa520m6ZZJyE5\nyNlz7dLXmnWim7iTmgKHsPdVXzt6y3QajUvfGBjh0rrqCMfYLyQImE3UJ8gn\nqPAEjxrz/JsW1NqfzH+cSGKmjPVZEgtQ52TrDv1KOtPyDo7s5J3+ig4xJ4Si\nHcqIMulX2OJlTjpqarZNpLd68OOno2YPg67DgTurhn0gxa3HH15nDdkIJ+eq\nvSBh\r\n=vvmm\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDJbpo0ehuy0vEuD9Uf/Ve5GuMO/i+ELWp5gRe79n7WxgIhAOhyIfitsupFFpEbv0ZmhWDXm4jdNie+3hUR8XGbAYJs"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.0_1577810700531_0.25292016042696686"},"_hasShrinkwrap":false},"2.1.1-canary.0":{"name":"formik","description":"Forms in React, without tears","version":"2.1.1-canary.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"f0e640db51a7776b48b483f63ff9b0ed78f5be59","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.1-canary.0","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-7bWqcbJwaS9BCrBc/hrkh6tsTFw+O6vc8730a4mTIehZFBRd1EbTuRVcqYpUHMtnLWZRCPQ0dfuEdXuyVIbbbQ==","shasum":"763a58c1d683f98fd6b1b1e699065110c0d76a2f","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.1-canary.0.tgz","fileCount":26,"unpackedSize":902582,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeDmMqCRA9TVsSAnZWagAA66MP+gON+uoFfWnRFcJaS9Wm\nsKKER5qgw3aMzYt1ZYaTYY2npuq1eNIgnTwiwjFMOLOszWg6Pnv392cAfMDA\nQCnnaaV9dTLKbCtJo71gnd9zt97JqlxLilw4bnGqGCVX1g9xRbwLsz5SCdUK\nXK5DGP1hdfhyW3WXtOARbexv0Odxdl9yhlOojhiuNtkq/2DgOXdk0Q/BLKyp\nBpoOZcKayqZHcLNU8xLVD1RYidfxQejFJqsDEqm3b6gF/H4JMpr5YoBWmsLe\nWyAsqas0LRAB995lUlPQnBLQPdhxJW+gdDiDQl2QDFqqtWeFJ8605It4W4pd\nEbp3gNJN6HlDeHi3GeRBtVAAhjr1f6+4VHy4bUYl+ROg5p2uoY64AML6bzds\nB8U9pm6sn/I+/5ej+65D2/AoQKj2BbbokhwW/bIu9w+jBXZFvuF2tkMtE7Ig\n3upB4lgXLvJnEA+tg0iwNnq3oS1Xcj+GDuq45ndY1X+NL7FEj/IwBvqQESqL\ncnTgxuwZcDtNhIiF4VWtZWEPAxQ0U/3j3IGlioHeRTKa0hqbA0b5phLxcNWt\n37tCcunoAnDJG/YnuWz09bGLIwCG/WIxNQkWHzVKT+fMaUWZ4pyfVfgEOvOK\nqDwIb3bi9WlpbmOIW+V3tlvmqAjWuEKwVMJRFwtHO05tqQpN7nJADZ1ArRER\nB4V7\r\n=NNBV\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCICKJIvpByzLUb3Jr9GDK82WVUu6TJIWxhcxcpUdb0RMPAiBa8fftiKQP45/xbVPDqO2f1tVQGyCdRxEhVCzdO/yFnA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.1-canary.0_1578001193509_0.8913971785570929"},"_hasShrinkwrap":false},"2.1.1-canary.1":{"name":"formik","description":"Forms in React, without tears","version":"2.1.1-canary.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"616a487215c41cf0de1e9030d48dc6f0f2bf58b8","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.1-canary.1","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-jxvdbXiMJb7O1F38qfaIeKB8X2Gw+bi/17cVUtGErV8s8VAmwy/SqJn1Fiyqgdu0Q6arlntaChCENdPC124/LQ==","shasum":"d4e0047ed2b06e39bceda7ebdd901ef3444be016","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.1-canary.1.tgz","fileCount":26,"unpackedSize":902677,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeDmToCRA9TVsSAnZWagAAmHUP/Rlbh6ihUgqL4rU1WQ9C\nr+tWyNT/I/2iObuwESiCPLqSUA1QfvQrk7njAiUOiO5hhnpXhO1IhpSCFaIl\n5DBVMqYU8YUVhUsAvGXqw0rrLaDD+zrs9wu+83F9ojV6VDph+K3vQJrxPa3v\nU+g8psMHmC4dF5ZZcDBHCydxLv/qtkewkbX9zDhaLchDk4GkCt8CUwdsPRv6\nPLLLk8XQHpHfANCb6e+oxUzf52j7bJXAxky6SnJa1dLtJX8Xa7FFV+gQGpC/\n5ywnNa6g9HXKj/uhtPW7h8yNWNL3rFnHQhO8za8FPg4/lWVPndbY7yGyTv5w\ntb9FqnaXjLPhXLVsDQTLAv8S2//RlK/9TRDc4mfsVjHX6jxSuDbEx6zTwBR6\nQyOX9DIw+iOhv48DKM1PcoD0jabdnYmZunhJY7D2uiEeGrtI8XZ2C/Dmomtb\n4Fvfo96aggaWyR7dWefbx+2xHlBnkCsUhCBiudb1t16UZSl8Rc/O0CuGolL3\nhTspCgrpNtPJD+/I3SAQoTqCH4hWe7l7/t0HRjK92KOFUegasAq/Tn8MPmlN\nqN9okyPFELBR6Z1kV2MCD4o3eBwhKV2LinWGWWFRCkeLQ7hGeXkzidkZkvCy\nDjTkqeB/CGHREe9jSnTp9OgajAALgNM0pBZFEc2NHmf7DpvUhdws3om2+hif\nXEMc\r\n=juk2\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIArl65f5VxiOeQd0OlplPQzGPWy6GMMSHsrPIILnEPi5AiArFInfbdi/VhjS+NRIlgRuT8LFk2BhtokNpdIPFKQ33Q=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.1-canary.1_1578001639912_0.1007782651620921"},"_hasShrinkwrap":false},"2.1.1":{"name":"formik","description":"Forms in React, without tears","version":"2.1.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"9316a864478f8fcd4fa99a0735b1d37afdf507dc","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.1","_nodeVersion":"12.14.0","_npmVersion":"lerna/3.19.0/node@v12.14.0+x64 (linux)","dist":{"integrity":"sha512-PdpgIPn7ipCzU5KBA+ED6Yy0kPqpZsWzoqI69ZJvcMtUfTzWrNfDeEdv2kd5aMAU3Iqs4PYFREAZjcthS/nqQw==","shasum":"a0f436d088e0aecaaa2e619682c323408a9e2c79","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.1.tgz","fileCount":26,"unpackedSize":902668,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeDmVuCRA9TVsSAnZWagAA19UP/28quIBnz/eQEmifHqmx\n6vWA0sqMaNRsHXpu4gn0i+T0uNBkXtdycAh7++G0j44KhmFJ4Jc/D2IiedjB\nYsu5BjcfbdHMhNlyrGpaqFcdW3+IB4LUJ4VNbMcxYCe7TPAUrpe9ouEajsqL\nJu/gMyBkjds6SBQ8qIlhvLgEgQvJU2PdYCl1A0MiZglgqV8p8gLLFeovo2as\nhHqtsHi2SqFZSFELqj+sC+WDvi2foGP27XjDOPfw5BcPvuXgObAKj1Q6upYP\nWqQEMeglulF2XxqMsvx0tdXahdf1P99jT8OaaH34UlhVlRXbIMknB4f8Cuqf\nZO4jWXkeaD+cXE076Tvdq6MX+lGWf0PnHKSd+r0pPKMx4EABjHbHm6izVd8A\n1TgjdWxrj6nS2J3FVzd/z2SmX96MKdw263QUiU/zWzc/cERvq0ZsRwa8wzDS\n/H9hRBHMb6t2hzk9Ff7afL6II29HoiDfxkRFKnEZrnXWDgLEHrA2EElbZi5l\n8Fn5GQN7cqNhws6f5dztB8jXHNCn0aQuEYMuCtRLS+euRdIRInuqNqlGFrMx\nKdVK824xGm5Dw5Qe7K0tihmCb76VjPmQ7eBC/kFoC0mrHzUehnu8dM/BV0/7\ngchJ2B5s/WN9+aKqb7FnhHCWmUCfp5IAI+nne6/Pj+CQqsB4nzMbX7okTrQH\nxBq8\r\n=h47F\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEo5LHSfObrMa9U0pjcyG9w1KO2w/xoUFrYmKREoReomAiEA2hUeKsKM0KFykYPP5CrbT15TW58X4Uv+ekJ71q/HfE4="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.1_1578001773913_0.33177350907227865"},"_hasShrinkwrap":false},"2.1.2-canary.0":{"name":"formik","description":"Forms in React, without tears","version":"2.1.2-canary.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.17.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.11","@types/react-dom":"16.9.3"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.11","@types/react-dom":"^16.9.3","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.18.2","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.6.4","webpack":"^4.31.0","yup":"^0.27.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"0b456da5267b296867ccf53d92fa7374a3335f0c","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.2-canary.0","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.19.0/node@v12.14.1+x64 (linux)","dist":{"integrity":"sha512-RsQxoStxHQ8g746Cyvk2DKpjjsFHtAcmNS+vHZuLwZvMKRLB/8zdVA31+zTp5h90F4mm7Y/i6Jry3TktzDImyw==","shasum":"f3c66b7c58487b78b62dae54858596be3ff4509b","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.2-canary.0.tgz","fileCount":26,"unpackedSize":903665,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeHIyiCRA9TVsSAnZWagAAavMP/i5z9dPPqJ0t2GGk8PTB\nAQJyizB8DT3wiAvS0/TxbKCShR3JOzPKLK1qqFeWlWFIuX9vmo1KmgYSPKzz\nDA4pFOOB5RL2qaRd30rsJOGzu9Ea9qFIvrlz2xkoO7mbXNkRQq3Fio7yomkW\n7qLyu873lLGtrHAfnFYjxk3ocKlYjw7z8FhIONqxTHQOsI/yIllvonKbzJ8i\nJHJ2kX/i7TkoDuGK1iTVY+ZURiCCEd+0fyR1Hxs2lnF5q6Aw0+QAqLtL91WG\nlBlXIiBPJdM/+g85DFgjxYFtXGcDq/s5ms1+UzjWUC8hpO1iHYC++CKExUqS\ncWpEXJDCUCK1+P/fpqsyrhipZOW1OTr8DWm/sTqOLB7UfOkViaopHG+IZjnf\nM8SDnmR4fe/YYEhHBtAI8mQtg3a1Sa3u4YIQI5rZ6+YhXF0s49yUjizbH4AE\nxhzTsXvLoFo6FBdKZD/zoksspjERz2XXH0JzNDhY/fkFV2df4wgk/M887UDD\nptbkv+DwosZNH1JjoNQNwVL49O+exxCCD5IKZ2MtTqBfIzvNWMm8+qBWMP/e\nWZovgrk8tuLkKd5pXCBRok2ae6MLyM/+SqgvSwrKPXMskqPuz5y5lXQyj2Rq\nxlwEgKauEHhUeu8yAtw+/AFbET5O/JPfwXKrnph0y/XkATmZpDfdsZ+KgBVR\nhjLi\r\n=wgKX\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAz/avSAzJ76TFr1Ms3z6RSf0MvUWQDWS7r9GfVu7RwUAiEA+/21wpiR4fjIzkN8n2+hB9jmCl3eGfska0casWyx+Lo="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.2-canary.0_1578929314173_0.2918917988884999"},"_hasShrinkwrap":false},"2.1.2-canary.1":{"name":"formik","description":"Forms in React, without tears","version":"2.1.2-canary.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.7.4","webpack":"^4.31.0","yup":"^0.28.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"3e5d8ed3b08cd719a6fdd7badd330a3552a46dc6","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.2-canary.1","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.19.0/node@v12.14.1+x64 (linux)","dist":{"integrity":"sha512-VLYgJoOp+KtpT+fds/t9iWmccMLm2qBsQSyrEXKvDebv/POHKWxvblD3e1Wis3vkA0hjXUFbV86QJ6kzGlqZgQ==","shasum":"7bee18bf16f98982c0d87a759c37cc4faf68e527","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.2-canary.1.tgz","fileCount":26,"unpackedSize":913216,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeHMoZCRA9TVsSAnZWagAAQ7YP/R5N+e3Ngw3jUDomoBEu\ngetrzxMuXVz6WS0vjzQo77g2jFoY0rvzTzUuwvCyeDCB1ouLP1YCmNcfAWND\nX/tnhBbXZkCHQz7NPWxpoYiLz31jN/rmEUUadD1QRsb0mSqMVoMg25+NqerO\nuUXzGQHyJ1GsBKCmWgl0teMRkPWqoC7xfTVzXvYylfiBPBEswxNp3WfaJqXG\n0nBljOhl/eLFaVzHKMaKtoqhvQ1mGepDzkMk8d8vqecubH8SbIY5pTjn3IEk\ncF9xSjjYbvpwoSL6Eh0TlNGu2A4B8/M+Yf8MB4V/mIgEJBGbEHjYKgkAtLB+\n2PQesUsTV2qT0isyeW/PWwfHBdHqXBUltbBW4bXlAer0elV5mSa4Z60YBC65\nkWYpyK3GoA6yqzawkE4Tnrwpk6vR/hgCNSpf+1Z59fePUP8Za7Hc0ocTQxEa\nkckYyCOSBowhF9t+LVsGm7a5JDLVBxR76sw+QeM4lEWt0VXRDhMmYJhfcrXm\nMe8qFqUXvi9OoGlM5JoIYpd3DZn6HCE/70HGFV8IKMGmK1paOoZ1DGd31MX9\nbJhsSIQqF5zooUSUXmC1xJ0QaTTAyenUMBVQ6lAaFYkro6XR0n54dl8gjemM\na3J6YEcjMUGgdUh4jfqY/DJ3i4/yl9XSKzZbrm/jH2/4y6e5ap89R3e4+mV1\nNSF+\r\n=4AXz\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCmA49txeNo25Vs1WJxGf53WGvlUSwjNrbmKdmuXsHkhwIhAPSnnDWPrW78Nx780TwcJBN5xv8tKwH2y+y1FyXiQotF"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.2-canary.1_1578945048585_0.6727127924568417"},"_hasShrinkwrap":false},"2.1.2":{"name":"formik","description":"Forms in React, without tears","version":"2.1.2","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.7.4","webpack":"^4.31.0","yup":"^0.28.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"46efe43c63f035122f5a1fa8899684b99a11cd99","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.2","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.19.0/node@v12.14.1+x64 (linux)","dist":{"integrity":"sha512-lbhyV8FQ/hkg4tsVf075Ad9/vDXVbSj6XLW8ooZtAZyNJK8MBYLf1fRJ6iEo2C0pODQneDboYpEUby7nsPW00Q==","shasum":"573f63383d35461c607dad717ea9417e6c192682","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.2.tgz","fileCount":26,"unpackedSize":913207,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeHM5kCRA9TVsSAnZWagAAmHcP/Ri/awS1mS/30pKB1UbB\nGp0c8aaz42pNq2FEDic4I/ha08oVa8QvTx2oTthEOum9dNzJIk7Q/u3NWbvK\nqj5LFuZ21SUEv7m22WyNHKHjk+WIKc2IyY04Qh9Yd6aJ/uqVBf+h21B3hTxn\nHprOrXPjGw2ohjT4Qr7LfOcS0+SYdtuXxdrNQkhnSxegWwp2bC7/8+KJCRV3\nYJBx+zMAmurK66xvxBHUvx4O3WwP255vw0xXs2uoA0eDBnpDS7eXVh5xCMyy\ndY2mwV7UNf5Y6+/gC3CQBlxFC6DrESrSCYmFScFEJ98uCXnEErPJi66raP6I\ncpypqkWWa1IF2r8an7h+jWRUopdLgywBVDVoOeQAgYXri6AywHzR2l/2N3C+\nuexBfcr8Nd6C+Ssl51C26xSLJlnsCDTxLIRNc2t+ih4cadjijbIDYoLhN5IE\np3Nyu/ExuLAauTg2GuA7uUCIm8AOKB1HOhJsiGaIzIqbY+aZzmHOYsW6X3vn\naK7XOCMhUwgzCMm0fGwyYPHYelf2vtkrxWk9FGQwBTWqEl5qkiTdkR60p6gc\ngaqtosXUHYRozIq+pmALRn0sVcvMV+K8c0i8Bbf3it30b6N6P/5rXY4OqK/F\nhKBqou2ORK8I0zFVbq9pE81r1Fx8ErtK05v3/Ev3sRMn7DPHIV0Y2hliOZ5g\nWpKK\r\n=QXAL\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIDZ1x1HOmPsDBUG0VqwEz9+nh4CcFwfvn95SvhzEjqDSAiB04HFfCp1duXtgiLvfTKOz+8StBHXsJpQZ8xuXMTSnng=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.2_1578946147512_0.34963146882952945"},"_hasShrinkwrap":false},"2.1.3-canary.0":{"name":"formik","description":"Forms in React, without tears","version":"2.1.3-canary.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.7.4","webpack":"^4.31.0","yup":"^0.28.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"d5e1de97201da969e86d1dec589b306ed0e7794a","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.3-canary.0","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.19.0/node@v12.14.1+x64 (linux)","dist":{"integrity":"sha512-AyxbU58kgk5s1fg/R1t1MxJsIgMAsTpodgEZ3CUHfF3rdmBJ79Gr43kUu6gbzm7fCZIQAodfZvNm8GbUW0YYlw==","shasum":"cbddf133445f81d8ca11fe53577514a058324536","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.3-canary.0.tgz","fileCount":26,"unpackedSize":913349,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeH5JkCRA9TVsSAnZWagAAigoP/je+tyjOvNaRMzxIElAx\nAHLJXsgsaNMPVpUTFxqNUOy/IOTg7HtK+DXTGj8t9HRXoGdbvGDrOCcRaQyR\nKRCSJ5iWxO/LsW43R25mNNjKP9oJGTSf9KmgCQj/shtdUIst7qmvzuMsEl/d\nIvkd4/JI6XuGJNLf2vqskJe6Pt8n2y7JRyZFKu1Qoyj+hk+J4Lyy2p/VE+WY\ni5qwbWuHtujXIDrGKbYjNyTsHN3LpK+HHLSG31NbUflF7nvV0nIfiSd+/Gqh\nD7Lsv4FC4xcw9GZmM7RA7ObfDkCW44XKTNMbg5oARQtObLB73CEO8bNes9He\nIvmFZgicYPwzOZWz++u7vL98IIbKJD7rg9FL12nSaIsHBxq0tP5lrOW4CxCp\nWb+trncvmU4+xym91JnpmqYOiuyHgJQJXwTA2Pkw/GKMM2W/3ecXY+uQYNnU\nfTwToWjsO4qwpsw/hHrNPVEbDBFWbegR25nXDFYV2cQqbbgmfsaWy40xDEGm\nasuAzN4S2UQXDWHIRqeC3Wom3JJTpK4gnwWDSwl/BIQS06ptpuRHvUzzMYDB\n6ebk7s/ovRzqTeio7+VI9FyI17hmP7EVE713UuK4rG+26HBw8p4XPwWAgTt0\n0QZfu3iQXsiqHlY/TOH5Sur2jBcDhWnTiA6tEGdxGpeHYn+tBg4CjN+LjUZk\nzN/a\r\n=CfE4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC9E1czQKhG8Gof7wCKXq5oCRtLwdph/Wda0Fj6AUCZ9gIgKBQHx49PK1EO1R1ohIxgfIXBtsuDFnNVmszMcVnFCxA="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.3-canary.0_1579127395988_0.6447340511586617"},"_hasShrinkwrap":false},"2.1.3-canary.1":{"name":"formik","description":"Forms in React, without tears","version":"2.1.3-canary.1","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.7.4","webpack":"^4.31.0","yup":"^0.28.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"0f4b9b1c07d53be61a4a6bd7349cee440cbe37be","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.3-canary.1","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.19.0/node@v12.14.1+x64 (linux)","dist":{"integrity":"sha512-PAhikL+qyj5SrDxUnR6uQa4kP2f6t4tZsTM2DvhDwhjdYilREQaGx/T0Nt6rpXvA+XLOvcb0OL1mE0Qzxdw/xQ==","shasum":"59424a5cb49de4839fe0d0e73d30b5061e42d4df","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.3-canary.1.tgz","fileCount":26,"unpackedSize":913349,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeMEzYCRA9TVsSAnZWagAANtwQAIzvfy843zUSuStjGmZ2\n7rMboT/YKpriqIvLDnD8ODUvGFH+qzz33yESv5EIt4gFzUssW6FdLcDPLSeu\nptpTBgNmjZezmH7Dj1nyIeZD+jB2k0RB3zPf/KU7FyBNxL+wrlYz4oQ3zvoa\nzQMJdz9A9D8Lyri0daqaDkxQRHuRIKAQRs4ENGp8WjbL+1VvvJD9DIZL4aaS\nI5sKR0CJaG5TeX48UzKUlHdG3eRpirzzd/GozJ7QXthUyd41e462DJH5G6vd\nWt7d71Xg0x8WDj9wCBIdaFDQFQxOcOqNYzO7wtINjmvlwrL3CgXxgo92aBp+\nV/4TpXrMB8YHIDQ9kFVbOZEq+SGPxw2iQZ2UflyVDCnlECn37edFHtPdsd2E\n6mUIufUYBQy/9rUxVtbS3By2yGaz3bRE4lxgV21iG9T7Te0aaL3atqEyxXh9\nZ17AnVnd6ZD1Doyf2LCUpxHo8OwacspT/7yeD7fzfTTivr6YE96ZnQpNr+Fd\nOJ4DDeWw6uqth5NxN8Fnl9SU76zQvbqlGQP3uzQ7h9NEfd5eZB9vbEjeesFx\nWtjBBNrPhPJ6CQCawa3SezsCbodRcZPnRlVPzT3a7ppU/t2uA66+0OMuCDKw\n4cyewIfJobQo9iLYjUo7myOt5g5X6PzQQpHgWChILDpDWDVazGKsoVGxWUip\nXCa2\r\n=ayV4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQC5p+niqwqABV+zp8IcC4uARSNQa3OKIxu5rZUCJGRwfQIgAr5UL4KE6nvPIREPPfqeDWhb+lF0XMnRsg15TMNltXs="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.3-canary.1_1580223703885_0.7355467374133702"},"_hasShrinkwrap":false},"2.1.3":{"name":"formik","description":"Forms in React, without tears","version":"2.1.3","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","storybook":"start-storybook -p 9001","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@babel/core":"^7.1.2","@storybook/addon-options":"^5.0.11","@storybook/addons":"^5.0.11","@storybook/react":"^5.0.11","@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","@typescript-eslint/eslint-plugin":"^1.9.0","@typescript-eslint/parser":"^1.9.0","all-contributors-cli":"^4.4.0","awesome-typescript-loader":"^5.2.1","babel-eslint":"10.0.1","babel-loader":"^8.0.6","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","eslint":"5.x","eslint-config-prettier":"^4.3.0","eslint-config-react-app":"^4.0.1","eslint-plugin-flowtype":"2.x","eslint-plugin-import":"2.x","eslint-plugin-jsx-a11y":"6.x","eslint-plugin-prettier":"^3.1.0","eslint-plugin-react":"7.x","eslint-plugin-react-hooks":"1.5.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","raw-loader":"^2.0.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.9","typescript":"^3.7.4","webpack":"^4.31.0","yup":"^0.28.0"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"2852cdb8ded18f5840dc3dac4cac4c4859120130","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.3","_nodeVersion":"12.14.1","_npmVersion":"lerna/3.19.0/node@v12.14.1+x64 (linux)","dist":{"integrity":"sha512-twK9sxWt+M2NSXxHBw6TiXNJ72iPVhgUUjeZMD8RYQC+VU7Hrxu6ElCz1xGmbT0q2DbHk4IxoupCkGEPwERzEA==","shasum":"bd168011436393c8426a70cf8dfa5ddbbb95fd23","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.3.tgz","fileCount":26,"unpackedSize":913340,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJeME1PCRA9TVsSAnZWagAA/FcP/0e87qXR2NtSGsoWHscM\nuIcXSmauBx4oFY/xF2O9KNSWwPn8ZoGAzFVvdA78+7lIaF7Z8kq9k+utv2Sz\nSVkA+TWsoMyyUVKSRcKmp/1PGnJ1hjlvDhprOk+O3Gr0MbTqTWJIhbhiO9DA\nFKdbzWWl6tLxVUqKHCOGagRe40SvIXtz7+LDW+b/MJWoFkbuz5OdlEmqhC2G\nMPPHLYUYenAdoR2ZKphBqmE2lYrcNeNA+Svu8v0CDClJ9qlKsajMTSWqdbpy\nuMXVv39hJgN0x4PtiOUoFvxtjcpR2J8jdrJMbgC7ctOBWJH0br3UczeRpGjs\nP9W565MpQ9UhHfXaFt+tBIUICWvLSzev665irHfaTPxmE/051t3mgNyN4CpU\nMXdi1sZMH13Tv/9jXXBGqFYrlsTqOeomMab77Mt9dkhWDZfnTH4B3rH5ufaF\na0qKWNcaXH4mWldawdXCY+frRUWT4iABGvrVEBkuLfK0E/wD3+o9cjBViyJz\nMQWIDn5ci2bqpW+wHacvLOEkcr5jcz8c5p3vmGMqkyGTjuCLQ0/Tgf3HVihZ\nzU3BRDiXDQwwVleNgP+daO1o6WGR99aD3wXGWCOrAaCZ0cwMVnSEETF9IUfg\n2EYK5izcz40pKbqbsfn+Q5yzGXIAs5nv1AYfLszgUI7EstJcHo3GehVU8+1P\nkS7u\r\n=yrOl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDP90e5gJxnFcS6sCbcpxpq4syI6e28jjiEQVYaCINxywIgFt8V5zSDPQv9sEkEN0AOKNjtCevVWfaMS06zAdyIAtc="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.3_1580223822669_0.281234269374008"},"_hasShrinkwrap":false},"2.1.4-canary.0":{"name":"formik","description":"Forms in React, without tears","version":"2.1.4-canary.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.12.3","typescript":"^3.7.4","yup":"^0.28.1"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","tsdx lint","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"197f82824cae129855a476430ef7025d8cec43f0","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://jaredpalmer.com/formik](https://jaredpalmer.com/formik) to get started with Formik.**\n\n---\n\n**The below readme is the documentation for the `canary` (prerelease) version of Formik. To view the documentation for the latest stable Formik version visit [jaredpalmer.com/formik/docs](https://jaredpalmer.com/formik/docs/overview)**\n\n---\n\nLet's face it, forms are really verbose in\n[React](https://github.com/facebook/react). To make matters worse, most form\nhelpers do wayyyy too much magic and often have a significant performance cost\nassociated with them. Formik is a small library that helps you with the 3 most\nannoying parts:\n\n1.  Getting values in and out of form state\n2.  Validation and error messages\n3.  Handling form submission\n\nBy colocating all of the above in one place, Formik will keep things\norganized--making testing, refactoring, and reasoning about your forms a breeze.\n\n<div id=\"handleblur-e-any--void\"></div>\n<div id=\"handlechange-e-any--void\"></div>\n\n## Docs\n\n- [Get Started](https://jaredpalmer.com/formik/docs/overview)\n- [API Reference](https://jaredpalmer.com/formik/docs/api/formik)\n- [Articles / Tutorials](https://jaredpalmer.com/formik/docs/resources)\n- [Get Help](https://jaredpalmer.com/formik/help)\n- [Release Notes](https://github.com/jaredpalmer/formik/releases)\n\n## In-browser Playgrounds\n\nYou can play with Formik in your web browser with these live online playgrounds.\n\n- CodeSandbox (ReactDOM) https://codesandbox.io/s/zKrK5YLDZ\n- Expo Snack (React Native) https://snack.expo.io/@jaredpalmer/basic-formik-x-react-native-example\n\n## Examples\n\n- [Basics](https://codesandbox.io/s/zKrK5YLDZ)\n- [Sync Validation](https://codesandbox.io/s/q8yRqQMp)\n- [Building your own input primitives](https://codesandbox.io/s/qJR4ykJk)\n- Working with 3rd-party inputs:\n  - [react-select-v1](https://codesandbox.io/s/jRzE53pqR)\n  - [react-select-v2](https://codesandbox.io/s/73jj9zom96)\n  - [Draft.js](https://codesandbox.io/s/QW1rqjBLl)\n- [Accessing React lifecycle functions](https://codesandbox.io/s/pgD4DLypy)\n- [React Native](https://snack.expo.io/@ferrannp/react-native-x-formik)\n- [TypeScript](https://codesandbox.io/s/8y578o8152)\n- [Handling API Errors](https://codesandbox.io/s/nw193yq32l)\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo.\n\n---\n\n[MIT License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.4-canary.0","_nodeVersion":"12.15.0","_npmVersion":"lerna/3.19.0/node@v12.15.0+x64 (linux)","dist":{"integrity":"sha512-NjI6tH33liC8TqsXPTsf4APUO0pmlNN7Z95tTAFwT3pMq+I2C7iuXtb/Tbeqw0y2NJdr/GwQGiUsd7GxzRhzxw==","shasum":"e69425c4699b1bca3cca2b7c116782ff9d2e8456","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.4-canary.0.tgz","fileCount":26,"unpackedSize":927465,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJePFbqCRA9TVsSAnZWagAAuTYP/RdKBHGoUcrmPwAzuUof\nVf5IgtEXaIBRZ7rA0wCm/qMVJ8kdYD5EmDo2uoZnBaJRdzfeXXVY3ijHw/6v\nXI0UW8iw6+VdYFucy961BacnHPlj7bLPVgYAMRcwpMEldOmXUu7hxJs5IIUB\nGPVb0VgzrgFNLZMoO/q2G/Tse7KezsmHwXcs4QpF90Yg9Vy1X+yZc3csl1Xl\nxU4EoMw4p+9+E/eU/qZJeHb3U3LNr0XBLnpiHcGgIWtH8ePqiddkON2Zss2H\nt9hlgENMgTEav3H2rAS1yp9lcqVxJ6J8dBxiEVm7g35I9voBrEvJ59bkN/yP\nrJ7AIjHdwh8djsNgS/7VXXjh9Yd7b2NPBuxkUcIyP0Hw9pfxnsfgjcSQn36W\nptfIok5zyWATJTtLgQVCEae5/PJfwAq8e5YjJhHtE+Jb9ktI7HDTNyAQ20nW\nDEDl3FravlxAiwLe6brGy1he4Q939oJ649HGESSP3elrX6e4kV2n0qvUh8Ge\n/PYthx7+602mDhCX2TQP33hXAFN7coGDGe//BnrfVWI0qkaRvo/YUd+I7bZw\nS3zlXPfWasVv0BTuE0gGUoYxURBZE/CWwNaD6bmxHgnrqO72wYCGsupWLxKH\nwdSjVyBN7MiSAE9wfVbx8zfjv4qUP2MnymnzDypL3zdc3ojLbAzac2sHDArv\nXbVi\r\n=ZdiP\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD1B9wO0j6zO2U/96mUR5nVWCOvaIbaxeqOUU2t9Ok4ZQIgRyK2A+LQrU+gsSUxdDs+zB3tAsL8fKMstNfit+QpO30="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.4-canary.0_1581012713842_0.9551367725413555"},"_hasShrinkwrap":false},"2.1.4":{"name":"formik","description":"Forms in React, without tears","version":"2.1.4","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.3.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.12.3","typescript":"^3.7.4","yup":"^0.28.1"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","tsdx lint","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"747fd8923c132a5d7d73d318c8e5df8dd292967e","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"homepage":"https://github.com/jaredpalmer/formik#readme","_id":"formik@2.1.4","_nodeVersion":"12.15.0","_npmVersion":"lerna/3.19.0/node@v12.15.0+x64 (linux)","dist":{"integrity":"sha512-oKz8S+yQBzuQVSEoxkqqJrKQS5XJASWGVn6mrs+oTWrBoHgByVwwI1qHiVc9GKDpZBU9vAxXYAKz2BvujlwunA==","shasum":"8deef07ec845ea98f75e03da4aad7aab4ac46570","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.4.tgz","fileCount":26,"unpackedSize":927456,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJePFfkCRA9TVsSAnZWagAAU6AP/RlUnvYxLMSBowNR7TrH\nos8zrC4hsh5NkJGUOJioPauqxvtetc9YncAToKuJUpgCbPvyg+59hnOdwqxg\nAgFGKwerwP6MQ8d9PnBHFirXcYjp3B1xvlZrKfANuc/JW9+S07Sp67Fq5Hkb\n+YN1oKUFGd/PF8lNrYtOZCdJ7YgQuIlg4iS5R2qIzlRRs44NcRm8nB6DjbA1\nayU1u2BA+R7khFKGINi184VKIY8tGhTalo62DO/MLOc9Fz3YGisNwsK71Yc9\nn7tNVsuXQHNO1/PdVy5cPr4dL1ye9u2RVA+uZUGjXiunCn5FasPl5zqxSc6F\ncFV3FSa+rsmmnH824Mv4tEy4Yi+2w/xQpnoaJduhhMzes0Nq/lNN+kFR26Im\nyPJNXrFWyQIRuHdOHSqLjVzRLHoeNK3KtvAI6eLIkQJQJZD/64E5YlRVDw0T\nOrhvknAQh4za2efx09K4ESAbJ38TrdwoDA5ZEr+Uie7DMZ6sQco7sluFOV7l\ngYzE6V2tFz2n5Hq3tJlc9T8H/RARmzYqjndwMgcF6XsTIOrMq3iNXLTYsL+F\nWdpk48FYxcijtnzVLoGl+SYFdYYRIBwExtWGMl/5iSSM8cp7zgqevwagX1+g\nufd593OF1MryH3VULmOvUjWR32E7kSyh8Iy7CPWMAOx6HmhXQoOwftSaok1e\n++c6\r\n=sI34\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIExZ0X14IBJiRTeyTjMR8DA8Mgldw/4zFFHgt0o+VCjjAiBi+OyWrDRJj6x/7oyTkaemXpNKj/aY24hrmYW473eJUg=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.4_1581012964245_0.029982610593868975"},"_hasShrinkwrap":false},"2.1.5-canary.0":{"name":"formik","description":"Forms in React, without tears","version":"2.1.5-canary.0","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formik/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.12.3","typescript":"^3.7.4","yup":"^0.28.1"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","tsdx lint","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"a75757f24ea4acf8f9aa8ba0befc7641b9468828","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/MIT)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n[![Join the community on Spectrum](https://withspectrum.github.io/badge/badge.svg)](https://spectrum.chat/palmer)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formik/formik/issues"},"homepage":"https://github.com/formik/formik#readme","_id":"formik@2.1.5-canary.0","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.19.0/node@v12.18.2+x64 (linux)","dist":{"integrity":"sha512-ytJ++GLjZwCyO1832a+luKZsjG38exKIBTB6vIx38msgs7ruoqvWPlgQ+4juHeMVudFhuxBShtb19Y5PYlZymA==","shasum":"3cde5f2496c9ef3891ce3533321cf9620abc257f","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.5-canary.0.tgz","fileCount":26,"unpackedSize":935553,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfDe/sCRA9TVsSAnZWagAAJYEP/jE0GqxwXExP/xKvGbDL\nyNoWC9uPMDrF5WhsDzJbC17HBiSHVidFCqiRA3MJQyHlt4sxbD1XHuQ8Lns/\nUhvRvjizH/GXiM64UMIrap/SDN5AluAG4vp6hMjy7Botv/1RjUr75gF3Xm+D\nVh2IKEkNKa6Z0EL03atAw694wbfLaSyHvEO8AHSH1hZPK4L+7JXPYS3c90OC\nlQ/dQaKqHuQ1Uk086QopWI55F0LsCl0/fv/Ero5d8FKMySMbw41vp7CDIeM0\ncMIED47rAZsOLwSPIUvqT927xg1r9XNr3jhupzUXmoPy1habDwORNbBYo933\n8z3mIgiYOA56XqPv9//X7t/1BbU9Cz94sPqHFcCEnP1UK3TfW7q/7xQ/vgRO\nVDkpztzGuUSdoLKI4EGRJy5QOC+n9X9PUO8Kiuc7C0b4RfhqRayxnf75DDcQ\nKP45i9BJUutbh3pbVIKBCngdnasipYKekHZNaLJv/cCg9XqCOyhg7YxNYiCu\nO9SjlhypEzBbO4Kz+k+QDHJqPIXT3gon1x59ZwbSIxeDP7ehs+io/oZjXrY9\nBU96dGGjph7UMVEcE8bSX5iN0kSBRbQFvZmcSEGHuflent2Z2cWRpKZkPmqS\nLCWHC/yzIngvi50660+ySX3+uWNnpLYB662JXgdSFfv5VtfJX9VNh9MzuYKm\nefZq\r\n=GRwK\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCyLUFDhcSSsU3dpq5fApVy4JL/o/gosFg4gzQdK1WqeAIgPhy04oYikQAgsFGMT+t/5UFfp7eKBPh0tVBpmJhPhek="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.5-canary.0_1594748907862_0.32971165371003464"},"_hasShrinkwrap":false},"2.1.5":{"name":"formik","description":"Forms in React, without tears","version":"2.1.5","license":"MIT","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formik/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"cross-env NODE_ENV=development tsdx watch --verbose","prebuild":"rimraf dist","build":"cross-env NODE_ENV=production tsdx build --format=cjs,esm,umd","prepublish":"npm run build","format":"prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","precommit":"lint-staged","addc":"all-contributors add","gen-docs":"all-contributors generate && doctoc README.md","size":"size-limit","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@types/hoist-non-react-statics":"^3.3.1","@types/jest":"^24.0.5","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","all-contributors-cli":"^4.4.0","cp-cli":"^1.1.2","cross-env":"5.0.5","doctoc":"^1.3.0","husky":"0.14.3","just-debounce-it":"^1.1.0","lint-staged":"4.0.2","prettier":"^1.19.1","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","rimraf":"^2.6.2","tsdx":"0.12.3","typescript":"^3.7.4","yup":"^0.28.1"},"lint-staged":{"**/*.{ts,tsx}":["prettier --trailing-comma es5 --single-quote --write 'src/**/*' 'test/**/*' 'README.md' '/docs/**/*.md'","tsdx lint","git add"]},"prettier":{"trailingComma":"es5","singleQuote":true,"semi":true},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"size-limit":[{"path":"./dist/index.js","limit":"14 kB"},{"path":"./dist/formik.esm.js","limit":"14 kB"},{"path":"./dist/formik.umd.production.js","limit":"14 kB"}],"gitHead":"3edde94efb44394307078dce300a3ee6d0205ce8","bugs":{"url":"https://github.com/formik/formik/issues"},"homepage":"https://github.com/formik/formik#readme","_id":"formik@2.1.5","_nodeVersion":"12.18.2","_npmVersion":"lerna/3.19.0/node@v12.18.2+x64 (linux)","dist":{"integrity":"sha512-bWpo3PiqVDYslvrRjTq0Isrm0mFXHiO33D8MS6t6dWcqSFGeYF52nlpCM2xwOJ6tRVRznDkL+zz/iHPL4LDuvQ==","shasum":"de5bbbe35543fa6d049fe96b8ee329d6cd6892b8","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.5.tgz","fileCount":26,"unpackedSize":935544,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfDfGsCRA9TVsSAnZWagAAADIQAI8zEDsv9vcIiSgdZ3oA\n7LKbG7g6wxCC+ybFi+99ki/W3EiqYEwNXgph5/gCtdxSSehO7suBQBFKR5PD\nQMYFg/stbdShXYnYlRAelLNuiLPWb60Pxa06ZcuHFcKYyTiPu4q3JBrkKpiW\nNIJe0tmgbW0ZfrNEZzkxqiVGbLC1Ni0aweF4jJGEjhfusyJir/zumtzD056x\nlMhs49CC0rkGziHiI5ABMNxuj1PwhKwdhqLExY3Q/Ao7HEfIRLIG7QND7ApM\nswcN2tbz/91ZfYv9Z26y/idDGKW4x7OP3YsIAaqp6S6HVewKA7oxU+uR/aIp\no2LmsrJ36z9+wN6j2BGW8ZrE6f7blUrqZLcjr/jgUcPaKVXdUZQKiY2iXfia\nBqvVLiCRYTeChGD8wR2SfbwlFDHHbIoh06ZaZMAyB+bOaDV5lo6MiYzEqY0c\nQRej+bye61P98Kp9OMySYc0LQqPCtWCM0htFZVoUjPY16LgfxqjasRzW+8QI\n6S3iCDRQT9VTQkFsBoGdJxNPJ5vaLMYua9Gn5tewDZzLZFgaAkqsIuWXVzrO\n2PuQz0e7M8m/fQkvI5kjSo6QPfBvxrYpRrpeS0uuLZO5eeItWU4y4j5NMUXv\nzcJkof8hgSZJ60pBc6AkAHQvSQJwws3jFiHvJHavG3JEcil67ALEAMwvJ91n\nJTRL\r\n=gS1Y\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBPa2FWys0X8gFtSEJgkm/PvkfOBtb/Ez5FDYJgICLk9AiBYp/t8eKdlK/BjuyRqhhYoT8tlOCdirxf4yp7c/QN83Q=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.5_1594749355588_0.6718902850781308"},"_hasShrinkwrap":false},"2.1.6-canary.0":{"name":"formik","description":"Forms in React, without tears","version":"2.1.6-canary.0","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formik/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"gitHead":"764d6dceb91ab58b7479dfb4059b9d1177a7839c","readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/cU6MCve)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formik/formik/issues"},"homepage":"https://github.com/formik/formik#readme","_id":"formik@2.1.6-canary.0","_nodeVersion":"12.18.4","_npmVersion":"lerna/3.19.0/node@v12.18.4+x64 (linux)","dist":{"integrity":"sha512-70XeC+NhFSeJcVWo/M/a29ICPeIcNc5mh6+H72NgkUphFWhybeMDW3BFk0TWsrtfMnL29FImtc2psbvilJxdNQ==","shasum":"d67f99f4e710622bf4891c8d47aad501941c0c05","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.6-canary.0.tgz","fileCount":22,"unpackedSize":595327,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfbPr0CRA9TVsSAnZWagAAq04QAIqZTPbv5QBxATL0aGq3\ngygRAVnR5J9H65UkmnT7704A2OhvvwGl9o/t6XTvplpZI0aezjLjmXKIWWbY\nOsqtpSWTWnSUhiG7172tomihBoqDM51OoupY6dOCWsuX//P++HnlKmpqxznW\nXFhfmzmsVNhXoiayM0RHb0ru2EPtjae+VMlQl4l+O1dTP0Ykv8pf8SR8HVY6\nA6xwvf5d1XH+d93hBzsSMD7VXEPKhMAW2UeP4YjeZOxF8HktTxt2/Z1LNepO\nlZFSQo6hp54LJPOmQMV7HmK/HeENLG5wuZBxmBu/eOlUKXLp2BgUjNbp1hXb\nWYbIzUwUsYI8/df8d2NcuMe0CDqU0tFAg+n48zNoZYo8vHtHGeYNwT8XSVL0\n+HtGQ90crISQPO50TZRpdCMsKtlkZstg06KHyctixvodLNP4yl7pRlaq/2dL\nWDnyoELhzuTk8ZBsbaPQl/7xigBV8UdKBk7NWjFcjfoqXe5N4Hp4GaPtkVrI\ndlC0Xt1ZNrvLfuH15t+TDssoZoeORdxZcJ0QmC+MtdbwldahDnPJkSuHNg09\nMEiMJA7ph/xYkgNDHz9/3V/UcuWNBSmFrur/PHi3tBHzE2hhl37TDsR1q/UN\nbF/CEvT9FPm3LcK53t9IXgMkZQyuCjuKs9dS2mRqQUW33LH+uvUVKXvx6btz\nq3PP\r\n=bQQM\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQC0aFujnyxcHefJxicL7wWPIuHiFDA6eeuWTN9PX9DzyQIhAO1r0iAhTsA0wnY5hKZMBpYpjbtKVdZcIs7Zh1WKsebt"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.6-canary.0_1600977652227_0.6364880957546026"},"_hasShrinkwrap":false},"2.1.6":{"name":"formik","description":"Forms in React, without tears","version":"2.1.6","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formik/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formik/formik/issues"},"homepage":"https://github.com/formik/formik#readme","_id":"formik@2.1.6","_nodeVersion":"12.18.4","_npmVersion":"6.14.6","dist":{"integrity":"sha512-m9DcxlZw/58p4xuhH3dzUzQWaC4dig0RKX7yNQOJt4VRhXn7p+YRrs3o17r3YwzvOLua3zC53VMbfupLsDwO5w==","shasum":"f723bfccb2c7abec886aa6a4930b360d20f1a0b3","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.6.tgz","fileCount":21,"unpackedSize":585122,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfc53bCRA9TVsSAnZWagAA26IP/1F377S0aMka1qUQO18l\nDvF13p59yooceMzFRkr+b0boiNElNMYYe4unDE6IBS/Mc6gRnVKyEqnKe4q6\nnMQHlAFvtsJEL1s0VCnujCjGuUniHIhuXPxpCE57AwUimv954h05gJUpX5z4\n5A8W2OGko+OHsBKowR2POCEGgOvj46S575G9V071nTLE+nOMKozmtWGPjrhQ\nKkEbniCHAweoynWVy0b3Z367/5DxCqx85UiOuUgBn0nXsD6tv1qLmH6phGvk\nzECerXIlkERjdqofMT+5qq3M6zlN9wumQ+qgbDxsY3ZVjITt//fNAVo/AXNp\nCnrPH4geMHLSPZCkExNEGXC6xpSV6xJGpUrWKsxz8VtU9VYcbOggjaYmxPNG\nmZfBdwzm0aXUuxnLMwS6/XZbGwyn7G69Xp6ncr+0yMo6nkKr7jy9jOrU0xDf\nh3pb+Wz+QnVFKSoMFLyyk9z3ngFV0Nv0TClI46f9JdP2OUEXYmFRgQJn2bXH\nfumayfqFF2ZGMztezLOmr8FVlWjS1lPUNrnPzhfbV5b+iq+kezhDbOm11JfK\noUdeFGd/xDufjnDnqGn4a/WbSAXLLNkcBeBdR0CFATgYvFFM/ieVY+A8IZLX\nsDmkp37SzLkl/qPC3u+/CLuAMkTrHhXWn8HGSKy78eSl37g/8HgfKMQnjYbU\nZx+K\r\n=xn/d\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDm1mSfkt0ATGt0NvcluYy5Bi8mbyCnlT59UT9/KIrN2AIhAMGDBXX5ezYO0CJeaCOPhuFdxa3g3VFCu3eDJHOpftUY"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.6_1601412571150_0.41041283529932326"},"_hasShrinkwrap":false},"2.1.7":{"name":"formik","description":"Forms in React, without tears","version":"2.1.7","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formik/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^16.12.0","react-dom":"^16.12.0","react-testing-library":"^7.0.0","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["react-testing-library/cleanup-after-each.js","<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formik/formik/issues"},"homepage":"https://github.com/formik/formik#readme","_id":"formik@2.1.7","_nodeVersion":"12.18.4","_npmVersion":"6.14.6","dist":{"integrity":"sha512-n1wviIh0JsvHqj9PufNvOV+fS7mFwh9FfMxxTMnTrKR/uVYMS06DKaivXBlJdDF0qEwTcPHxSmIQ3deFHL3Hsg==","shasum":"40bd04e59b242176d0a17c701830f1536cd7506b","tarball":"https://registry.npmjs.org/formik/-/formik-2.1.7.tgz","fileCount":22,"unpackedSize":585424,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfdkVCCRA9TVsSAnZWagAA5osP/1RpoOCb50Rl9CdEHP4y\nU3MDguNf6auZagEOzy5y5KBH9pVh+bM9g0n9bKXLsNYCclXV71tEynUHsXMy\n3PXS4mwUeTLbgCdkb3qHHEPCVCW9Sk4Rlfm/d7bovsThuSs00GJ/65j4yaHJ\nKJsVTvzD1tS0tMRYRonHEcVjBRseqVtnivrrJdvWxfq38w8W+pD4ncTpUJT/\nWK4/Mns7rw+e7PkIXxHmc/+rfrNFprD+IbTRvYCDySdjqBEDc8KCgy9bjQs8\n5nmRrKHpsB1olphyy9zRdN9oYzStRsh220Z/mdKPeIQKbLVBZuDUP5WfPJNt\nZ1DapGNGKjhJk1wUx9m2CG3CUT4n52aAjMDsxuKnR3J9JK6ZOwG4eNBPsor7\n0pvJg/Fp9E79bCOABRsVCd1vZTmoJih0Zi0SGjkpAlJ6jNFnSkpRvlWN1097\nAjsjNmRXe72OF0ispEFf6+JFFpPopi+QXRffaCWXHwmtcoRHGDupQUnih9TR\n9PGibrjI9IiJCHnfsDpk5ZMCePOXngOOHVM0khbtKvWNtdQ6+VlzCfZYLNDZ\nKqoFIB+/noQ/VeFfAmjQtrBYtcXajvI/wOECD/VsPaOkUTsMW1roqYKAjvyb\nn+3b/Cx/v+m58ZzTWDLztSppnN6WE5+EuQ0DU55Yf3Ljeb3+vSDzo7qGcz5o\n60Sm\r\n=R1k4\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCegE0bRwoI0FQE23noleg5ROHX1z6n+3fCeVdNiMZ6ugIgC2ZZTq5bRS0ND5LJGAZod+2ilqFFbEv0yIaqbr27cAU="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.1.7_1601586498491_0.7753837181448893"},"_hasShrinkwrap":false},"2.2.0":{"name":"formik","description":"Forms in React, without tears","version":"2.2.0","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formik/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@testing-library/react":"^11.0.4","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^16.12.0","react-dom":"^16.12.0","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formik/formik/issues"},"homepage":"https://github.com/formik/formik#readme","_id":"formik@2.2.0","_nodeVersion":"12.18.4","_npmVersion":"6.14.6","dist":{"integrity":"sha512-l47RfvejhfHNh8rTRVaCaPfx8nyeYDSTLaEqRvLX4qkWnrrq9ByGVCWggVR+0TVtzc5Ub1gLUuVu9UKuGwfhjA==","shasum":"04c067f6b832aa15cae055f6df6f4aa485b5be35","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.0.tgz","fileCount":22,"unpackedSize":586839,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJff34oCRA9TVsSAnZWagAA2G0P/j4cURvWstJvl7EqHRy2\n4gZMXSheTcw614shfbziueaadtZeBsz4+7W5o0O7muqAYfbcI4f1lsGqZCLJ\n77rYtWHJkaFQ8LuozW+cnPpiklfcHl8fq3NrP0czMq+ak0C2wkyR+dPJkBj7\nqAO9LRew1/cS1LBqx5sz2UEZ5d/DHlXzW9S1qVvOJOG7MW3iQO/J9koLJnyR\nlLc7Bs10ilr/AJcGfdcsueSz//kwOLnofeUgrv8piru7evc2jGgv4cnysBIJ\nuSITLXypZQw5BQgnQAVBYgwDcy6DgqMnJbr1wbe4y7x9sX0gzKovz3u484vu\nc/uQlS7LXPSeCFCg97BLUNWg5xQRmSmTi+K6joN0aQGAI0kR3Lbi8gClS8eC\ncKbWKDHb4Php3QioUtmBaUr1jAqfDFD2ZPenB0F6xKrCxPeDK4vDOi54YT6Y\nLqykYmBcfwzdrCjaa+6OiHkt45jTsLAAryX05R9llp6tlr4LCNBgwEHlLvjO\nD7BNJUlW/qu3JErQXwePtQNCprMbAQrF1ixtZ6+vmkDCDMNef7VOIpgmUzxX\nlvutLjxy4eYnEaIv9dnTrcgG+ARo2PUTTWTnGRWSpwJEpZFvlsMeqrKr2R4a\nbEFfEK/94hPWZTVny44IJt9YiiTBI53fAnh1aO+1Pr/V6QTn7GZbbwnVq6eK\nujvV\r\n=0ee1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCye1W8TpFNRDdg0qf4VXmRHIjCAX3ScX8I8L5MKl3WbwIhAIjP3DgKtP+47E2BjbA1UtseYryvbQ6wS+d1WOmtJgAQ"}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.0_1602190887482_0.44425842873009924"},"_hasShrinkwrap":false},"2.2.1":{"name":"formik","description":"Forms in React, without tears","version":"2.2.1","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@testing-library/react":"^11.0.4","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^16.12.0","react-dom":"^16.12.0","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@2.2.1","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-N/8Q1yGlXHibyrM5CyKtC85V8U+mxY04zSfakpyR1e6KpaIC4+A4yo30NBARRprkFoxoT1EV+yK8bo5tjXxfyg==","shasum":"e09747569e44ffc17263541d2e732cc6568208dc","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.1.tgz","fileCount":22,"unpackedSize":588947,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfkzdpCRA9TVsSAnZWagAAqogP/1MrLc1AlexqVEPkCDCx\n8NYOLsAVxwKDKCcyzMu3MZXFULBlbIMNYpNv0njSpnrIoXsFPaFCaTBaQHG2\nhyJwVSCaZqIxLewrU+yUvi6E2AI49WfbEUyvvJ/ZYCnroQxYVQpieqyvBk0G\nzdhCo23BOVZcbcdOTH4aEW18cwkuTG/ZJ37UR+qKztjoMgKWaR3+fMCrAUSM\ngBZKdzmaDYoK7BjvGocH0R57Zs0PtMxbIApGIOFymu9llnt6/OvPYscDuo9w\nCnWvo3/TrVdjfKzjAiivKqY4aMtWVyyNGBf1RDe/kPjdCoZu5ddpSAccoWbs\nq9OfmjJjgzxRxuEHjjzJeUN83ASETQJ3K7Qmy7IbgdYQEiInrs0cw35vlAVh\n5t0r2m8pWQCVKMOLzqLPhIq8tH0Dmsp/aVhiHP1a/pl10a1V4GOtWptljeqD\nC5dJ5qpPY2rvz/hDib/tnj90wO86n2K6k8+JBdegqil1vp/Uf9rEn6qZw185\nghbMIzw1w89H8HUdwSx8+mN/glD/tVTUNIUP2w9nORc6IjpkyQ/mhds2byC+\nYIqCKRkfxT2yCNBgnEgQ8S8vgbVlDEsJLC7mue8YvZLd2nKv8ymxoOC8xop1\nqU7+qs/OIiFOzlUka1IEPaDWfb1sEntgm7n9hL76W+ZgSEOIRzEVDNHJniQN\nlKgd\r\n=pGT7\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEGS8Wi7O+2YufEQQERgQxtf3NdCGcRAXP3j/7sAOwvjAiEA/+m4e+Gjq97ILciVwGBZdtmeaotQF6AK28XtAOZnJqw="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.1_1603483496994_0.4427381883438273"},"_hasShrinkwrap":false},"3.0.0-next.0":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.0","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@testing-library/react":"^11.0.4","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^16.12.0","react-dom":"^16.12.0","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.0","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-HG258Xn/34Eout4VvV8wi0hwiAPTZsFFTP5yENlwOIjHJaJVcFeB2Jh6pdvT0ysRDKsYz41mX5Mc0FGmX9bfUA==","shasum":"970b0e9d7f40e1473250189d6836afc264a50509","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.0.tgz","fileCount":22,"unpackedSize":614353,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfmGsfCRA9TVsSAnZWagAAln8P/jPXBBE2Q9nbXuVlgKYK\neB1duTV83m1/r63FIGNZ448Kf8F3jHUVGgdf6t7pOklWvrwuhNpiWjYl0a8g\n+BvCHo787/7tw9uGuzhgWedXy4sB5k4C5gVKOnOv/pJK+ireU+G3ZuVf+KS/\n/ba4tC0qKrqqkb0vME3ne4IvflijdDaKzPWLsKp6UpN4om8znaWHyqKOHBN6\ntnA8g6Q6FYwB/x+mXd7utAIUp+iPNJIBnVCiR9VfTsuWA7JMofWyCjnS8XSd\nZ+1C26Kk1US25TCEpWlEJneoGjXrVYT3y03/xf63/DkphSVDyPiaAatA3ZId\n14VpYfg8+b6VNgDDjmQxE+7QXTRV1+zEh2dUjlot8vIdG0N+6lXhMt9aO1IS\nhDBIvhGiNA4fxmk1TEufEDku1uUKOuFp5/dc4HURH4iRjLa5Z8qiHKCJZA5r\na/rFy5eTXRzUX3TlmhDj0jc7asjjCcaRe6papVMEt/Bmmxm4L1yO6AGmmdwO\nF9NzWIeVi8KuY0JjGVGfvc7qmlW/dIOu4I31rzFxDzwTEU+rv6mwDTi6y9KU\nqUnfrm35piOv8GJELC1FQDWGtKIJ4nMZHSpDGY15uXThcLIG/8BlraL0TemT\ng6pkyRvzqNnqZ3d/PKMgJUPKHzEALdafMVFXyXw+VyvtFLn2Vb+Pmv2yei9C\nwQeq\r\n=GZDH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCp+aV0GI7d/l/84bQKdy7jT+Q0/bv/JpY7X/W9xNuVbAIgSV7IbsHNelhZi68P9zVqCzIXALP9O9VXzF8vuKTORVk="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.0_1603824415129_0.6252290835193126"},"_hasShrinkwrap":false},"3.0.0-next.1":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.1","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.18.0","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"resolutions":{"@types/react":"16.9.17","@types/react-dom":"16.9.4"},"devDependencies":{"@testing-library/react":"^11.0.4","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.17","@types/react-dom":"^16.9.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^16.12.0","react-dom":"^16.12.0","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/102860784329052160.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.1","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-Fy/zw3wNbrOvf/RItz9XGG+T2W4KGkBLdGAHUNPGvzK8N474GZ1rNo6t8+t4zhhOZgTthjJXhx7Adeg5iakzHA==","shasum":"79c534edf6dd5ce216d19401e0e8627fb929025c","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.1.tgz","fileCount":22,"unpackedSize":615865,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfmH46CRA9TVsSAnZWagAABZwP/Rgz1lA66veZ9ED+yfFE\nCWKsuAZLKM9ro5AbVcSfUnF+EmBLq1Aq20THJxAo0Iuq6Bh3CAXjEdCmy3op\nPU//t6w750twS8Ay657pFRgckHpk94ywS96uX77K6DePtY20fNL9nPYU6hVi\n2XNvfW1PlxvhnXCiV3rFr1JixlZ0eXcee4JDictGfFRj/unucsSz4Vibutr1\n3uXgQ5cHu5aL19EqccNYknGt0Sn/FpyYLm00rNGOZ1aCwOy5dP6Ac1SXAi64\nFIiiViO4eNfHKVYSy4XRutOS9CsxGuxd8tF2yqjY0yhR/lqYQteL5ruCx2D5\nEVUPe+VtU6nedyRczVpsoyH0qBerq2xsdUGOlTHuVra1wArEOhewCNxwyNxS\nptho7Z0Gp4ApnzYqKYoIKyTqp/oWuLi9wdTb3V69kBeXVSU+tjjypAbygsez\nuVFU7WNkixQ2vec75z7QY2iQlBkELWoYoJp3F5PbIc781HpKpmrHkfrQ4izC\na0Q/sbo/MUE0kExyE0wacmPVqWMhx47LF5m86lKd3huXn8GX50s2vOendGN6\nQe5dpi7v2aUomM/nOQNsmi8OdnUbY3D3hAUCRShRzCQuOJky1Me3HKHvKC1s\nwAYkyfj9NZ3V285qaR9zJCeKAGoAkw9GCG/Qzusb1p9fiS0A7wo/i3D8aZdi\nX363\r\n=jm3/\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIBSpVUb4uplGBGSkyEHRx4VlZr11+coc922UGrbK4QfcAiA7lWY5Rv7Biy1UkQNutdJH050zaerUZqIoaG/JI4mSeA=="}]},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.1_1603829305753_0.7134191323461894"},"_hasShrinkwrap":false},"2.2.2":{"name":"formik","description":"Forms in React, without tears","version":"2.2.2","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@2.2.2","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-zAanhv7phAq1zcLw17j4u9BL2C1T/3LP/zZKE9vS9AmxzvpRpDBF9PrNgobAqoEipj+4M3QBT/j/iIyDIDnBvg==","shasum":"0b9ed3e5232e6e65f2a7b19b84c64787ce6a9a42","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.2.tgz","fileCount":22,"unpackedSize":594275,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfpC0QCRA9TVsSAnZWagAAV0AP/A1ZdB3HgMKPXmCIDp7g\nyzp/9dQdA0bAHNhEDGUPbMpdquInO6IW0qiIsB3+duVTUV/M0c8QvREqiLZq\nCNYtX0E2rVimrNHbpIjCfhZwpLOMTrKr3cYGPFw4ESywOwZCwF4QC3u0ZXgS\np5tgxz2XtyPLiJAXUTCtzba0Kn8krHZYUZwmpTeNGPdcZoqC3+7hxdWerK9J\nXafHmXtnXetosnNh+QOWI/ywazP3JSuhEwq8F6NxE6Cwr9KsttGvxQl2WLxS\nhnTabBrkOnu4/In0Kv9MT/yJrthC40yA0FwrrxckZWaZtJWjxefZn3WXx4P1\n27FY4akmEHvADNe3nXb7m+awJsXwLdo7z14FAKaEnPydU0BbLGOSoSr2XchE\nz+SzMlsjLUaT+NwpJXwPAdwlD/0hQTXUM1AntT45BQdrdP0rllN/1hONFz6R\n7QpdBlkiAanOYELUMRehrYYaCZv9gjuE+MajWHJiILZdIN6xtcP1guhl8qyR\nPZAuZFWCCdObsBwnAVtD9d3udq3l83iZN+I+9Twi+QKciVe/pCG+RWFDLuxX\nGJKPhB5nhxIy2mdQ6SvNNK3cI9xKEgUKpliHHFDGCU2hOS1lhH5/GDn37zP1\nBJu6a/chrhhqRcz0xb8eyVKz6m9iHNQ/rYxQy7OiJlkOAPkwo967JWeLNXT7\nOidM\r\n=m46X\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQCpRC+wzIHEgaz07bX2EVk/qXC73P7wcKApelyCtipaWwIgKxF6omOXTC7JkkIKbtmU0dVkXW2iyUC4nXYmSNnSeWU="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.2_1604594959636_0.4428882997506063"},"_hasShrinkwrap":false},"2.2.3":{"name":"formik","description":"Forms in React, without tears","version":"2.2.3","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@2.2.3","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-5zHCvxMvC/9AmzQgMi5kVmdOLCXz+PRWmzf82sqcA+dXI460G5QoykXuDdM84XfdHxmRQZ554VG2MOzEyoSo7g==","shasum":"63e5086c159b4a5c8b67f049a6b5a0e8a56f8413","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.3.tgz","fileCount":22,"unpackedSize":593201,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfpxZaCRA9TVsSAnZWagAAhkQQAIAFyAf684XJ09/tgYQN\n9uL5qzqSmmM8eqLP0ZtlOW/eCiueVH6QKMABb1ZPzZ+uuklkgEmOPlDjuG5u\nXlSDJAfqUXvo8+ihS5aazyFSH+PEI7hFCa3qeuSGrB6n/aZeQfFt7JXd4FpZ\nWdump6Lg7xZVv2wbagM7n2E9L3hivSAjpjEC/O2b57T0B/XcxpdAi7o7AOgR\npllqqBoSmJztA2P4rF/8Ot/Z40emhq4URiMR6KUGVEEJ869s3w7VceXkjO9N\nLSfWZ5L6yCNunhc1q9SfLGetuZ7KX2KKVNN3H8/aqF+Ve+Mo+5WHjY2yIQeZ\n5xdplqPp0lgjBsbLzjuGu3isICb3MAlQzup7z1wgGPDdLNcpQo9gO2Q7AZy6\n2zXycuK9sqo86g3CivcJLFrJKQ6bwqjYyhcqtWlehuIlMZOpO390mX0Cnc/a\noQ2bronBG3DVMsikE6dwahBZ89lU/qkExMdb5jac7iHPJW7k9lvKwGTk1lo4\nBgv6dpGZe0Tkoc29/c4UvqyhNWQF+y0q4W8l1yel/XxgDaLQXK5xeAUvK7jk\nHsF9w9dniDZteQGgh0UsMfkkgBs67WRbVlUAI8R2pVVZKznA4CD8DCp5EnRN\nV+xRnpD4rMwB6b1YYSbMeS0JiPwp/tWcbA/nGmA1feV3RQcd1P+koE1qMX7W\nmUGt\r\n=gwoH\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFwqOf59coFx2vxnCY2fb278VCrjyfx57U+Yu5SsMJ7VAiBJWzo8AQk5VrfcrdQ3lta6KcfWaqHTmtrOjX+MZ2Takg=="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.3_1604785753561_0.08206264846347278"},"_hasShrinkwrap":false},"3.0.0-next.2":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.2","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.2","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-EY3wqETAX4+NM6+9vQcBafqazEs9oWkZwfVNak91lwBE3c2n2UIWiVmAB3LW19EKXWUu88zwM0ikEFAUS7NnRA==","shasum":"956c2cc69a5c0f9a79cb54a3e547d5cf07204dee","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.2.tgz","fileCount":22,"unpackedSize":620129,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfpxZ3CRA9TVsSAnZWagAA/NMP+wbibDhlpM3V3eVnTstA\nBUC3vPfhb/WKzYT0IN8NBeRE3PpYUvffsldLxWf2VmXQgUY/LCHFcvTWD+nH\nbkkLHhdAqG7yBMSZ2TAXtoTfqBHXJ9vYiq1O+X8Ap1JhWWGdQzbqwo8Im+8q\nVQ5VRpwGp2JF4TUidhvffTNGQncVBD2tEsCjDSu0FDeohifhKn/u57z/EfZR\nVCpxlJB6eoo/TT1ooSNn1N8vdYW7oCavZclgx8NvrZAGSHyYxJ0INfljAM7A\nywzJ6r/eHMyqdPPE2owm+kluYJwZSDF4MY/7GHc+ZCrVxDOBO611WGNZFsAO\nqtTiYBnIOkZIPxS5eGy03BWVQNB8uYj+czFvMZvC0Gr4F/M25CryUOzrQRt7\nYxYjWlHaCja1iKFOSb+VkBb3emlmlAHO8bAcng8oyqpuDWYa3MeeKNXFCaOE\nggMwrDU/DrhHhYseBMQZUnWCcjlg/W0vJngyX7Ix1JjYQyySGbANzXslF0ry\nPZym50akbUIyAg3erPVlDk5/H9RE48lnAAVgjbpbUArOt74dRdZvtqWb3ufv\n+uTe3yO4+okfAWIkKLPmhD/YKEd9pH2x9oaMXf12OaU4bVAzgkDFoxTit8+P\nsjDFKDL72pQ+9KxlRULzVES7+JEIvvoK9Gh8Y2h6KmQlFahm4pTg9EBE8jS9\nuaMS\r\n=9815\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCkJTmH5+EqomcnXvwd1TclNBquuoJSFji6evKnLuSbRwIhAOJ9IARElo7jHne2OkLv49AuVY+oAE3vSHgJTi6km9vm"}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.2_1604785782811_0.12093762963168597"},"_hasShrinkwrap":false},"2.2.4":{"name":"formik","description":"Forms in React, without tears","version":"2.2.4","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@2.2.4","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-S1V3CeDI+qyBly6GJLLVZpBSwTA7Q2TtMqRXbCNnsN4eoiDycQQh3iequ+qJ3/sdkPHhXVQvAk7KOPQGdbjaXA==","shasum":"d73c525aa70a7d278e619feb9c726c9d6968a2db","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.4.tgz","fileCount":22,"unpackedSize":593688,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfqvDsCRA9TVsSAnZWagAA/eEQAJkfzKsWfYvK+aWlL0ww\n/hh57DNGtSKw14TIyeqkw/Mfa8PqmvJ6MC/VMIx7VWZJ65sVzxoUG6/664Tp\ngp/4sMmTtCY+coeIlPjGX1AZjNSSfwIA1sDbDS1uROuLjm926xnlsUZ0wCLk\nIkNLVxIlow8xU0QxAuT7gkiQwxZbmF3KI+Ejxk3xu+8+6MrVsoua4tYpWTLW\nLoF21WeXOcd4RcYgOnDNtVNa9S4rJUl2HK/W+HwZCa2Y6FJXrYkdAxQknWm1\nVtRSIi8G6jCeMgSde3lyWU8PEjLXGVZ04lErBdjV6VErtiDH8Hb5CORWZxsq\nd19FzFA2lgunmkpxbIDsattfRm3lAT5FQwZQfp5Gyse6Oo5PMWMfsN17NDim\ndqPmynvV/oXYSkYrxuuQv5/oqVWyIk1WZSU/BH9o7J6OCkGdQlj/E5b3myRC\noJNVX6Ro1ORTbcEsPjvDEpmKRI38vB+3QcBE4RbZPCExZV9sYHDo47pLHhLW\n9w6cFLrgL2/7GgbAgV0c7QXIrei85e7+5+VEJjPxiUI5vaJ/SRyVASa+FOQi\n/dgsKBLCHEnywt7Cn3j4v3ySdmVCE6zkPU8hs6xZIRpk0wW80WhovPqhuuvz\n/P2Swb5sY7bLmmXcu07CuEH5UhN7NcYCXKRTZ+DSlcs1Bi1YJ0rsdWiyjmGl\nYeGY\r\n=8sxQ\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQD2TlawS5OLR6wG4rrw7GBOo5HsNHkO4cOPCS8C5KcY6gIgZccNEQ8K8q2jnrBajuRs2RqqIM9Zin4eTVA86bdIUXc="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.4_1605038315795_0.8758553968846237"},"_hasShrinkwrap":false},"2.2.5":{"name":"formik","description":"Forms in React, without tears","version":"2.2.5","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@2.2.5","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-KkOsyYmh5xsow+wlbdL9QSkqvbiHSb1RIToBKiooCFW4lyypn+ZlHGjTuuOqUWBqZaI5nCEupeI275Mo6tFBzg==","shasum":"addf4ed7a15ebddf22c883a3d358cd27c8a91a55","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.5.tgz","fileCount":22,"unpackedSize":578334,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrGksCRA9TVsSAnZWagAAUwoP/1eKTZy3sxUe2aQB/3K5\nEmsKhaPflEHCwYkaVTHkrv05bE5cel4/7i7X+2ssQWAtGLpStergCpuyJ0iU\nsR7/EDD8pABjjwMZZ3cHXVKwXxOnN12P9fql2lAhMEpeGq1H57sasrk+9j1F\nFKpAw+Ziy/QEPkdyzuujQFSyAOXmzCZV4DGEbx1+K/wrS5jZQN7JzX6OfKfN\nuAOwCYA6v2AlWr6nFi3xAQzyFdUzg8jQDfdOszQbLfdaVTM93vJmwg3orf55\nF1wgO6K9Fk1nzbDHawBmukAZCLhnPMgaBFS5tadmDkl/7SIxeS10zcRFGu52\noX8NlgP1kCMO5U9LxAgAarS3sxxKHPbt6siVdFnWhEsAlFWGW88UTUIFDXYK\nn8POi3+qoeBn2M0yceCTdi5evH+gI1K/1WCuRVXGNSlD1OwG1qpxAa0DQAof\nZQBQWludA91Dq+4XtTlpsVPUChFkMDz73JnGlUY52qbic/3GCg3mxGT8L7BL\ntmtBxkRPBtk3wNGDbdKWiSkiyF2omNGtLfaIUU1oEoAUziqDBY/AVY03/N8n\nk0zHjUo89CvsAFTFpBfkYi6j320b5GHqmCjLxgrq7bpVddua48hUnT+wX6TL\n+LNc4IJlq7YhKuMdNzHtSeYTr0K3ZIwh523zd6IAX9nyO/UCg+CIW1KbIig8\n6lO7\r\n=wvYl\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDGuSKZ5QFObqHQe8YwCNXTYp/BW5gc15fsHYVpfA7BAAiEAmQhdBcWJEB3jsLNl4l57bvp28P8Sl4nZ5z8aui7r2sI="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.5_1605134635392_0.9364679847383108"},"_hasShrinkwrap":false},"3.0.0-next.3":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.3","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0","use-context-selector":"^1.2.10"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.3","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-ikhhETVjxxYKMf/e1vhjpMbuHuTqhKhcG3MR5uatNnKrbx2QfJ38wE+qjA0Vbsrp2MqJhtLjO9la7mKyoPxamQ==","shasum":"6d9c1b54f57f826f4bb1cb7f249bbcdc2f3c9c3a","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.3.tgz","fileCount":23,"unpackedSize":690744,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfrHIVCRA9TVsSAnZWagAAJqQP/18WuJRbyxp4PkpPl/1H\n1o9DQbS53k7BXoeWRn+N5CJ/owpIiFOzqf/aOLec3MK8Q/kkLBWLZwuWUaEp\nUObF+2oYfml0pf2X6onRCcQefg9pukccARX9KTBv8T4lZ81XSaj3spgwXzrT\no3b8AeAy0coo29LmSW1Ryzhkl0tMTjc43a+L26iqMqNvwWtcMDY8lY8YuoPu\nVc5I48kC4tKycnvxbr47nHCMGzmZmH6wMb8RXHpFi+Lo+vH99fMvEiLEALum\n9znk4yuVweysx7yGwKVUDY+C2IUViTYsYAFjYfNeNOfLooptH5Ip9FRBPh80\n8F3HNXJJ/GF8bTVHSTavtO7Z64GAtvo/nzsansVV+Shcp7DagibHe65aL7FO\n40SGeL0lbrfxGmtjyon210NLsToof2jZ9S5ODLU9xaDA0Z5Wje+odC73/va8\nhaj4i7Q5jtpB5ylieKl2kZ5CGauznr2TnD/IFyqnSdJWcObbnZguPyCayO6w\nuqtlZSfqEJXfBrGQ4iDU3zZBNCCJAb8skPS9IsWCAe3S9Zei6JvsZrYH4UaL\nxR30pUwCtqcNwr+xgIDNlWdlir2cBdTragXtxtvsJ3FtIJhTZCrVzi2BdxN9\nY5s0VSyH7Ugd6QnZHDKd7dcMW6ME4FoND6eX2AMewfxMvaItFl9Pt3dljplq\nNJ+u\r\n=ZzO1\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIDjPR2dJg64WT13420r2LS9nUkap78r7JBN2FGaWUYL9AiEAvnvs6L1mqnOfIyTwJsTJWvSo6gLVwI5Tlknnx/MHVf8="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.3_1605136916523_0.9763217355240239"},"_hasShrinkwrap":false},"3.0.0-next.4":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.4","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0","use-context-selector":"^1.2.10"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.4","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-EJves6gGnCzvLL1HB9vXLdEYSZ+zr5XTIKDvfBrx+tfvvE53OxittF/wL9+32L191Z81WPkpk2TFj+B1WO8RkQ==","shasum":"c7fecc04c693532bcb82d11f5f826d7ef99dc89d","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.4.tgz","fileCount":23,"unpackedSize":659337,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfsDP7CRA9TVsSAnZWagAA6pcP/0O5WGayjwXs/Aq7RDkp\nMyM4seqgxhLiwb6USf/fN+yeKZTBmg00MtsxM1Cd6LInu2oyWNeqw7fpMFpo\nBv//L4FW0RHklrNxj8+9RB2otn3Mc2xGIzYOEiyH5ricFILaGjZ976vVmX6o\n9sLxU4C3SaFSaM6s5Pw9OXstOR/fcZknYRgGTb4d+N7BnIvdt4rQBLV5GyuP\nnKUoFW5aQahTmF20YDT2wf8I/mzugYdtSVApy4tQLGyD9gub9h1RPEbFoY/X\ndEayJiMyUzDu3gM0F9HnaWmgSvca0AKvNpROon4nrsC66Mo8sdwSVyEYZoqX\nB2AInM21yzscKveOm3nl9wMx8tFrUDBPzW7UKcdxrqIj9/bVBbXBVleQ3Cf9\nDrIKvgZ9IS40IqUR3wEh7jzPLuxI8ZeNIdHSelx6Y+v/vzdYjN3wmm8bagU7\nMrfigV7YbknoxS9pO8Um3yYcA5hJ74Q4wBacdGD9tcgM8+JOCV2K68TYpm0z\n+LbcilgpnItCA+qXphDJsa9E/OZzgNzXv9TV2eH8d2O+RROlLolfW0ghr/S3\nCD+jQzOmpqf0Q1IK/+YBBAJfWJb1Pb67d1mZStpleEUv2R4SEnd60bv6JlRV\n3H3pEp+OU7W1eVL2UyTXM8uGqcTznjIiuNTdTZv2IQjOMHbqq+5ZIbNuADR7\nh2Sp\r\n=7BYR\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFr3ajQSKEaYeqB/i4QwJjfSnGVTI920MGqgNqY4XYsdAiEAk0iPcEkCzQx7jd1+Q4uM2/cfZXfJ1C2a10Q/IS9AmyY="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.4_1605383163070_0.4434810240049003"},"_hasShrinkwrap":false},"3.0.0-next.5":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.5","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0","use-context-selector":"^1.2.10"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.5","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-cxZQWT09sIDwoCK4ROYRsLMTlkyyBVLA+IzozAE4eYggbu917lSzYBGNZUUWJvCYAXHmTa3fBaJlPalco1yJzQ==","shasum":"0440f33b545b3ed2d66f727c5c7e620ca8d305f9","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.5.tgz","fileCount":23,"unpackedSize":660127,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfspTkCRA9TVsSAnZWagAAw0AP/2WfBL6ZVccyA1sbvNRZ\n4MmX70tpXRvK8cw0yTlF01Pht1wefWOk8Xki/ykZSEC3Rx3eNLyklY9rrFBk\nOxAikm0IipYuLLqutdtSoE0QiwATDa5x1Zj0psx2JokbhH+08QDvfkBtlzcX\nnLBwJXfwwVKe+SZkC/aqMcJhnqEZkYPU3YmSXpVcM1BHEty/U2gFFy5gV0as\nsqRmZu2FJTHS6kzwvejn/zPLmbf2b2Rypzfb0zkBer8HPbKPDwqM5dfoTnHY\nuhOhSe8o1+w5MvYYAiJOXONL/AwUXZ3u8pwlnbNCAbdeOiqlbeL5txC1+hF+\nFzM19I5k2BEco9hw59Bnn7qLqjVs9ObL8VneHe+zVqDNXUMVKFHPXMEjwgxN\nExHhQU5wnjldrWVr/5sg5MVlhqqbXS9o6dVrK9t7et98Nrz8PZi7qsA2vbMP\nKGCGNbpi6imjXKYxdtOcZ3nI6PJKCWKtgyD3ZbZrjJHPs+rNaCn8fHbyo71I\nai/ckNvGq2hEtMzqPle74Bx8n+KdKxivacUkYYhPNdnGgfktb+q7XhmHJRug\nL5CCsGOmlhWjJsZmaotLPOyaQn3Knd9oYCKS6xIpW+swhS0CGLMjc/IiOLkt\n9s5bgWZlYpUjB+pgqmJ/JcfwmlU1pM/btSPO8TGxYNB4f0VW0NP5gs3pNk19\nnniq\r\n=TS8E\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIHDnscKagCv3sCx6cOv1gVpyGm0oBQsHVqE4Vb2efVQBAiEAzFXX+/EqWJvqSYhkRtWYlgstxW8AMxdLzLNAfTcjdB8="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.5_1605539043780_0.37227701491434373"},"_hasShrinkwrap":false},"3.0.0-next.6":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.6","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","scheduler":"^0.20.1","tiny-warning":"^1.0.2","tslib":"^1.10.0","use-context-selector":"^1.2.10"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.6","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-vWMZMJVdA/LuTnuLXXt8kk83DFx8Cdy5Ff6sD+Ml7l8Pigdwc8UoZIb+a08TJtJUEqFEmf/P3tJNKX5Y+M9SGw==","shasum":"6c7072ab837b5ad0996e92dcdea53f42c524121f","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.6.tgz","fileCount":23,"unpackedSize":660406,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfsp/4CRA9TVsSAnZWagAAGEgP/j+/Rs9rT0rHWs5pUWRE\ntCx0lg+8/M/It2lzXe+VRHQExzByDasnqkwDS5Mt5s5+GuczkdRyCS1adiUK\nqArPskffJygBl4l+4Gg5+IjD9mBt0AViOn3zsoqDp1uJMX6OeAyNdS4mg76x\n0T8exQz+yfsc9hmHfaqwkV2cRNP3beENfUJpQ2Tc62x5AMFe+8G9q+5U41RT\no6oKBubabcmqwghJipQkSuFOYcho4SjyR/L9Vdw6Qq+QNAh6VNWrvIBTOWJ+\nPjlV9KBldnduZCPWucbS6Z0P8rYzcT2+wnOqUc9Yw61e7TST5WOQi0DIUaiJ\ncUeQ8cRTgo4abtrjbRaB1la3FBTMvmc1O6FHi8oXAHvdOc/P/39CxSsVdLas\netPYcDK8pv3c8RjzMExTjfzNCyCzIjUfVcY8aAKgoeHukVLLLlPYpjpJ8YRl\na1Rlf/B+7BLoDTc6IMn/FBP0C3yiLX+zC4hiDEdgGAx39dPIDUX/DD7luef4\n8uDuqxkDG1P/61mDyHhg95oqZF0q/893yfc3oVO3UNm/YuUyDiYCirpIR+j1\n4JIWFMU8gqEufREqwz1iMAPkS+rfjRf8GW64kw9sJBBAY1Qcgl8tvJmTSSs3\nYjTkHIQCvDJZchSbjLd9AqfyBjTyUAxaXr5eSuanjfZEdHl7/KtJYrQ0NiXY\n9rDA\r\n=Zq9K\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDF/EIP1lCb/TAQRTn5+ghMY0AfSt9CzQuLzyzBwPCq1gIgLAuC5Ucld1TGJeTKu6pfglnQ1aNz6I3KaNTjGSVC764="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.6_1605541880556_0.9132870904788428"},"_hasShrinkwrap":false},"3.0.0-next.7":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.7","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0","use-context-selector":"^1.2.10"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.7","_nodeVersion":"12.19.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-KDaxVMvYWG66E3t46QZq624oFrXRtIQ/Z3b0DeFtExygRY4CZQZaZsH25JB/zpFJEDCeSpeYpdh7pGwLg0KKMA==","shasum":"df208debeae5b887fcc9baf39c86b31b7468818f","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.7.tgz","fileCount":23,"unpackedSize":666100,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJftqBgCRA9TVsSAnZWagAAuJ0QAJ2tWg66S+18dqYa4OcK\n6cUkZ1ApgvDLZ1keMlYQEwGaa5WFt3gdf5TQzkp8c+p/0yLobdtOlDRWCM/I\nDuzQO85iy1Rvs4j+DYuoc/kSlVw8VZN3h2wSSZNDzoHdmT6Xemfg23KCsQZ+\nsnMSrITpjL4d6PU1HP1FPfrsn2rqmIx+2Yx0EmAYQ5b1Bh7f6fkNa6s1OVOh\n/p5sX/Bi1Qe9fCG92ur0xEnV9WcIpNV64EMiZ/Mm0ducj8Eq/bfKw2F5kFmM\nCnhz7DBak7Kiub7TwFJyrneXLOXPE9oNAiLOKebs+KpGm3jCHb64nJ7cnFBD\nNi4hrP/likgnK7+r+YpxOYRaCSJm5CGiOEHiUKLjiFHtnH975GzzblP9DNEv\nZN4xpVoAUFfKe59E4RSiy8qwa1TsoP/JMmkkTkNbW1SMbqIOcOyO1MEUaOIt\nEQ+EnpX3mwBtDTwlMP72uKkmtGx60sVDdmS+yBz+62UKOh59uEstHIMnzZPm\nswmdnyiGFpqwvbNzk7aV4enqhgZ8LP7EX7LT6K7pf+7/YzQbEn0T2Vaat6KQ\nQXlLxyy9CNaNNVno5SgxBzQch9CQ20MO8L+3yLauZG80rbfJWqHA61GLPzvt\nNYTueVIjf6cXhyCRzm09L1NF+m2o5METUEeybJf13cRvCTu7NhfrnO4UWrth\nK/RH\r\n=zzVI\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCICjxihndRWpyO/r7y+Ym4l3WWdq9kMU0uIrVeUpLdhWZAiEAk/9U7ErPSQD+BvHhj5JYBKUoiT9FNOfQQUtGdRxJkg4="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.7_1605804127804_0.4223705496163588"},"_hasShrinkwrap":false},"3.0.0-next.8":{"name":"formik","description":"Forms in React, without tears","version":"3.0.0-next.8","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"keywords":["formik","react","react-dom","form","hooks","validation","forms","higher order component","hoc"],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0","use-context-selector":"^1.2.10"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.umd.production.min.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.umd.production.min.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/formium/formik/issues"},"homepage":"https://github.com/formium/formik#readme","_id":"formik@3.0.0-next.8","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-WzurHnoiLnk50TmtlsAOvSastQeYvgTEKeRQBUFAKXrS78msy1lqpxkUNNKiQ3jE+9WuuZ+KDpXIqz5w2hD9Og==","shasum":"9109b05ff90501cd66bed618078d08ad12027c23","tarball":"https://registry.npmjs.org/formik/-/formik-3.0.0-next.8.tgz","fileCount":23,"unpackedSize":668418,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJfx+zPCRA9TVsSAnZWagAAqY8QAJczD0bJnwEYPFs7A226\nyVmBky4VkHNsqYibK0xoONWyKr3f9TmtqPUO1CByYRbgruDUB2cCJbYmYXbh\nu0zD9wpHNhB2LuKK/+qxY/deYm5pq5cIgfdBHEidKp3TIlq7IT6c4QkIpX0M\nttR0MaqpoXfIAyGTB1v8AH+GjooIMT5gXMIyunxh3TPhK8fnqqk0GCT7XvlD\no+pLWrBAmQVqAEyK2FPAsEeieNof1S43oTrYayKh3CUN+cC2MJDiAW6kMPP7\ncEzqN8/PwnLKbexnpA5P6pq7mNp8bs0K1pVdtM1DCCIuMhR0OLoyovg1cXYj\nYvQOjh+Y+Dz6Kz5m7yPH4c9gUGkRL9tIGT/3ov40egCOZcvFRiyOOmTOgaq6\n5XXL9Ck2+UH6iIlU1zrcJu/ePJa0dcLMOSf65cOX1wtCaCkmyIZztlpoD0Ct\nI2o9TuXRorRoJhJPZD0eEpdLMkES7A1xPC6V1nRS7NvMBtrbs6xnPbEW9x2P\noUEJq33QVOHusdCcGfzEwo3Vb0+iiECqw3KKWIU2Ab/iipCjKN+WyevrKrhx\nvBffZ2YXy6/ZtQIbDhefGKczD3G0EsgJG5m/fNUQAk8upkjS6lVgGo8xGpHG\nVDZiaf3EakON1uZIRhiCBAF4X7Z/oKLmbS5Wsq8l1yoei5qT0OLD+ZTHWyOy\n6s6P\r\n=Pw19\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIAyul3NModyXb2kSa+Zwf7D0rzL3+OJdctcg28R8plu6AiAE4X1qUzhin+YDYgim6bJCU8XPCvP/zd+rxArDQVqYiw=="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_3.0.0-next.8_1606937806651_0.45483729125719674"},"_hasShrinkwrap":false},"2.2.6":{"name":"formik","description":"Build forms in React, without the tears","version":"2.2.6","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.2.6","_nodeVersion":"12.20.0","_npmVersion":"6.14.8","dist":{"integrity":"sha512-Kxk2zQRafy56zhLmrzcbryUpMBvT0tal5IvcifK5+4YNGelKsnrODFJ0sZQRMQboblWNym4lAW3bt+tf2vApSA==","shasum":"378a4bafe4b95caf6acf6db01f81f3fe5147559d","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.6.tgz","fileCount":22,"unpackedSize":578843,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJf0jNmCRA9TVsSAnZWagAAMtYP/1gSeT5JZYhsWhtkgglX\nyZnF50XwLk0ZWa293xgxuJmj7Y5sSw/nP0RJoLL1/EjL8xfaRKcKBnI/mghj\n3BQRUFsBAzQ3ba70GN7fQSNcCVSQRE2/aemM7/kVcb0gnykihnvi4BZ6amht\nLeO+gThgy+KpWy4aSDXexlOtJ+V6X1f8lZyQqH9g03EVdJw0jNVaH0i6ODze\ntanbzJPBYNcnYUrMausQ5tUtVVQSdrCkI0rj5E/qESe6+Q6DjNjG2eB0rNGy\nITe8OOM5p4lY9v09oK89swGSy31Ig4cQMjMn2SFhiVjs7NkdMGVUrPpSAPTd\nGvjF0JJbyzATZ+oKUWoGjJ8NCJ8/blNWqJH8IfdNogOtlQpSRDcSjQbILcuh\nI/ocAIB9A7OM61sLruz777zd5ywp15Zvv/hXEOe5q4duoyvgWehHCD+tTcWq\nZxIi8yKpMJ6/G9wAaZgkD/A6gVQkpJHUppAMbksFTlU1CUxWiVpU8v/SyV+P\nYdF9umIfZ6fSV4cTiT3iPzghmbVzo0FbaUwbyiqNOWwl/CzBtTwKhuC9zTUI\ngEdDPH2JUKcU4m4e6II4ZM1wnvpBrcnN+FxgDUNxqHEVYR/fOtwWPDdmbJJR\nO02vJBSmTB/bnhsgV3Tk8Xi6zrOMHJGck0zuw9dWdEkxJ91T5PO8PFaBv0dS\nnpS4\r\n=IZUg\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCk0pJstChcogA/7eRq6eATjSpQnhNaGG6EgcGyVqLkAwIhAPTFsY776xL5ZPkf76sLlynDk8O91KTOINa4bh1OVxjF"}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.6_1607611237728_0.467580881519585"},"_hasShrinkwrap":false},"2.2.7":{"name":"formik","description":"Build forms in React, without the tears","version":"2.2.7","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.2.7","_nodeVersion":"12.22.1","_npmVersion":"6.14.12","dist":{"integrity":"sha512-j4cso6QL90T8hJWgU29GYsBQuj1vynBfrcURyK91KshArvS5CLoxUkP52hKc3wVpGFACd0uWEJo7y30ZOTzc5g==","shasum":"aad2a4c2b77310f247210433099e86eb0e173cf9","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.7.tgz","fileCount":22,"unpackedSize":579832,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgpTCnCRA9TVsSAnZWagAABQ8P/3T8xbQGOjbTac45pPHd\ngHALYN5twmC9N+ikyqiO3yVW9FyM5UHxEocsr7/Is2ZWc7XJiS7jIrfUQByY\nu7hNeP/RwStOliMuN0Y/HboJHTpFExD7RY7rgtvkFhTkxJFShyCOdp4rPfKz\nuUYyCII6RJBPBoPOzM4PjnJDoJZyC9+wJV7/EHcuvRzmGvPxyVVILRYsP7ab\nS0l9vv0gIAVAZloY3+MyJm7NDIIDP47bx5tqLoGkV2GWW0NRCBWmBqobrqeS\n7OibDLC0tAalxPBu0v8J6stw1NTZDwpAWAjk1rEAQUbIA0h46PVGL9EpXRSt\nweaM7TJE4Zk6LF3kr/gEp8Ilz2MZtSrDq6WUbDWNOVa4kpJKo3TwjJpeqFZW\nGTvadkDeTzcUDuZFfTaRNXzWxa/ywqDw8DK5X3uM242nGrTBLG8YKoS3x61f\nQxMuNcKrAysemCTLkg2ZYmhnWPX3Kmf/g+IfgRIo871JIYy6HPoay33+4Ivp\n+rD0Q8o97zdKDDflXL8ws8uPmalYQoK+WyeNA36NXQE80Yx5wtsve5n40gPo\nVg0w9JBD+5Iz2QVYUoy39E8UA3tHjg7L9ElR/poGA53FqTgNrSg+jqSKuIC+\nbicMAfyzljFfBMMGeW5m6yo0xumWq7OAQISWoNhu8+6beikXnKpQPHvgbNPo\nMmo1\r\n=LwEv\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIEjVEDXqnEQ5IwFiE1Ntl2WdlBeO4zEJYlwn4KzVmr9gAiEA1PaIDsALvfUmTVrUBmHAp3qUEcBojXC24P1ehRwCrNg="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.7_1621438631131_0.9507326311101041"},"_hasShrinkwrap":false},"2.2.8":{"name":"formik","description":"Build forms in React, without the tears","version":"2.2.8","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.14","lodash-es":"^4.17.14","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.2.8","_nodeVersion":"12.22.1","_npmVersion":"6.14.12","dist":{"integrity":"sha512-hDjQyTGO0ivptzCRHEyeTvfvgFVSzLeW2ptAgSk5U2jkf8pvSNtXe6oExo1RmrbKF1Bs7dmPv4P5g2JAgYnvlw==","shasum":"986c3cd73849dde7c5154e5f6093a5568e482854","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.8.tgz","fileCount":22,"unpackedSize":580138,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgqElXCRA9TVsSAnZWagAA4gkP/2TqSP66q5WVllIzmCca\n4h+nmrAk1WepatQhiIRSB1tsIJdTA/i4GJDtX3N+QuUX0akU6PaoqQy2MsBf\nAkDW8vptmo0J05RcC4tYNan5pv8mQx6u74FoE44TT+BVnOUVfmRqPUBILKdG\nWJPaWAjh7vDZMFpSDjObtdF1Xry1pbNzuM8Sa9OCn1T/6X+rKhWvncZbXICl\nqk4WMUBA7SI739rhc5wbzaF5aD3GH0Ppjhay4mePUj1eIxwfOw8TgeLCCMtI\nlMhfEMMwnxNjeMl/yAI3bShVmSNywD+6jMR0fW00LG6r+vzVJQTRArs9+bTD\nYFpq+irfDDpBYkCB877ZRPsb8sJDRG4HB97MzIn6hXcAoLQx1Zc/Gzw27zAR\nsw5hO9s8nzjnXQ1mALw6WqcheOpBE44BC32OZOQpkIblFGIV7+mqnBUZhPE6\nSMtvwwcmw7CaUs5esOnV5dxRTxOpRNqZ9kuhtKa5csWMQ9EzNa+jPNrc5CuM\nuMKDqbsefY/mMmgCSZyCk0UnUVddh51DV472FfwVVaXWyAgIbJj/QJ1WUgip\nzTKpC//F35Y+YCnpP/Q4KHS34pfqLUKaVUvhyUc96hOQ6gEyHPg4Ra5qe220\ni9qEFJeI3sCkl4NcpeelRzC9FRnSe6pTAbYJ7Acq7/VETNNiyPuUvg4TEqSk\nURY8\r\n=zrpy\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDi0kNpHDOGziYpeBDj8jdfY5MVXigRY42gg/m34a5jMgIhAKtqU/x6FmBmFqe8a8VUlA+EdKb8Jh/u5vTxxP3MMqsX"}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.8_1621641558807_0.7143605369774071"},"_hasShrinkwrap":false},"2.2.9":{"name":"formik","description":"Build forms in React, without the tears","version":"2.2.9","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.2.9","_nodeVersion":"12.22.1","_npmVersion":"6.14.12","dist":{"integrity":"sha512-LQLcISMmf1r5at4/gyJigGn0gOwFbeEAlji+N9InZF6LIMXnFNkO42sCI8Jt84YZggpD4cPWObAZaxpEFtSzNA==","shasum":"8594ba9c5e2e5cf1f42c5704128e119fc46232d0","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.9.tgz","fileCount":22,"unpackedSize":580413,"npm-signature":"-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.13\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJgt7oLCRA9TVsSAnZWagAA2h8QAJxejaUb9q0dEXAU+rIQ\ngT/8Ph406PNGoHf6FggT/U9jQU96wXyB4IwFliAYprp1tyQIb9vWxiPqlwSm\nPm/Gz+7eYkRloc8gZQQn3W6sY6WtNMy6eQJcbutx+Jno8Rk1axJeMfRi5PQa\nLasnJFsjStqqB7pGAr+D54r90kIHbFQoFlKS3R9a1nsQt1lu2ohe1BRy2mZP\nIpU8OPYuKYeqOXnuf5luOEeyPOUmyVCQWf739oAW7kgb9wakjgmAduRpKDj+\nBWG+1tVOSxFMaOvEd6JXDAiAjp282KRyCSLnnyQb5DBvTbJlFk3hoFrpPFBO\nNkdNRT3znVHwx/lnDjgq9b7xThlLgtPYQ/Fs6Mmc57qS5PWvn6goKtICFyR9\nCLfnFHQTIgwwB6kpA2VxlzSQJ4xLlk6JLAhwEQKid15xn9DOAesZhFQfAQbb\nNjVH3x23KLd3x77E2kO0joF4EQLOHPrCABb7Io9A0n7rs7ZrODGHEDFp36WK\nKQlHmYeiF7z9tJR5dPDmXq8Ipg7GQA0rstSAjRq5FcCov0K05iWDrJMpgatG\njau0gsR4MCuqGKOhmBRbpfMencqYjI6GgQ8QWT8EDlEtMhIh25yELoSmon/J\nVDNCQhBM7uFHKIlZo+snLoDSWaefIo0RQEJ9JolVk1ZuWDKqTI6UEDNlPDXO\nmDUd\r\n=+iZN\r\n-----END PGP SIGNATURE-----\r\n","signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIEQmnlBIwV/p5E+d6DZ+I3+VGX+aP8RKGWDhkXdfk7imAiBRqT86yLr89r4wV0UGbKreiRTcCunCyIxCeMxeL5PrEg=="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.9_1622653451587_0.30812309917389746"},"_hasShrinkwrap":false},"2.2.10":{"name":"formik","description":"Build forms in React, without the tears","version":"2.2.10","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"d3348d29921cd85a50de2e28f9dd0dd42e03f426","bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.2.10","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-0odPw9Y9DF+8ZA+kQheJym+w6M5dXQ58Ixs8eo2b8nunax0bUvNzY8yGP/OdDHDEy19XZl4vG7MbtOqCAa2Ieg==","shasum":"db8d4dec2e0ff83872f131c8865881281ee98969","tarball":"https://registry.npmjs.org/formik/-/formik-2.2.10.tgz","fileCount":21,"unpackedSize":588641,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIAjNe2OaXFAr2H5pJM+ZET5hmRPYj+jJYllv7ccjXVg7AiEA3nP+JwpQbkxMRVcQ/25e5nKjnukIlevbJG/6Cm4as5Q="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.2.10_1685129442871_0.7016165045380087"},"_hasShrinkwrap":false},"2.3.0":{"name":"formik","description":"Build forms in React, without the tears","version":"2.3.0","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"b12aad7147d205cb1a9c33d66622e5713de1b779","bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.3.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-Z6v+8QV2jphQY8DPax3mmuH5swBq5Mlog7FPdeW3DpkHINO8a51sY+Y/Xo6aenUMjN54vLukV5AOSgBvRdwkxA==","shasum":"abcb316480934da92f5df9da606f3cf6a653c762","tarball":"https://registry.npmjs.org/formik/-/formik-2.3.0.tgz","fileCount":21,"unpackedSize":588647,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIGnT2LgAC9II/pNuSqK0UZaXyS0QqLwxGWNO8F1vxZSOAiEAtMHXv6X/GiGCPut49y8KLzXftswUJv/SART2jIpBWfU="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.3.0_1685130447113_0.9830657724494549"},"_hasShrinkwrap":false},"2.3.2":{"name":"formik","description":"Build forms in React, without the tears","version":"2.3.2","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"9edb25f5f218932db4a360dcf4e1b19f1eff4db9","bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.3.2","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-pdPurzQ+JGGj9jDDPUz4O3nrNyduWu1P4m1w5kVLrUeyqktoDVHf9KId9eNeIjLnCUSGlkUnAnJ/F7e5Xg3XYg==","shasum":"9a911a05e9a6a6790d81fcd44f9e3df4d496956b","tarball":"https://registry.npmjs.org/formik/-/formik-2.3.2.tgz","fileCount":21,"unpackedSize":589376,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDWFQfz9W3pu2lAilQXx2wEtcS4tn6VnWTTMYZZ4iWaawIgfIhi8TK8V+0LEXQ4rt7ppzsVQ4W2+EOsfqlIhOMdCAA="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.3.2_1685133727615_0.05970160344250486"},"_hasShrinkwrap":false},"2.3.3":{"name":"formik","description":"Build forms in React, without the tears","version":"2.3.3","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"abbec18a817f614c727eaed1b58b2dfba27b6036","bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.3.3","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-rKfEMQ/pz6MwtVFKZOr2t+SLcRGKOc44e0KZRWujodTNDfoCllRrNreNyehJgxZv+sN3UZBWayqQsAUefSy9Bg==","shasum":"d59a6d05c9285f64c7fb600e72355f5711c39d5a","tarball":"https://registry.npmjs.org/formik/-/formik-2.3.3.tgz","fileCount":21,"unpackedSize":589864,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIFuwyFdL4ByStN+ue6FT+U3VtODqSu+16U65MKuuB86BAiA+pD/9wGChEugphAOZiDSYvck1t5jiYx9MqLGYeoCyoA=="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.3.3_1685193786468_0.22660808893235052"},"_hasShrinkwrap":false},"2.4.0":{"name":"formik","description":"Build forms in React, without the tears","version":"2.4.0","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint","prepublish":"npm run build"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"f4e93be36dfcd66b612fcfdaf31a8c15f715b0b8","bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.4.0","_nodeVersion":"16.20.0","_npmVersion":"8.19.4","dist":{"integrity":"sha512-QZiWztt9fD84EYcF7Bmr431ZhIm1xUVgBACbTuJ6azPrUpVp7o6q+t9HJaIQsFZrMfcBPNBotYtDgyDpzQ3z0Q==","shasum":"8243e42a89e1c9fbe9aefbd48bc8d1f10ae2950d","tarball":"https://registry.npmjs.org/formik/-/formik-2.4.0.tgz","fileCount":21,"unpackedSize":592277,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQDBX8S3OYizgYjk0OZcKlYTwKJJ+eHUXiR3y+0Dpg8yjwIhAOMlPhzrbkPl7/Ma/OW53fmC8M0G+zSF5l434eA9EcvU"}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.4.0_1685194683197_0.9662234083582963"},"_hasShrinkwrap":false},"2.4.1":{"name":"formik","description":"Build forms in React, without the tears","version":"2.4.1","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^1.10.0"},"devDependencies":{"@testing-library/react":"^11.1.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^16.9.55","@types/react-dom":"^16.9.9","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^17.0.1","react-dom":"^17.0.1","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"20f6848e46513f0fc72c9962c2c6e485470da131","bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.4.1","_nodeVersion":"18.16.0","_npmVersion":"9.5.1","dist":{"integrity":"sha512-ajOB9EmFhXb4PACTlaooVEn7PLtLtBJEZ8fPs+wFZjL5KSGwgAoU+n9DHN8JcqNKcXkloEYYtn1lxrLav18ecQ==","shasum":"f2630b51a866c86144a5faf68d31200c9d8ceea9","tarball":"https://registry.npmjs.org/formik/-/formik-2.4.1.tgz","fileCount":21,"unpackedSize":583209,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIFwXmz38fb2ZwXotPJOami6L/m2CgUY7fqt0caKn5drsAiEAzUu+ZsANmK4jjzQ+cQjo43EgWiiDRT4HVkSRMHoZW6k="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.4.1_1685571656727_0.172565488591927"},"_hasShrinkwrap":false},"2.4.2":{"name":"formik","description":"Build forms in React, without the tears","version":"2.4.2","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"repository":{"type":"git","url":"git+https://github.com/formium/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^2.0.0"},"devDependencies":{"@testing-library/react":"^14.0.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^18.2.7","@types/react-dom":"^18.2.4","@types/warning":"^3.0.0","@types/yup":"^0.24.9","just-debounce-it":"^1.1.0","react":"^18.2.0","react-dom":"^18.2.0","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.28.1"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"db97ce4d2a20075c37a20ab6e3d3551f213c9045","bugs":{"url":"https://github.com/formium/formik/issues"},"_id":"formik@2.4.2","_nodeVersion":"18.16.0","_npmVersion":"9.5.1","dist":{"integrity":"sha512-C6nx0hifW2uENP3M6HpPmnAE6HFWCcd8/sqBZEOHZY6lpHJ5qehsfAy43ktpFLEmkBmhiZDei726utcUB9leqg==","shasum":"a1115457cfb012a5c782cea3ad4b40b2fe36fa18","tarball":"https://registry.npmjs.org/formik/-/formik-2.4.2.tgz","fileCount":21,"unpackedSize":581099,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIG8Xlr7/9qHQgWZrDlZLyBAyVUPUIK4XHWmz48LrLBQBAiEA15WVlKmm1iGd+tcndfdBOZ9weCepZI4v2hgUs0ACAR0="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.4.2_1686762741609_0.6677920743233403"},"_hasShrinkwrap":false},"2.4.3":{"name":"formik","description":"Build forms in React, without the tears","version":"2.4.3","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"contributors":[{"name":"Evan Jacobs","email":"probablyup@gmail.com","url":"https://probablyup.com"}],"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^2.0.0"},"devDependencies":{"@testing-library/react":"^14.0.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^18.2.7","@types/react-dom":"^18.2.4","@types/warning":"^3.0.0","just-debounce-it":"^1.1.0","react":"^18.2.0","react-dom":"^18.2.0","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.32.0"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"82553121872ed52ed224e359e7f5b978fe9fce65","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"_id":"formik@2.4.3","_nodeVersion":"18.17.0","_npmVersion":"9.6.7","dist":{"integrity":"sha512-2Dy79Szw3zlXmZiokUdKsn+n1ow4G8hRrC/n92cOWHNTWXCRpQXlyvz6HcjW7aSQZrldytvDOavYjhfmDnUq8Q==","shasum":"6020e85eb3e3e8415b3b19d6f4f65793ab754b24","tarball":"https://registry.npmjs.org/formik/-/formik-2.4.3.tgz","fileCount":21,"unpackedSize":581428,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEQCIGB65+SOXYrGC5ZcnIUsdu6A0XXcbTunAVBkNbrNpS5sAiAWzD6um3gMM3r/6bRSDJjBpMC/MhqTnxbVHMurgWmUFA=="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.4.3_1690952074081_0.8494068738918918"},"_hasShrinkwrap":false},"2.4.4":{"name":"formik","description":"Build forms in React, without the tears","version":"2.4.4","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"contributors":[{"name":"Evan Jacobs","email":"probablyup@gmail.com","url":"https://probablyup.com"}],"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint"},"dependencies":{"deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^2.0.0"},"devDependencies":{"@testing-library/react":"^14.0.0","@types/hoist-non-react-statics":"^3.3.1","@types/lodash":"^4.14.119","@types/react":"^18.2.7","@types/react-dom":"^18.2.4","@types/warning":"^3.0.0","just-debounce-it":"^1.1.0","react":"^18.2.0","react-dom":"^18.2.0","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.32.0"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"34240fd174bc2dd6d1e9f16ae9329e67a49ba307","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"_id":"formik@2.4.4","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-MV99upag7fCC3JfsI60WcxhymwNZnJUcMcnGuoz6mDf78SUfBbKjmfcA9LzHx4lEmjzmOflhP7oqz+ZQv5eStg==","shasum":"41b775db867713fd4ea34930068391b01749b69c","tarball":"https://registry.npmjs.org/formik/-/formik-2.4.4.tgz","fileCount":21,"unpackedSize":582691,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEYCIQCgfsvCVuku16GZ4PZeXDMeobdm2DOu5qGHsiEHPufI8gIhAOIHxKeAoCwGFqDAyoCiUB3yl5fpoqdOVczhrHYKmVuy"}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.4.4_1694043523594_0.7971305298812168"},"_hasShrinkwrap":false},"2.4.5":{"name":"formik","description":"Build forms in React, without the tears","version":"2.4.5","license":"Apache-2.0","author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"contributors":[{"name":"Evan Jacobs","email":"probablyup@gmail.com","url":"https://probablyup.com"}],"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"homepage":"https://formik.org","keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"funding":[{"type":"individual","url":"https://opencollective.com/formik"}],"main":"dist/index.js","umd:main":"dist/formik.umd.production.js","module":"dist/formik.esm.js","typings":"dist/index.d.ts","peerDependencies":{"react":">=16.8.0"},"sideEffects":false,"scripts":{"test":"tsdx test --env=jsdom","test:watch":"npm run test -- --watchAll","start":"tsdx watch --tsconfig tsconfig.build.json --verbose --noClean","build":"tsdx build --tsconfig tsconfig.build.json","lint":"tsdx lint"},"dependencies":{"@types/hoist-non-react-statics":"^3.3.1","deepmerge":"^2.1.1","hoist-non-react-statics":"^3.3.0","lodash":"^4.17.21","lodash-es":"^4.17.21","react-fast-compare":"^2.0.1","tiny-warning":"^1.0.2","tslib":"^2.0.0"},"devDependencies":{"@testing-library/react":"^14.0.0","@types/lodash":"^4.14.119","@types/react":"^18.2.7","@types/react-dom":"^18.2.4","@types/warning":"^3.0.0","just-debounce-it":"^1.1.0","react":"^18.2.0","react-dom":"^18.2.0","tsdx":"^0.14.1","typescript":"^4.0.3","yup":"^0.32.0"},"jest":{"globals":{"__DEV__":"boolean"},"collectCoverageFrom":["src/**/*.{ts,tsx}"],"setupFilesAfterEnv":["<rootDir>/test/setupTests.ts"]},"gitHead":"0f960aaeeb0bdbef8312b5107cd3374884a0e62b","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"_id":"formik@2.4.5","_nodeVersion":"18.17.1","_npmVersion":"9.6.7","dist":{"integrity":"sha512-Gxlht0TD3vVdzMDHwkiNZqJ7Mvg77xQNfmBRrNtvzcHZs72TJppSTDKHpImCMJZwcWPBJ8jSQQ95GJzXFf1nAQ==","shasum":"f899b5b7a6f103a8fabb679823e8fafc7e0ee1b4","tarball":"https://registry.npmjs.org/formik/-/formik-2.4.5.tgz","fileCount":21,"unpackedSize":582715,"signatures":[{"keyid":"SHA256:jl3bwswu80PjjokCgh0o2w5c2U4LhQAE57gj9cz1kzA","sig":"MEUCIQDzmuvhg/JLknFH11X85B6rTi2F6JPkZ2eaxGdYf4Q8ggIgKLF4jPHlh8iSMN+n8kMjyGSRC9GBmaYwuBtrr1kwRVE="}]},"_npmUser":{"name":"jaredpalmer","email":"jared@palmer.net"},"directories":{},"maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/formik_2.4.5_1694980483825_0.18225474369699368"},"_hasShrinkwrap":false}},"readme":"<p align=\"center\">\n  <img src=\"https://user-images.githubusercontent.com/4060187/61057426-4e5a4600-a3c3-11e9-9114-630743e05814.png\" width=\"211\" height=\"182\" alt=\"Formik.js\" />\n</p>\n\n<h3 align=\"center\">\n  Build forms in React, without the tears.\n</h3>\n\n<br>\n\n[![Stable Release](https://img.shields.io/npm/v/formik.svg)](https://npm.im/formik)\n[![Blazing Fast](https://badgen.now.sh/badge/speed/blazing%20%F0%9F%94%A5/green)](https://npm.im/formik)\n[![gzip size](http://img.badgesize.io/https://unpkg.com/formik@latest/dist/formik.esm.js?compression=gzip)](https://unpkg.com/formik@latest/dist/formik.esm.js)\n[![license](https://badgen.now.sh/badge/license/Apache-2.0)](./LICENSE)\n[![Discord](https://img.shields.io/discord/769256827007139912.svg?style=flat-square)](https://discord.gg/pJSg287)\n\n**Visit [https://formik.org](https://formik.org) to get started with Formik.**\n\n## Organizations and projects using Formik\n\n[List of organizations and projects using Formik](https://github.com/jaredpalmer/formik/issues/87)\n\n## Authors\n\n- Jared Palmer [@jaredpalmer](https://twitter.com/jaredpalmer)\n- Ian White [@eonwhite](https://twitter.com/eonwhite)\n\n## Contributing\n\nThis monorepo uses `yarn`, so to start you'll need the package manager installed.\n\nTo run E2E tests you'll also need Playwright set up, which can be done locally via `npx playwright install`. Afterward, run `yarn start:app` and in a separate tab run `yarn e2e:ui` to boot up the test runner.\n\nWhen you're done with your changes, we use [changesets](https://github.com/changesets/changesets) to manage release notes. Run `yarn changeset` to autogenerate notes to be appended to your pull request.\n\nThank you!\n\n## Contributors\n\nFormik is made with <3 thanks to these wonderful people\n([emoji key](https://github.com/kentcdodds/all-contributors#emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore -->\n| [<img src=\"https://avatars2.githubusercontent.com/u/4060187?v=4\" width=\"100px;\"/><br /><sub><b>Jared Palmer</b></sub>](http://jaredpalmer.com)<br />[💬](#question-jaredpalmer \"Answering Questions\") [💻](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Code\") [🎨](#design-jaredpalmer \"Design\") [📖](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Documentation\") [💡](#example-jaredpalmer \"Examples\") [🤔](#ideas-jaredpalmer \"Ideas, Planning, & Feedback\") [👀](#review-jaredpalmer \"Reviewed Pull Requests\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=jaredpalmer \"Tests\") | [<img src=\"https://avatars0.githubusercontent.com/u/109324?v=4\" width=\"100px;\"/><br /><sub><b>Ian White</b></sub>](https://www.stardog.io)<br />[💬](#question-eonwhite \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aeonwhite \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Code\") [📖](https://github.com/jaredpalmer/formik/commits?author=eonwhite \"Documentation\") [🤔](#ideas-eonwhite \"Ideas, Planning, & Feedback\") [👀](#review-eonwhite \"Reviewed Pull Requests\") | [<img src=\"https://avatars0.githubusercontent.com/u/829963?v=4\" width=\"100px;\"/><br /><sub><b>Andrej Badin</b></sub>](http://andrejbadin.com)<br />[💬](#question-Andreyco \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AAndreyco \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=Andreyco \"Documentation\") | [<img src=\"https://avatars2.githubusercontent.com/u/91115?v=4\" width=\"100px;\"/><br /><sub><b>Adam Howard</b></sub>](http://adz.co.de)<br />[💬](#question-skattyadz \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askattyadz \"Bug reports\") [🤔](#ideas-skattyadz \"Ideas, Planning, & Feedback\") [👀](#review-skattyadz \"Reviewed Pull Requests\") | [<img src=\"https://avatars1.githubusercontent.com/u/6711845?v=4\" width=\"100px;\"/><br /><sub><b>Vlad Shcherbin</b></sub>](https://github.com/VladShcherbin)<br />[💬](#question-VladShcherbin \"Answering Questions\") [🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AVladShcherbin \"Bug reports\") [🤔](#ideas-VladShcherbin \"Ideas, Planning, & Feedback\") | [<img src=\"https://avatars3.githubusercontent.com/u/383212?v=4\" width=\"100px;\"/><br /><sub><b>Brikou CARRE</b></sub>](https://github.com/brikou)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Abrikou \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=brikou \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/5314713?v=4\" width=\"100px;\"/><br /><sub><b>Sam Kvale</b></sub>](http://skvale.github.io)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Askvale \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=skvale \"Code\") [⚠️](https://github.com/jaredpalmer/formik/commits?author=skvale \"Tests\") |\n| :---: | :---: | :---: | :---: | :---: | :---: | :---: |\n| [<img src=\"https://avatars0.githubusercontent.com/u/13765558?v=4\" width=\"100px;\"/><br /><sub><b>Jon Tansey</b></sub>](http://jon.tansey.info)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Ajontansey \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=jontansey \"Code\") | [<img src=\"https://avatars0.githubusercontent.com/u/6819171?v=4\" width=\"100px;\"/><br /><sub><b>Tyler Martinez</b></sub>](http://slightlytyler.com)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3Aslightlytyler \"Bug reports\") [📖](https://github.com/jaredpalmer/formik/commits?author=slightlytyler \"Documentation\") | [<img src=\"https://avatars0.githubusercontent.com/u/1285032?v=4\" width=\"100px;\"/><br /><sub><b>Tobias Lohse</b></sub>](http://MrLoh.se)<br />[🐛](https://github.com/jaredpalmer/formik/issues?q=author%3AMrLoh \"Bug reports\") [💻](https://github.com/jaredpalmer/formik/commits?author=MrLoh \"Code\") |\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the\n[all-contributors](https://github.com/kentcdodds/all-contributors)\nspecification. Contributions of any kind welcome!\n\n## Related\n\n- [TSDX](https://github.com/jaredpalmer/tsdx) - Zero-config CLI for TypeScript used by this repo. (Formik's Rollup configuration as a CLI)\n\n---\n\n[Apache 2.0 License.](https://github.com/jaredpalmer/formik/blob/master/LICENSE)\n","maintainers":[{"name":"jaredpalmer","email":"jared@palmer.net"}],"time":{"modified":"2023-09-17T19:54:44.305Z","created":"2017-06-14T19:53:09.868Z","0.0.1":"2017-06-14T19:53:09.868Z","0.0.2":"2017-06-14T19:56:11.411Z","0.1.0":"2017-06-14T20:06:54.189Z","0.1.1":"2017-06-14T20:50:42.466Z","0.2.0":"2017-06-14T21:56:01.355Z","0.3.0":"2017-06-15T18:33:20.829Z","0.3.1":"2017-06-15T21:30:04.422Z","0.4.0":"2017-06-15T23:10:01.286Z","0.5.0":"2017-06-16T19:23:30.189Z","0.5.1":"2017-06-16T20:34:50.449Z","0.5.2":"2017-06-17T19:52:59.911Z","0.5.3":"2017-06-18T17:49:56.153Z","0.6.0":"2017-06-19T14:44:16.098Z","0.6.1":"2017-06-19T15:12:13.150Z","0.6.2":"2017-06-19T22:24:23.041Z","0.6.3":"2017-06-26T19:14:00.189Z","0.7.0":"2017-07-02T20:45:26.109Z","0.7.1":"2017-07-03T20:58:13.222Z","0.7.2":"2017-07-11T17:13:07.600Z","0.7.3-rc1":"2017-07-12T00:30:28.769Z","0.8.0":"2017-07-21T23:19:31.771Z","0.8.1":"2017-07-22T01:26:51.306Z","0.8.2":"2017-07-22T19:45:06.763Z","0.8.3":"2017-07-24T16:35:33.531Z","0.8.4":"2017-07-25T14:39:52.680Z","0.8.5":"2017-07-26T21:28:48.029Z","0.8.6":"2017-07-31T13:57:35.706Z","0.8.7":"2017-07-31T15:40:53.213Z","0.8.8":"2017-07-31T19:54:03.587Z","0.8.9":"2017-08-01T14:54:20.534Z","0.9.0-alpha.1":"2017-08-04T21:34:22.046Z","0.9.0-alpha.2":"2017-08-04T21:51:11.466Z","0.9.0-alpha.3":"2017-08-04T22:00:39.781Z","0.9.0-alpha.4":"2017-08-04T22:47:29.865Z","0.9.0-alpha.5":"2017-08-10T21:40:17.132Z","0.9.0-alpha.6":"2017-08-17T15:12:19.923Z","0.9.0-alpha.7":"2017-08-29T23:20:51.958Z","0.9.0-alpha.8":"2017-08-29T23:25:50.668Z","0.9.0-alpha.9":"2017-08-30T00:05:39.425Z","0.9.0-alpha.10":"2017-08-31T21:25:11.398Z","0.9.0-beta.1":"2017-09-01T20:40:49.463Z","0.9.0-beta.2":"2017-09-03T14:59:25.931Z","0.9.0-beta.3":"2017-09-05T15:21:02.634Z","0.9.0":"2017-09-19T14:05:11.662Z","0.9.1":"2017-09-20T22:14:02.635Z","0.9.2":"2017-09-26T23:54:21.176Z","0.9.3":"2017-10-02T17:35:13.820Z","0.9.4":"2017-10-05T22:56:19.283Z","0.10.0":"2017-11-02T23:02:38.166Z","0.10.1":"2017-11-06T14:55:04.452Z","0.10.2":"2017-11-06T17:12:16.708Z","0.10.3":"2017-11-06T20:48:54.228Z","0.10.4":"2017-11-13T01:44:01.711Z","0.10.5":"2017-11-27T18:33:47.677Z","0.11.0-alpha.1":"2017-11-28T15:56:25.718Z","0.11.0-alpha.2":"2017-12-05T19:40:46.586Z","0.11.0-alpha.3":"2017-12-10T00:24:50.083Z","0.11.0-alpha.4":"2017-12-10T00:30:17.798Z","0.11.0-beta.1":"2017-12-14T14:03:50.491Z","0.11.0-rc.1":"2018-01-29T19:50:41.892Z","0.11.0-rc.2":"2018-01-29T21:59:45.291Z","0.11.0":"2018-02-01T18:12:59.110Z","0.11.1":"2018-02-01T18:35:39.166Z","0.11.2":"2018-02-01T20:06:07.155Z","0.11.3":"2018-02-01T22:33:07.667Z","0.11.4":"2018-02-02T21:06:55.647Z","0.11.5":"2018-02-05T21:40:23.150Z","0.11.6":"2018-02-07T21:09:52.005Z","0.11.7":"2018-02-07T21:41:27.561Z","0.11.8-0":"2018-02-08T18:24:12.603Z","0.11.8":"2018-02-08T18:30:05.793Z","0.11.9":"2018-02-09T00:43:45.881Z","0.11.10":"2018-02-10T00:59:34.519Z","0.11.11-0":"2018-02-15T21:25:14.746Z","0.11.11":"2018-02-21T16:18:12.904Z","1.0.0-alpha.1":"2018-02-21T22:39:26.538Z","1.0.0-alpha.2":"2018-02-27T22:58:47.728Z","1.0.0-alpha.3":"2018-03-14T20:11:52.321Z","1.0.0-alpha.4":"2018-03-30T17:43:16.230Z","1.0.0-alpha.5":"2018-04-18T20:47:13.885Z","1.0.0-alpha.6":"2018-04-18T21:31:55.092Z","1.0.0-alpha.r16.3.1":"2018-05-11T18:52:11.792Z","1.0.0-alpha.r16.3.2":"2018-05-11T19:12:12.629Z","1.0.0-beta.0":"2018-05-11T22:12:55.072Z","1.0.0-beta.1":"2018-05-12T12:30:28.149Z","1.0.0-beta.2":"2018-05-15T21:09:38.955Z","1.0.0-beta.3":"2018-06-28T18:30:00.668Z","1.0.0-beta.4":"2018-07-02T15:53:46.561Z","1.0.0-beta.5":"2018-07-05T22:32:47.654Z","1.0.0-beta.6":"2018-07-11T16:09:04.914Z","1.0.0-beta.7":"2018-07-11T23:38:02.045Z","1.0.0-beta.8":"2018-07-12T00:10:45.362Z","1.0.0-beta.9":"2018-07-12T13:12:55.401Z","1.0.0-beta.10":"2018-07-12T19:03:59.397Z","1.0.0":"2018-07-12T20:46:37.175Z","1.0.1":"2018-07-12T20:48:37.834Z","1.0.2-0":"2018-07-23T22:27:40.591Z","1.0.2":"2018-07-25T14:39:31.238Z","1.0.3":"2018-08-15T11:47:44.843Z","1.1.0":"2018-08-24T12:55:11.277Z","1.1.1":"2018-08-24T13:03:37.578Z","1.1.2":"2018-09-04T21:38:54.003Z","1.2.0":"2018-09-05T22:04:42.333Z","1.3.0":"2018-09-12T02:11:57.067Z","1.3.1":"2018-10-03T00:57:16.199Z","1.3.2-canary.3":"2018-10-21T16:43:41.961Z","1.3.2-canary.4":"2018-10-21T16:57:31.806Z","1.3.2":"2018-11-13T22:08:27.144Z","2.0.0-canary.5a8e912":"2018-12-05T22:50:35.219Z","1.4.0-0":"2018-12-08T22:09:36.727Z","1.4.0":"2018-12-08T22:37:43.791Z","2.0.0-canary.effcf9a":"2018-12-14T00:25:51.848Z","2.0.0-canary.effcf9b":"2018-12-14T23:51:34.421Z","1.4.1":"2018-12-14T23:53:56.781Z","1.4.2":"2019-01-07T00:45:55.437Z","2.0.0-gamma.1":"2019-01-20T19:09:51.126Z","1.4.3":"2019-01-28T17:09:28.498Z","1.5.0":"2019-02-08T21:25:28.629Z","1.5.1":"2019-02-17T22:20:21.625Z","2.0.0":"2019-03-08T14:15:32.433Z","2.0.1-alpha.0":"2019-03-08T14:23:47.599Z","1.5.2":"2019-04-02T19:39:41.843Z","2.0.1-alpha.1":"2019-04-02T19:54:16.092Z","2.0.1-alpha.2":"2019-04-03T19:48:35.499Z","1.5.3":"2019-04-26T00:26:19.513Z","1.5.4":"2019-04-26T15:42:11.501Z","2.0.1-alpha.3":"2019-05-16T20:24:35.192Z","2.0.1-alpha.4":"2019-05-16T20:37:47.965Z","2.0.1-alpha.5":"2019-05-16T21:25:19.936Z","2.0.1-alpha.51":"2019-05-16T22:24:16.716Z","1.5.5":"2019-05-17T21:20:00.190Z","1.5.6":"2019-05-17T21:41:30.099Z","1.4.4":"2019-05-17T21:51:24.185Z","2.0.1-rc.0":"2019-05-17T22:07:02.015Z","1.5.7":"2019-05-19T00:57:21.081Z","2.0.1-rc.1":"2019-05-28T20:06:53.137Z","2.0.1-rc.2":"2019-05-29T19:21:03.278Z","2.0.1-rc.3":"2019-05-30T13:02:47.734Z","2.0.1-rc.4":"2019-05-30T13:23:19.229Z","2.0.1-rc.5":"2019-06-11T17:51:23.577Z","2.0.1-rc.6":"2019-06-19T19:55:28.613Z","2.0.1-rc.7":"2019-06-22T18:30:01.648Z","2.0.1-rc.8":"2019-06-27T15:00:52.911Z","2.0.1-rc.9":"2019-06-27T15:26:18.925Z","2.0.1-rc.10":"2019-07-08T19:30:32.469Z","2.0.1-rc.11":"2019-07-09T15:14:23.891Z","2.0.1-rc.12":"2019-07-11T15:09:23.511Z","1.5.8":"2019-07-11T16:34:21.299Z","2.0.1-rc.13":"2019-08-21T15:31:11.600Z","2.0.1-rc.14":"2019-10-25T09:38:13.741Z","2.0.1-rc.15":"2019-10-25T13:28:38.374Z","2.0.1":"2019-10-25T16:18:05.219Z","2.0.2":"2019-10-27T12:09:28.578Z","2.0.3":"2019-10-28T14:09:34.993Z","2.0.4":"2019-11-12T21:40:00.777Z","2.0.5":"2019-11-21T16:03:30.076Z","2.0.6":"2019-11-21T21:31:34.491Z","2.0.7":"2019-12-09T20:31:26.405Z","2.0.8-canary.3":"2019-12-12T17:20:48.019Z","2.0.8-canary.2":"2019-12-12T17:21:07.573Z","2.0.8":"2019-12-12T18:08:35.799Z","2.0.9":"2019-12-30T18:14:10.511Z","2.0.10":"2019-12-30T18:27:38.855Z","2.0.11-canary.0":"2019-12-31T16:29:51.273Z","2.0.11":"2019-12-31T16:31:41.267Z","2.1.0":"2019-12-31T16:45:00.777Z","2.1.1-canary.0":"2020-01-02T21:39:53.809Z","2.1.1-canary.1":"2020-01-02T21:47:20.142Z","2.1.1":"2020-01-02T21:49:34.109Z","2.1.2-canary.0":"2020-01-13T15:28:34.491Z","2.1.2-canary.1":"2020-01-13T19:50:48.828Z","2.1.2":"2020-01-13T20:09:07.700Z","2.1.3-canary.0":"2020-01-15T22:29:56.237Z","2.1.3-canary.1":"2020-01-28T15:01:44.000Z","2.1.3":"2020-01-28T15:03:42.872Z","2.1.4-canary.0":"2020-02-06T18:11:54.027Z","2.1.4":"2020-02-06T18:16:04.447Z","2.1.5-canary.0":"2020-07-14T17:48:28.034Z","2.1.5":"2020-07-14T17:55:55.878Z","2.1.6-canary.0":"2020-09-24T20:00:52.516Z","2.1.6":"2020-09-29T20:49:31.356Z","2.1.7":"2020-10-01T21:08:18.656Z","2.2.0":"2020-10-08T21:01:27.735Z","2.2.1":"2020-10-23T20:04:57.131Z","3.0.0-next.0":"2020-10-27T18:46:55.321Z","3.0.0-next.1":"2020-10-27T20:08:26.097Z","2.2.2":"2020-11-05T16:49:19.827Z","2.2.3":"2020-11-07T21:49:13.724Z","3.0.0-next.2":"2020-11-07T21:49:42.980Z","2.2.4":"2020-11-10T19:58:35.974Z","2.2.5":"2020-11-11T22:43:55.656Z","3.0.0-next.3":"2020-11-11T23:21:56.733Z","3.0.0-next.4":"2020-11-14T19:46:03.232Z","3.0.0-next.5":"2020-11-16T15:04:04.021Z","3.0.0-next.6":"2020-11-16T15:51:20.738Z","3.0.0-next.7":"2020-11-19T16:42:07.919Z","3.0.0-next.8":"2020-12-02T19:36:46.912Z","2.2.6":"2020-12-10T14:40:37.924Z","2.2.7":"2021-05-19T15:37:11.266Z","2.2.8":"2021-05-21T23:59:19.040Z","2.2.9":"2021-06-02T17:04:11.795Z","2.2.10":"2023-05-26T19:30:43.158Z","2.3.0":"2023-05-26T19:47:27.375Z","2.3.2":"2023-05-26T20:42:07.889Z","2.3.3":"2023-05-27T13:23:06.765Z","2.4.0":"2023-05-27T13:38:03.413Z","2.4.1":"2023-05-31T22:20:57.015Z","2.4.2":"2023-06-14T17:12:21.822Z","2.4.3":"2023-08-02T04:54:34.306Z","2.4.4":"2023-09-06T23:38:43.932Z","2.4.5":"2023-09-17T19:54:44.101Z"},"keywords":["formik","form","forms","react","react-dom","hooks","react hooks","validation","render props","validation","higher order component","hoc"],"repository":{"type":"git","url":"git+https://github.com/jaredpalmer/formik.git"},"author":{"name":"Jared Palmer","email":"jared@palmer.net","url":"https://jaredpalmer.com"},"license":"Apache-2.0","readmeFilename":"README.md","users":{"jaredpalmer":true,"adrienhobbs":true,"epineda":true,"soenkekluth":true,"vladimi":true,"mbaer":true,"liunian":true,"nkalodimas":true,"sergeymakoveev":true,"oleg_tsyba":true,"joeisabell":true,"phixid":true,"mhaidarh":true,"fck":true,"shanewholloway":true,"jacob-beltran":true,"cr8tiv":true,"jrvldam":true,"jeffgreco":true,"71emj1":true,"cfleschhut":true,"myetkin":true},"homepage":"https://formik.org","bugs":{"url":"https://github.com/jaredpalmer/formik/issues"},"contributors":[{"name":"Evan Jacobs","email":"probablyup@gmail.com","url":"https://probablyup.com"}]}